<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue3  +vite + pinia + ts</title>
      <link href="/2022/08/27/Vue3/vue3-vite-pinia-ts/"/>
      <url>/2022/08/27/Vue3/vue3-vite-pinia-ts/</url>
      
        <content type="html"><![CDATA[<p>创建项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init vue@latest</span><br></pre></td></tr></table></figure><p>这一指令将会安装并执行 <a href="https://github.com/vuejs/create-vue">create-vue</a>，它是 Vue 官方的项目脚手架工具。通过该手脚架创建的项目以 vite 为打包工具，同时还支持 ts，状态管理使用的是 pinia（已取代 vuex）。</p><h5 id="相关文档"><a href="#相关文档" class="headerlink" title="相关文档"></a>相关文档</h5><p>vue：<a href="https://cn.vuejs.org/">https://cn.vuejs.org/</a>。</p><p>vite：<a href="https://cn.vitejs.dev/">https://cn.vitejs.dev/</a>。</p><p>pinia：<a href="https://pinia.web3doc.top/">https://pinia.web3doc.top/</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue3 </tag>
            
            <tag> vite </tag>
            
            <tag> pinia </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvm</title>
      <link href="/2022/08/27/nvm/"/>
      <url>/2022/08/27/nvm/</url>
      
        <content type="html"><![CDATA[<h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><p>下载前先确保原有 node 已经卸载。</p><p>下载地址：[<a href="https://github.com/coreybutler/nvm-windows/releases">Releases · coreybutler/nvm-windows · GitHub</a>。</p><p>下载 nvm-setup.exe，点击后根据提示安装，nvm 的安装路径可改，symlink 的安装路径默认。</p><p>安装完成后打开 cmd，执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm</span><br></pre></td></tr></table></figure><p>有东西打印出来即安装成功。</p><span id="more"></span><hr><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>在 nvm 的安装目录下有一个 settings.txt 文件，打开文件，在原有内容后面添加：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">node_mirror: https://npm.taobao.org/mirrors/node/</span><br><span class="line">npm_mirror: https://npm.taobao.org/mirrors/npm/</span><br></pre></td></tr></table></figure><p>这是下载 node 和 npm 的镜像源。</p><hr><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>（1）查看已经安装的所有 node 的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm ls</span><br></pre></td></tr></table></figure><p>（2）查看可以安装的所有 node 的版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm list available</span><br></pre></td></tr></table></figure><p>（3）安装某个版本的 node</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm install 版本号  # 例如：nvm install 14.19.0</span><br></pre></td></tr></table></figure><p>（4）切换 node 版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm use 版本号</span><br></pre></td></tr></table></figure><p>如果此时打印出一行乱码，可能是 cmd 没有以管理员身份运行。</p><p>（5）检查现在使用的 node 版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node -v</span><br></pre></td></tr></table></figure><p>（6）卸载某个版本的 node</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nvm uninstall 版本号</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Node </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
            <tag> nvm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js 中的 this 指向</title>
      <link href="/2022/08/06/JS/js%E4%B8%ADthis%E6%8C%87%E5%90%91/"/>
      <url>/2022/08/06/JS/js%E4%B8%ADthis%E6%8C%87%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h3 id="this-是什么"><a href="#this-是什么" class="headerlink" title="this 是什么"></a>this 是什么</h3><ol><li><p>在 js 中，this 是一个指针型变量，它动态指向当前函数的运行环境。</p></li><li><p>在不同的场景中调用同一个函数，this 的指向也可能会发生变化，但是它永远指向其所在函数的真实调用者；如果没有调用者，就指向全局对象 window。</p></li><li><p>在全局作用域下，this 始终指向 window。</p></li></ol><hr><h3 id="普通函数中的-this-指向"><a href="#普通函数中的-this-指向" class="headerlink" title="普通函数中的 this 指向"></a>普通函数中的 this 指向</h3><p>普通函数中的 this 的值是在函数被调用时指定的。</p><span id="more"></span><h5 id="全局函数"><a href="#全局函数" class="headerlink" title="全局函数"></a>全局函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(); <span class="comment">// window</span></span><br><span class="line"><span class="built_in">window</span>.test(); <span class="comment">// window</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test(); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">window</span>.test(); <span class="comment">// window</span></span><br></pre></td></tr></table></figure><p>严格模式下，直接调用 test()，this 指向 undefined。在非严格模式下，直接调用 test()，this 指向 window。</p><h5 id="对象中的函数"><a href="#对象中的函数" class="headerlink" title="对象中的函数"></a>对象中的函数</h5><p>对象内部方法的 this 指向调用这些方法的对象，也就是<strong>谁调用就指向谁</strong>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Silence&quot;</span>,</span><br><span class="line">    <span class="function"><span class="title">f</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj.f(); <span class="comment">// Silence</span></span><br></pre></td></tr></table></figure><p>因为是 obj 调用的 f 方法，所以 f 中的 this 就指向 obj。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Silence&quot;</span>,</span><br><span class="line">    <span class="function"><span class="title">f</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj.f()(); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>实际上 this 指向 window。因为 <code>obj.f()()</code> 相当于：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> x = f();</span><br><span class="line">x();</span><br></pre></td></tr></table></figure><p>可以看出，x 方法是被 window 调用的，因此 this 指向 window。</p><hr><h3 id="箭头函数中的-this"><a href="#箭头函数中的-this" class="headerlink" title="箭头函数中的 this"></a>箭头函数中的 this</h3><p>箭头函数中没有 this 和 arguments。箭头函数没有自己的 this 指向，它会捕获自己<strong>定义</strong>所处的<strong>外层执行环境</strong>，并且继承这个 this 值，<strong>指向当前定义时所在的对象</strong>。</p><p>箭头函数中的 this 值在被定义的时候就已经确定了，之后永远都不会改变。即使使用 call()、applay()、bind() 方法也改变不了。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Silence&quot;</span>,</span><br><span class="line">    <span class="attr">f</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj.f(); <span class="comment">// Silence</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Silence&quot;</span>,</span><br><span class="line">    <span class="function"><span class="title">f</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="built_in">this</span>.name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">obj.f()(); <span class="comment">// Silence</span></span><br></pre></td></tr></table></figure><p>由于箭头函数中没有 this 指向，它又被定义在函数 f 中，因此，它就继承函数 f 的 this 指向，即指向 obj。</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>web worker</title>
      <link href="/2022/08/06/JS/web-worker/"/>
      <url>/2022/08/06/JS/web-worker/</url>
      
        <content type="html"><![CDATA[<h3 id="为什么要用-worker"><a href="#为什么要用-worker" class="headerlink" title="为什么要用 worker"></a>为什么要用 worker</h3><p>因为 javascript 采用的是单线程模型，也就是所有的任务都只能在一个线程上执行，当解析到一个运算量较大的 js 的时候，后面的任务只能等前面的js解析完才能进行其他操作。所以就会出现”卡死“的状态。<br>Web Worker 它的作用就是解决以上问题。它可以通过加载一个脚本文件，进而创建一个独立工作的线程，在主线程之外运行。从而营造一个多线程的运行环境，充分利用 CPU 的资源，减轻主线程的负担。</p><span id="more"></span><hr><h3 id="worker-中的限制"><a href="#worker-中的限制" class="headerlink" title="worker 中的限制"></a>worker 中的限制</h3><h6 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h6><p>分配给 Worker 线程运行的脚本文件，必须与主线程的脚本文件同源。</p><h6 id="DOM-限制"><a href="#DOM-限制" class="headerlink" title="DOM 限制"></a>DOM 限制</h6><p>Worker 线程所在的全局对象，与主线程不一样，无法读取主线程所在网页的 DOM 对象，也无法使用 document、window、parent 这些对象。但是，Worker 中可以用 self 代替 window 对象，此外，还可以使用 navigator 对象和 location 对象。</p><h6 id="通信联系"><a href="#通信联系" class="headerlink" title="通信联系"></a>通信联系</h6><p>Worker 线程和主线程不在同一个上下文环境，它们不能直接通信，必须通过消息完成。</p><h6 id="脚本限制"><a href="#脚本限制" class="headerlink" title="脚本限制"></a>脚本限制</h6><p>Worker 线程不能执行 alert() 方法和 confirm() 方法，但可以使用 XMLHttpRequest 对象发出 AJAX 请求。</p><h6 id="文件限制"><a href="#文件限制" class="headerlink" title="文件限制"></a>文件限制</h6><p>Worker 线程无法读取本地文件，即不能打开本机的文件系统（file://），它所加载的脚本必须来自网络。</p><hr><h3 id="worker-的使用"><a href="#worker-的使用" class="headerlink" title="worker 的使用"></a>worker 的使用</h3><p>主线程与 worker 线程间的通信依赖以下两个方法：</p><p>推送消息：<strong>postMessage</strong></p><p>接收消息：<strong>onmessage</strong></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// worker.js</span></span><br><span class="line">self.onmessage = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event.data); <span class="comment">// &#123;name:&#x27;silence&#x27;, age:20&#125;</span></span><br><span class="line">    postMessage(<span class="string">&quot;close worker&quot;</span>);</span><br><span class="line">    self.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// index.js</span></span><br><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> Worker(<span class="string">&quot;./worker.js&quot;</span>);</span><br><span class="line">worker.postMessage(&#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Silence&quot;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;);</span><br><span class="line">worker.onmessage = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(event.data);</span><br><span class="line">    <span class="comment">// 关闭 worker</span></span><br><span class="line">    worker.terminate();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="加载脚本"><a href="#加载脚本" class="headerlink" title="加载脚本"></a>加载脚本</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// worker.js</span></span><br><span class="line">importScripts(<span class="string">&quot;script1.js&quot;</span>, <span class="string">&quot;script2.js&quot;</span>)</span><br></pre></td></tr></table></figure><h5 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h5><p>worker 文件需要通过服务器来访问，因此使用 Worker 的项目一般要在 httpServer 中运行。</p><hr><h3 id="vue-中使用-Worker"><a href="#vue-中使用-Worker" class="headerlink" title="vue 中使用 Worker"></a>vue 中使用 Worker</h3><h4 id="webpack-4"><a href="#webpack-4" class="headerlink" title="webpack 4"></a>webpack 4</h4><p>vue 中如果直接使用 worker，首先遇到的是 worker 文件的路径和打包解析的问题。</p><p>方案一：直接将 worker 文件放到静态文件夹下（public），通过绝对路径引用。但是这样的话就不能在 worker 文件中通过 import、require 引入其他文件的代码。</p><p>方案二：使用 worker-loader。worker 文件不仅可以放在任意地方，还可以在文件中使用 import 和 require 引入其他代码。</p><h5 id="worker-loader"><a href="#worker-loader" class="headerlink" title="worker-loader"></a>worker-loader</h5><h6 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install worker-loader</span><br></pre></td></tr></table></figure><h6 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h6><p>内联方式：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Worker <span class="keyword">from</span> <span class="string">&quot;worker-loader!./Worker.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> Worker();</span><br></pre></td></tr></table></figure><p>配置文件方式：</p><p>vue.config.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    <span class="function"><span class="title">chainWebpack</span>(<span class="params">config</span>)</span> &#123;</span><br><span class="line">        config.module.rule(<span class="string">&#x27;js&#x27;</span>).exclude.add(<span class="regexp">/\.worker\.js$/</span>);</span><br><span class="line"></span><br><span class="line">        config.module</span><br><span class="line">          .rule(<span class="string">&#x27;worker&#x27;</span>)</span><br><span class="line">          .test(<span class="regexp">/\.worker\.js$/</span>)</span><br><span class="line">          .use(<span class="string">&#x27;worker-loader&#x27;</span>)</span><br><span class="line">          .loader(<span class="string">&#x27;worker-loader&#x27;</span>)</span><br><span class="line">          .options(&#123;</span><br><span class="line">              <span class="attr">inline</span>: <span class="string">&quot;fallback&quot;</span></span><br><span class="line">          &#125;)</span><br><span class="line">          .end();</span><br><span class="line"></span><br><span class="line">        config.output.globalObject(<span class="string">&#x27;this&#x27;</span>)</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">parallel</span>: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Worker <span class="keyword">from</span> <span class="string">&quot;./file.worker.js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> worker = <span class="keyword">new</span> Worker();</span><br></pre></td></tr></table></figure><h4 id="webapck-5"><a href="#webapck-5" class="headerlink" title="webapck 5"></a>webapck 5</h4><p>如果是 webpack 5 的话，不需要 worker-loader 也可以正常使用了。</p><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Worker(<span class="keyword">new</span> URL(<span class="string">&#x27;./worker.js&#x27;</span>, <span class="keyword">import</span>.meta.url));</span><br></pre></td></tr></table></figure><p>详情请见 <a href="https://webpack.js.org/guides/web-workers/%E3%80%82">https://webpack.js.org/guides/web-workers/。</a></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> worker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>socketio项目部署</title>
      <link href="/2022/07/16/Linux/socketio%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/"/>
      <url>/2022/07/16/Linux/socketio%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<p>在开发期间，后台服务使用的是 Flask 自带的 development server，该服务不支持 websocket 协议，只支持 pollling 协议。</p><p>在项目上线时，我们需要使用生产环境的 web server，如 gunicorn，uwsgi，以及能够支持 websocket 协议的网络库： eventlet 或 gevent。</p><span id="more"></span><h5 id="gunicorn-eventlet-开启服务"><a href="#gunicorn-eventlet-开启服务" class="headerlink" title="gunicorn + eventlet 开启服务"></a>gunicorn + eventlet 开启服务</h5><p>这里使用 gunicorn + eventlet，需要修改如下部分：</p><p>（1）创建 socketio 服务时指定 async_mode 为 eventlet：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sio = SocketIO(cors_allowed_origins=<span class="string">&#x27;*&#x27;</span>, async_mode=<span class="string">&#x27;eventlet&#x27;</span>)</span><br></pre></td></tr></table></figure><p>（2）为避免使用 polling 协议，socketio 客户端指定协议为 websocket：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> socket = io(<span class="string">&quot;https://10.0.0.76:5000&quot;</span>, &#123;</span><br><span class="line">  <span class="attr">autoConnect</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">reconnectionDelay</span>: <span class="number">2000</span>,</span><br><span class="line">  <span class="attr">transports</span>: [<span class="string">&quot;websocket&quot;</span>]</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>现在可以通过以下指令开启服务（https）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn -b 10.0.0.76:5000 --certfile CA/xxx.crt --keyfile CA/xxx.key --worker-class eventlet -w 1 app:app</span><br></pre></td></tr></table></figure><p>第一个 app 指的是定义 application 实例的文件（app.py），第二个 app 指定的是 application 实例本身。</p><p>为了方便，我们用文件的形式来启动 gunicorn：</p><p>新建 gunicorn.conf.py，向其中添加如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 并行工作进程数</span></span><br><span class="line">workers = <span class="number">1</span></span><br><span class="line"><span class="comment"># 指定每个工作者的线程数</span></span><br><span class="line">threads = <span class="number">2</span></span><br><span class="line"><span class="comment"># 监听内网端口5000</span></span><br><span class="line">bind = <span class="string">&#x27;:5000&#x27;</span></span><br><span class="line"><span class="comment"># 工作模式协程</span></span><br><span class="line">worker_class = <span class="string">&#x27;eventlet&#x27;</span></span><br><span class="line"><span class="comment"># 设置最大并发量</span></span><br><span class="line">worker_connections = <span class="number">2000</span></span><br><span class="line"><span class="comment"># 设置访问日志和错误信息日志路径</span></span><br><span class="line">accesslog = <span class="string">&#x27;./log/gunicorn_acess.log&#x27;</span> <span class="comment"># 记录访问服务器的用户信息</span></span><br><span class="line">errorlog = <span class="string">&#x27;./log/gunicorn_error.log&#x27;</span> <span class="comment"># 记录服务器运行日志</span></span><br><span class="line"><span class="comment"># 标准输出</span></span><br><span class="line">accesslog = <span class="string">&#x27;-&#x27;</span></span><br><span class="line">errorlog = <span class="string">&#x27;-&#x27;</span></span><br><span class="line"><span class="comment">#设置这个值为true 才会把打印信息记录到错误日志里</span></span><br><span class="line">capture_output = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 设置日志记录水平</span></span><br><span class="line">loglevel = <span class="string">&#x27;warning&#x27;</span></span><br><span class="line"><span class="comment"># 文件更改后是否重启</span></span><br><span class="line">reload = <span class="literal">True</span></span><br></pre></td></tr></table></figure><p>通过以下命令启用配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gunicorn -c gunicorn.conf.py app:app</span><br></pre></td></tr></table></figure><h5 id="nginx-反向代理"><a href="#nginx-反向代理" class="headerlink" title="nginx 反向代理"></a>nginx 反向代理</h5><p>将 https 代理到 http。</p><p>向 nginx 配置文件中添加如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    ...</span><br><span class="line">    root html;</span><br><span class="line">    location / &#123;</span><br><span class="line">        try_files $uri $uri/ /index.html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># https 请求反向代理</span></span><br><span class="line">    location /api &#123;</span><br><span class="line">        proxy_pass http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># socketio 反向代理</span></span><br><span class="line">    location /socket.io &#123;</span><br><span class="line">        proxy_http_version <span class="number">1.1</span>;</span><br><span class="line">        proxy_buffering off;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection <span class="string">&quot;Upgrade&quot;</span>;</span><br><span class="line">        proxy_pass http://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">5000</span>/socket.io;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时前端接口的端口号不再是 5000，而是默认 443。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webRTC-切换摄像头</title>
      <link href="/2022/07/16/JS/webRTC-%E5%88%87%E6%8D%A2%E6%91%84%E5%83%8F%E5%A4%B4/"/>
      <url>/2022/07/16/JS/webRTC-%E5%88%87%E6%8D%A2%E6%91%84%E5%83%8F%E5%A4%B4/</url>
      
        <content type="html"><![CDATA[<p>切换摄像头可以通过改变 getMediaStream 的约束条件来实现。</p><p>前置摄像头：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">constraints = &#123;</span><br><span class="line">    <span class="attr">audio</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">video</span>: &#123;</span><br><span class="line">        <span class="attr">facingMode</span>: <span class="string">&quot;user&quot;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>后置摄像头：</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">constraints = &#123;</span><br><span class="line">    <span class="attr">audio</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">video</span>: &#123;</span><br><span class="line">        <span class="attr">facingMode</span>: &#123;</span><br><span class="line">            <span class="attr">exact</span>: <span class="string">&quot;environment&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切换摄像头：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">switchCamera</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    localStream.getTracks().forEach(<span class="function"><span class="params">track</span> =&gt;</span> &#123;</span><br><span class="line">        track.stop();</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    constraints.video.facingMode = constraints.video.facingMode === <span class="string">&quot;user&quot;</span> ? &#123;<span class="attr">exact</span>: <span class="string">&quot;environment&quot;</span>&#125; : <span class="string">&quot;user&quot;</span>;</span><br><span class="line">    localStream = <span class="keyword">await</span> getMediaStream(constraints).catch(<span class="function">() =&gt;</span> &#123;<span class="built_in">console</span>.error(<span class="string">&quot;获取视频流失败&quot;</span>)&#125;);</span><br><span class="line"></span><br><span class="line">    localVideo.value.srcObject = localStream;</span><br><span class="line">    localVideo.value.play();</span><br><span class="line"></span><br><span class="line">    localStream.getTracks().forEach(<span class="function"><span class="params">track</span> =&gt;</span> &#123;</span><br><span class="line">        pc.getSenders().forEach(<span class="function"><span class="params">sender</span> =&gt;</span> &#123;</span><br><span class="line">            sender.replaceTrack(track);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>切换摄像头时，先把本地视频流停掉，然后根据约束条件获取新的视频流。</p><p>获取到新的视频流之后，为了在保持视频不断的情况下将其传到远端，可以用 <code>RTCRtpSender.replaceTrack()</code> 方法。</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> webRTC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>搭建coturn服务</title>
      <link href="/2022/07/16/Linux/%E6%90%AD%E5%BB%BAcoturn%E6%9C%8D%E5%8A%A1/"/>
      <url>/2022/07/16/Linux/%E6%90%AD%E5%BB%BAcoturn%E6%9C%8D%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>deepin/ubuntu 环境。</p><h6 id="安装-coturn"><a href="#安装-coturn" class="headerlink" title="安装 coturn"></a>安装 coturn</h6><p>先安装依赖：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-get install libssl-dev libevent-dev</span><br></pre></td></tr></table></figure><p>然后下载 coturn：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/coturn/coturn.git</span><br></pre></td></tr></table></figure><span id="more"></span><p>安装：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/coturn</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure><p>配置环境变量：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">vim ~/.bashrc</span><br><span class="line"></span><br><span class="line">添加以下内容：</span><br><span class="line">export coturn_home=/usr/local/coturn</span><br><span class="line">export PATH=$PATH:$coturn_home/bin</span><br><span class="line"></span><br><span class="line">source ~/.bashrc</span><br></pre></td></tr></table></figure><h6 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo cp /usr/local/coturn/etc/turnserver.conf.default /usr/local/coturn/turnserver.conf</span><br><span class="line"></span><br><span class="line">sudo vim /usr/local/coturn/turnserver.conf</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#（必选）监听端口可以不设置会默认的使用3478</span><br><span class="line">listening-port=3478</span><br><span class="line">#（必选）监听的网卡</span><br><span class="line">listening-device=eth0</span><br><span class="line">#（必选）listening-ip,注意必须是你的内网IP地址</span><br><span class="line">listening-ip=10.0.0.76</span><br><span class="line">#（必选）external-ip，注意必须使用你的外网IP地址(云主机的公网IP地址)</span><br><span class="line">external-ip=</span><br><span class="line">#（必选）设置用户名及密码</span><br><span class="line">user=root:123456</span><br><span class="line">cli-password=123456</span><br><span class="line">#（必选）一般和你创建用户名和密码是填写的-r后面的一样</span><br><span class="line">realm=外网 ip 或域名</span><br><span class="line">min-port=49152</span><br><span class="line">max-port=65535</span><br><span class="line">lt-cred-mesh</span><br><span class="line"># 证书</span><br><span class="line">cert=</span><br><span class="line">pkey=</span><br></pre></td></tr></table></figure><h6 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">turnserver -a -o -c /usr/local/coturn/turnserver.conf</span><br></pre></td></tr></table></figure><p>iceServer 写成：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">turn:公网ip或域名:3478</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> deepin </tag>
            
            <tag> coturn </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python日志</title>
      <link href="/2022/07/16/Flask/python%E6%97%A5%E5%BF%97/"/>
      <url>/2022/07/16/Flask/python%E6%97%A5%E5%BF%97/</url>
      
        <content type="html"><![CDATA[<p>Python logging 模块定义了为应用程序和库实现灵活的事件日志记录的函数和类。</p><p>日志记录函数以它们用来跟踪的事件的级别或严重性命名。下面描述了标准级别及其适用性（从高到低的顺序）：</p><p>critical &gt; error &gt; warning &gt; info &gt; debug</p><span id="more"></span><p>级别越高打印的日志越少，反之亦然，即</p><ul><li>debug：打印全部的日志( notset 等同于 debug )</li><li>info：打印 info, warning, error, critical 级别的日志</li><li>warning：打印 warning, error, critical 级别的日志</li><li>error：打印 error, critical 级别的日志</li><li>critical：打印 critical 级别</li></ul><p>开发应用程序时，可以使用 DEBUG 或 INFO 级别的日志获取尽可能详细的日志信息来进行开发或部署调试；</p><p>应用上线或部署生产环境时，应该使用 WARNING 或 ERROR 或 CRITICAL 级别的日志来降低机器的 I/O 压力和提高获取错误日志信息的效率。</p><p>日志的级别可以通过 <code>logging.basicConfig()</code> 设置。</p><h5 id="logging-模块的介绍"><a href="#logging-模块的介绍" class="headerlink" title="logging 模块的介绍"></a>logging 模块的介绍</h5><ol><li>loggers 提供应用程序代码直接使用的接口</li><li>handlers 用于将日志记录发送到指定的目的位置</li><li>filters 提供更细粒度的日志过滤功能，用于决定哪些日志记录将会被输出（其它的日志记录将会被忽略）</li><li>formatters 用于控制日志信息的最终输出格式</li></ol><p>新建 logs.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> logging.handlers <span class="keyword">import</span> RotatingFileHandler</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">setup_log</span>():</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;配置日志&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 设置日志的记录等级</span></span><br><span class="line">    logging.basicConfig(level=logging.DEBUG)  <span class="comment"># 调试debug级</span></span><br><span class="line">    <span class="comment"># 创建日志记录器，指明日志保存的路径、每个日志文件的最大大小、保存的日志文件个数上限</span></span><br><span class="line">    file_log_handler = RotatingFileHandler(<span class="string">&quot;logs/app.log&quot;</span>, maxBytes=<span class="number">1024</span> * <span class="number">1024</span> * <span class="number">100</span>, backupCount=<span class="number">5</span>)</span><br><span class="line">    <span class="comment"># 创建日志记录的格式 日志等级 输入日志信息的文件名 行数 日志信息</span></span><br><span class="line">    formatter = logging.Formatter(<span class="string">&#x27;%(levelname)s %(filename)s:  %(lineno)d %(message)s&#x27;</span>)</span><br><span class="line">    <span class="comment"># 为刚创建的日志记录器设置日志记录格式</span></span><br><span class="line">    file_log_handler.setFormatter(formatter)</span><br><span class="line">    <span class="comment"># 为全局的日志工具对象（flask app使用的）添加日志记录器</span></span><br><span class="line">    logging.getLogger().addHandler(file_log_handler)</span><br></pre></td></tr></table></figure><p>app.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> logs <span class="keyword">import</span> setup_log</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    setup_log()</span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> current_app</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span>():</span></span><br><span class="line">    current_app.logger.info(<span class="string">&#x27;hello world&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>日志打印内容为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INFO views.py: 40 hello world</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nginx配置多个vue项目</title>
      <link href="/2022/07/16/Linux/nginx%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAvue%E9%A1%B9%E7%9B%AE/"/>
      <url>/2022/07/16/Linux/nginx%E9%85%8D%E7%BD%AE%E5%A4%9A%E4%B8%AAvue%E9%A1%B9%E7%9B%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="nginx-同时部署多个-vue-项目"><a href="#nginx-同时部署多个-vue-项目" class="headerlink" title="nginx 同时部署多个 vue 项目"></a>nginx 同时部署多个 vue 项目</h3><p>假如现在有两个前端项目：chat、 admin。想要通过 ‘/‘ 访问 chat 项目，通过 ‘/admin’ 访问 admin 项目。</p><h5 id="修改-publicPath"><a href="#修改-publicPath" class="headerlink" title="修改 publicPath"></a>修改 publicPath</h5><p>默认情况下，Vue CLI 会假设你的应用是被部署在一个域名的根路径上，例如 <code>https://www.my-app.com/</code>。如果应用被部署在一个子路径上，你就需要用这个选项指定这个子路径。例如，如果你的应用被部署在 <code>https://www.my-app.com/my-app/</code>，则设置 <code>publicPath</code> 为 <code>/my-app/</code>。</p><span id="more"></span><!-- more --><!-- more --><p>chat/vue.config.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">publicPath</span>: <span class="string">&#x27;/&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>admin/vue.config.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">publicPath</span>: process.env.NODE_ENV === <span class="string">&#x27;production&#x27;</span></span><br><span class="line">    ? <span class="string">&#x27;/admin/&#x27;</span></span><br><span class="line">    : <span class="string">&#x27;/&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="修改-router-配置"><a href="#修改-router-配置" class="headerlink" title="修改 router 配置"></a>修改 router 配置</h5><p>添加 publicPath 属性后，所有路由都应该有一个公共前缀 ‘/admin/‘，我们只需配置 base 即可。</p><p>admin/router/index.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> router = createRouter(&#123;</span><br><span class="line">  <span class="attr">history</span>: createWebHistory(<span class="string">&quot;/admin/&quot;</span>),</span><br><span class="line">  routes</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>chat 项目不需修改。</p><h5 id="配置-nginx"><a href="#配置-nginx" class="headerlink" title="配置 nginx"></a>配置 nginx</h5><p>nginx 所在目录为：/usr/local/nginx。</p><p>在目录下新建文件夹 app，然后将打包后 chat 和 admin 项目放入 app 下。</p><p>修改配置文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">    ...</span><br><span class="line">    server &#123;</span><br><span class="line">        ...</span><br><span class="line">        location / &#123;</span><br><span class="line">            root      /usr/local/nginx/app/chat;</span><br><span class="line">            index     index.html</span><br><span class="line">            try_files $uri $uri/ /index.html;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        location /admin &#123;</span><br><span class="line">            alias      /usr/local/nginx/app/admin;</span><br><span class="line">            index     index.html</span><br><span class="line">            try_files $uri $uri/ /admin/index.html;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js-媒体流录制</title>
      <link href="/2022/06/19/JS/js-%E5%AA%92%E4%BD%93%E6%B5%81%E5%BD%95%E5%88%B6/"/>
      <url>/2022/06/19/JS/js-%E5%AA%92%E4%BD%93%E6%B5%81%E5%BD%95%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>有时候我们需要用 js 来录音或者录视频，就需要用到 <strong>mediaRecorder</strong>。</p><p>具体介绍请看：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaRecorder/MediaRecorder">https://developer.mozilla.org/zh-CN/docs/Web/API/MediaRecorder/MediaRecorder</a>。</p><h3 id="MediaRecorder-介绍"><a href="#MediaRecorder-介绍" class="headerlink" title="MediaRecorder 介绍"></a>MediaRecorder 介绍</h3><h6 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h6><ul><li>start()：开始</li><li>stop()：结束</li><li>pause()：暂停</li><li>resume()：恢复录制</li></ul><span id="more"></span><h5 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h5><ul><li><p>start</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(<span class="string">&quot;start&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line">onstart = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>stop</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">addEventListener(<span class="string">&quot;stop&quot;</span>, <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;&#125;);</span><br><span class="line"></span><br><span class="line">onstop = <span class="function">(<span class="params">event</span>) =&gt;</span> &#123;&#125;;</span><br></pre></td></tr></table></figure></li><li><p>dataavailable：当 MediaRecorder 将媒体数据传送到您的应用程序以供其使用时，将触发 dataavailable 事件。 数据在包含数据的 Blob 对象中提供。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> chunks = [];</span><br><span class="line">mediaRecorder.ondataavailable = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    chunks.push(e.data);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>下面是一个录制视频（音频）的例子：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> stream;</span><br><span class="line"><span class="keyword">let</span> chunks = [];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取媒体流</span></span><br><span class="line"><span class="keyword">const</span> options = &#123;<span class="attr">video</span>:<span class="literal">true</span>, <span class="attr">audio</span>:<span class="literal">true</span>&#125;;</span><br><span class="line">navigator.mediaDevices.getUserMedia(options).then(</span><br><span class="line">    <span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">        stream = data;</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建 MediaRecorder 对象</span></span><br><span class="line"><span class="keyword">const</span> mediaRecorder = <span class="keyword">new</span> MediaRecorder(stream, &#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始录制</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">start</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    mediaRecorder.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 录制过程中获取数据</span></span><br><span class="line">mediaRecorder.ondataavailable = <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    chunks.push(e.data);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结束录制</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">end</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    mediaRecorder.stop();</span><br><span class="line">    </span><br><span class="line">    mediaRecorder.onstop = <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 将数据转化为 blob</span></span><br><span class="line">        <span class="keyword">const</span> blob = <span class="keyword">new</span> Blob(chunks.value);</span><br><span class="line">        <span class="built_in">console</span>.log(blob);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webRTC-端到端加密</title>
      <link href="/2022/04/05/JS/webRTC-%E7%AB%AF%E5%88%B0%E7%AB%AF%E5%8A%A0%E5%AF%86/"/>
      <url>/2022/04/05/JS/webRTC-%E7%AB%AF%E5%88%B0%E7%AB%AF%E5%8A%A0%E5%AF%86/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><p>Insertable Stream 可插入流是新的 WebRTC API,，可用来操作通过 RTCPeerConnection 传送的 MediaStreamTracks 中的每一个字节。它让上层应用能对 WebRTC 底层媒体进行访问，让以往 WebRTC 应用中许多不可能做的情况都成为可能了， 比如替换视频聊天时的背景，实时进行音视频处理（降噪，美颜，打水印，加特效等）。</p><p>最新的规范在这里 <a href="https://w3c.github.io/webrtc-encoded-transform/">https://w3c.github.io/webrtc-encoded-transform/</a>。</p><hr><h3 id="webRTC-音视频处理流程"><a href="#webRTC-音视频处理流程" class="headerlink" title="webRTC 音视频处理流程"></a>webRTC 音视频处理流程</h3><h5 id="发送流程"><a href="#发送流程" class="headerlink" title="发送流程"></a>发送流程</h5><ol><li>从媒体设备/其他采集源中获得一帧一帧的数据</li><li>对原始数据进行编码</li><li>&lt;- 在这里插入自定义逻辑</li><li>SRTP 加密</li><li>发送</li></ol><h5 id="接收流程"><a href="#接收流程" class="headerlink" title="接收流程"></a>接收流程</h5><ol><li>接收网络 RTP 包</li><li>SRTP 解密</li><li>RTP 组包</li><li>&lt;- 在这里插入自定义逻辑</li><li>解码数据</li><li>渲染数据</li></ol><span id="more"></span><p>WebRTC Insertable Streams 可以让我们在发送流程中的 3 ，接收流程的 4 加入处理编码后的数据的能力， 起初是为了端到端加密而设计， 但他的使用场景确可以进一步的拓展。</p><hr><h3 id="Stream-API"><a href="#Stream-API" class="headerlink" title="Stream API"></a>Stream API</h3><p>Streams 标准提供了一组通用的 API，用于创建此类流数据并与之交互，这些数据体现在可读流、可写流和转换流中。</p><ul><li>readable streams</li><li>writable streams</li><li>transform streams</li></ul><p>这些 API 旨在更有效地映射到低级的 I/O 原始操作，包括在适当的情况下对字节流进行专门的处理。</p><p>它们允许将多个流轻松组合到管道链中，或者可以通过读取器和写入器直接使用。最后，它们被设计为自动提供背压和排队。</p><p><a href="https://streams.spec.whatwg.org/">https://streams.spec.whatwg.org/</a> 有关于 Streams 的各种属性和方法的介绍。</p><h5 id="ReadableStream"><a href="#ReadableStream" class="headerlink" title="ReadableStream"></a>ReadableStream</h5><p>readable stream 是在 JavaScript 中由来自底层的 ReadableStream 对象表示的数据源，这是网络上或者本地某个地方的资源，可以从中获取数据。</p><h5 id="WritableStream"><a href="#WritableStream" class="headerlink" title="WritableStream"></a>WritableStream</h5><p>可写流是您可以写入数据的目的地，在 JavaScript 中由 WritableStream 对象表示。 它用作对于底层接收器之上的抽象，一个可写入原始数据的底层的 I/O sink。</p><h5 id="TransformStream"><a href="#TransformStream" class="headerlink" title="TransformStream"></a>TransformStream</h5><p>转换流，它允许我们对媒体流的原始数据进行操作，这也是端到端加密的核心部分。它的定义如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> TransformStream(&#123;</span><br><span class="line">    <span class="attr">transform</span>: transformFuction</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">transformFuction</span> (<span class="params">chunk, controller</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 对 chunk.data 进行操作</span></span><br><span class="line">    ...</span><br><span class="line">    </span><br><span class="line">    controller.enqueue(chunk);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>transform 接受一个方法，该方法有两个参数：</p><ul><li>chunk：数据块。chunk.data 是原始数据，它是一个 ArrayBuffer 类型的数据</li><li>controller：控制器，用于将修改后的 chunk 压入队列</li></ul><h5 id="管道链"><a href="#管道链" class="headerlink" title="管道链"></a>管道链</h5><p>Stream API 可以用一个称为 pipe chain 的结构将这些流一个一个串起来，具体方法有 pipeThrough 和 pipeTo。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ReadableStream.pipeThrough(TransformStream).pipeTo(WritableStream)</span><br></pre></td></tr></table></figure><p>这样就实现了对原始数据的修改。</p><hr><h3 id="Insertable-Streams-API"><a href="#Insertable-Streams-API" class="headerlink" title="Insertable Streams API"></a>Insertable Streams API</h3><p>可插入流其实指的是一种转换流，它可以在媒体流的处理过程中插入一些处理逻辑。它通过转换器 RTCRtpTransform 来实现，而 RTCRtpSender 和 RTCRtpReceiver 可操作 RTCRtpTransform。也就是说，可插入流可通过 RTCRtpSender 和 RTCRtpReceiver 上附加的 API 来将处理。</p><p>RTCRtpSender 对象的获取方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">localStream.getTracks().forEach(<span class="function"><span class="params">track</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> sender = pc.addTrack(track, localStream);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">localStream.getTracks().forEach(<span class="function"><span class="params">track</span> =&gt;</span> &#123;</span><br><span class="line">    pc.addTrack(track, localStream);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> senders = pc.getSenders();</span><br><span class="line">senders.forEach(<span class="function"><span class="params">sender</span> =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><p>其中 sender 就是 RTCRtpSender 对象。</p><p>RTCRtpReceiver 对象的获取方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">pc.ontrack(<span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> receiver = event.receiver;</span><br><span class="line">    event.streams.forEach(<span class="function"><span class="params">stream</span> =&gt;</span> &#123;</span><br><span class="line">        video.srcObject = stream;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line">pc.ontrack(<span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">    event.streams.forEach(<span class="function"><span class="params">stream</span> =&gt;</span> &#123;</span><br><span class="line">        video.srcObject = stream;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> receivers = pc.getReceivers();</span><br><span class="line">receivers.forEach(<span class="function"><span class="params">receiver</span> =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure><p>其中 receiver 就是 RTCRtpReceiver 对象。</p><br/><p>接下来我们来看一下使用可插入流的具体代码（信令的交互这里省略）：</p><p>定义全局变量：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> localStream;</span><br><span class="line"><span class="keyword">var</span> pc</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> localVideo = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;local_video&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> remoteVideo = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;remote_video&#x27;</span>);</span><br></pre></td></tr></table></figure><p>调用媒体：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">navigator.mediaDevices.getUserMedia(&#123; <span class="attr">video</span>: <span class="literal">true</span>, <span class="attr">audio</span>: <span class="literal">true</span> &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">mediastream</span>) </span>&#123;</span><br><span class="line">    localStream = mediastream; <span class="comment">// 本地视频流</span></span><br><span class="line">    localVideo.srcObject = mediastream; <span class="comment">// 播放本地视频流</span></span><br><span class="line">&#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">    alert(e);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>初始化 PeerConnection 的时候需要加上特殊参数:</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pc = <span class="keyword">new</span> RTCPeerConnection(&#123;</span><br><span class="line">    <span class="attr">encodedInsertableStreams</span>: <span class="literal">true</span>,  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>发送方插入逻辑：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">localMediaStream.getTracks().forEach(<span class="function"><span class="params">track</span> =&gt;</span> &#123;</span><br><span class="line">    pc.addTrack(track, <span class="built_in">this</span>.localMediaStream);</span><br><span class="line">&#125;);</span><br><span class="line">pc.getSenders().forEach(<span class="function"><span class="params">sender</span> =&gt;</span> &#123;setupSenderTransform(sender)&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setupSenderTransform</span> (<span class="params">sender</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> senderStreams = sender.createEncodedStreams();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; readable, writable &#125; = senderStreams;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> transformStream = <span class="keyword">new</span> TransformStream(&#123;</span><br><span class="line">        <span class="attr">transform</span>: encodeFunction</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    readable.pipeThrough(transformStream).pipeTo(writable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encodeFunction</span>(<span class="params">chunk, controller</span>) </span>&#123;</span><br><span class="line">    chunk.data = Encrypt(chunk.data);</span><br><span class="line"></span><br><span class="line">    controller.enqueue(chunk);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接收方插入逻辑：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">pc.addEventListener(<span class="string">&#x27;track&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">    setupReceiverTransform(event.receiver);</span><br><span class="line">    event.streams.forEach(<span class="function"><span class="params">stream</span> =&gt;</span> &#123;</span><br><span class="line">        remoteVideo.srcObject = stream;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setupReceiverTransform</span> (<span class="params">receiver</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> receiverStreams = receiver.createEncodedStreams();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> &#123; readable, writable &#125; = receiverStreams;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> transformStream = <span class="keyword">new</span> TransformStream(&#123;</span><br><span class="line">        <span class="attr">transform</span>: decodeFuction</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    readable.pipeThrough(transformStream).pipeTo(writable);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">decodeFuction</span> (<span class="params">chunk, controller</span>) </span>&#123;</span><br><span class="line">    chunk.data = Decrypt(chunk.data);</span><br><span class="line"></span><br><span class="line">    controller.enqueue(chunk);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里的 Encrypt 和 Decrypt 是加解密的方法。我们用 AES 来进行加解密：</p><p>先安装依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install crypto-js</span><br></pre></td></tr></table></figure><p>使用方法如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> CryptoJS <span class="keyword">from</span> <span class="string">&quot;crypto-js&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> key = CryptoJS.enc.Utf8.parse(<span class="string">&quot;1234123412ABCDEF&quot;</span>);  <span class="comment">//十六位十六进制数作为密钥</span></span><br><span class="line"><span class="keyword">const</span> iv = CryptoJS.enc.Utf8.parse(<span class="string">&#x27;ABCDEF1234123412&#x27;</span>);   <span class="comment">//十六位十六进制数作为密钥偏移量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 解密</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Decrypt</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="keyword">const</span> hex_str = Buffer2String(data);</span><br><span class="line">    <span class="keyword">let</span> decrypt = CryptoJS.AES.decrypt(hex_str, key, &#123; <span class="attr">iv</span>: iv, <span class="attr">mode</span>: CryptoJS.mode.CBC, <span class="attr">padding</span>: CryptoJS.pad.Pkcs7 &#125;);</span><br><span class="line">    <span class="keyword">return</span> String2Buffer(decrypt.toString(CryptoJS.enc.Utf8));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加密</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Encrypt</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> encrypted = CryptoJS.AES.encrypt(Buffer2String(data), key, &#123; <span class="attr">iv</span>: iv, <span class="attr">mode</span>: CryptoJS.mode.CBC, <span class="attr">padding</span>: CryptoJS.pad.Pkcs7 &#125;);</span><br><span class="line">    <span class="keyword">return</span> String2Buffer(encrypted.toString());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">String2Buffer</span> (<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(str.length);  </span><br><span class="line">    <span class="keyword">var</span> uint8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer);    </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;str.length; i++) &#123;</span><br><span class="line">        uint8arr[i] = str.charCodeAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Buffer2String</span> (<span class="params">buffer</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> uint8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer);</span><br><span class="line"><span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;uint8arr.length; i++) &#123;</span><br><span class="line">str += <span class="built_in">String</span>.fromCharCode(uint8arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 chunk.data 是 ArrayBuffer 类型，所以需要经过一系列的类型转换。</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> webRTC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webRTC-音视频通话</title>
      <link href="/2022/04/05/JS/webRTC-%E9%9F%B3%E8%A7%86%E9%A2%91%E9%80%9A%E8%AF%9D/"/>
      <url>/2022/04/05/JS/webRTC-%E9%9F%B3%E8%A7%86%E9%A2%91%E9%80%9A%E8%AF%9D/</url>
      
        <content type="html"><![CDATA[<p>上一节讲了 webRTC 的原理，今天我们就来实践一下。</p><p>我们知道，webRTC 是点对点的连接，它不需要服务器的参与，但是需要一个信令服务器来传递信令，这样才能使双方建立起连接。</p><p>这里我们用 node.js 来充当信令服务器，通过 websocket（socket.io）来传递信令。</p><p>新建目录 demo，在 demo 下新建 index.js 文件（信令服务器）和 文件夹 public（存放静态文件）。在 public 下新建 index.html 和 main.js 文件。</p><span id="more"></span><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install express</span><br><span class="line">npm install fs</span><br><span class="line">npm install socket.io</span><br></pre></td></tr></table></figure><h5 id="编写信令服务器"><a href="#编写信令服务器" class="headerlink" title="编写信令服务器"></a>编写信令服务器</h5><p>index.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; createServer &#125; = <span class="built_in">require</span>(<span class="string">&quot;https&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; Server &#125; = <span class="built_in">require</span>(<span class="string">&quot;socket.io&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> options = &#123;</span><br><span class="line">    <span class="attr">key</span>: fs.readFileSync(<span class="string">&#x27;./privatekey.key&#x27;</span>), <span class="comment">// 证书文件的存放目录</span></span><br><span class="line">    <span class="attr">cert</span>: fs.readFileSync(<span class="string">&#x27;./certificate.crt&#x27;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line">app.use(<span class="string">&#x27;/&#x27;</span>, express.static(<span class="string">&quot;public&quot;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> httpsServer = createServer(options, app)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> io = <span class="keyword">new</span> Server(httpsServer)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.on(<span class="string">&quot;connection&quot;</span>, <span class="function"><span class="params">socket</span> =&gt;</span> &#123;</span><br><span class="line">    socket.on(<span class="string">&quot;add_room&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        socket.join(<span class="string">&quot;room&quot;</span>);</span><br><span class="line">        socket.emit(<span class="string">&quot;conn&quot;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收 Offer 信令并发送给其他连接</span></span><br><span class="line">    socket.on(<span class="string">&#x27;signalOffer&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">        socket.to(<span class="string">&#x27;room&#x27;</span>).emit(<span class="string">&#x27;signalOffer&#x27;</span>, message);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收 Answer 信令</span></span><br><span class="line">    socket.on(<span class="string">&#x27;signalAnswer&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">        socket.to(<span class="string">&#x27;room&#x27;</span>).emit(<span class="string">&#x27;signalAnswer&#x27;</span>, message);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收 iceOffer</span></span><br><span class="line">    socket.on(<span class="string">&#x27;iceOffer&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">        socket.to(<span class="string">&#x27;room&#x27;</span>).emit(<span class="string">&#x27;iceOffer&#x27;</span>, message);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 接收 iceAnswer</span></span><br><span class="line">    socket.on(<span class="string">&#x27;iceAnswer&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">        socket.to(<span class="string">&#x27;room&#x27;</span>).emit(<span class="string">&#x27;iceAnswer&#x27;</span>, message);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">httpsServer.listen(<span class="number">3000</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&quot;服务开启&quot;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这里用 https 协议是因为摄像头和麦克风只能在 https 环境下才能被正常调用。</p><br/><h5 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h5><p>index.html</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>videoCall<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>音视频通话<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;video_container&quot;</span> <span class="attr">align</span>=<span class="string">&quot;center&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 本地视频流 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;local_video&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">muted</span> <span class="attr">webkit-playsinline</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 远端视频流 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">video</span> <span class="attr">id</span>=<span class="string">&quot;remote_video&quot;</span> <span class="attr">controls</span> <span class="attr">autoplay</span> <span class="attr">muted</span> <span class="attr">webkit-playsinline</span>&gt;</span><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">hr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;startButton&quot;</span>&gt;</span>加入房间<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;hangupButton&quot;</span>&gt;</span>挂断<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- socket.io 客户端 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://cdn.jsdelivr.net/npm/socket.io-client@4.4.1/dist/socket.io.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://webrtc.github.io/adapter/adapter-latest.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;main.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>main.js</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 本地视频 Video</span></span><br><span class="line"><span class="keyword">var</span> localVideo = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;local_video&#x27;</span>); </span><br><span class="line"><span class="comment">// 远端视频 Video</span></span><br><span class="line"><span class="keyword">var</span> remoteVideo = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;remote_video&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 加入房间按钮</span></span><br><span class="line"><span class="keyword">var</span> startButton = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;startButton&#x27;</span>); </span><br><span class="line"><span class="comment">// 挂断按钮</span></span><br><span class="line"><span class="keyword">var</span> hangupButton = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;hangupButton&#x27;</span>); </span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pc; <span class="comment">// RTCPeerConnection 实例（WebRTC 连接实例）</span></span><br><span class="line"><span class="keyword">var</span> localStream; <span class="comment">// 本地视频流</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> socket = io.connect(); <span class="comment">// 创建 socket 连接</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// offer 配置</span></span><br><span class="line"><span class="keyword">const</span> offerOptions = &#123;</span><br><span class="line">    <span class="attr">offerToReceiveVideo</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">offerToReceiveAudio</span>: <span class="number">1</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">hangupButton.disabled = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">startButton.addEventListener(<span class="string">&#x27;click&#x27;</span>, startAction);</span><br><span class="line">hangupButton.addEventListener(<span class="string">&#x27;click&#x27;</span>, hangupAction);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 点击加入房间</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startAction</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 浏览器兼容性处理</span></span><br><span class="line">    <span class="keyword">if</span> (navigator.mediaDevices === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        navigator.mediaDevices = &#123;&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (navigator.mediaDevices.getUserMedia === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        navigator.mediaDevices.getUserMedia = <span class="function"><span class="keyword">function</span> (<span class="params">constraints</span>) </span>&#123;</span><br><span class="line">            <span class="keyword">var</span> getUserMedia = navigator.getUserMedia || navigator.webkitGetUserMedia || navigator.mozGetUserMedia || navigator.msGetUserMedia || navigator.oGetUserMedia;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!getUserMedia) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;getUserMedia is not implemented in this browser&#x27;</span>));</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">                getUserMedia.call(navigator, constraints, resolve, reject);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用设备媒体</span></span><br><span class="line">    navigator.mediaDevices.getUserMedia(&#123; <span class="attr">video</span>: <span class="literal">true</span>, <span class="attr">audio</span>: <span class="literal">true</span> &#125;).then(<span class="function"><span class="keyword">function</span> (<span class="params">mediastream</span>) </span>&#123;</span><br><span class="line">        localStream = mediastream; <span class="comment">// 本地视频流</span></span><br><span class="line">        localVideo.srcObject = mediastream; <span class="comment">// 播放本地视频流</span></span><br><span class="line">        startButton.disabled = <span class="literal">true</span>;</span><br><span class="line">        socket.emit(<span class="string">&#x27;add_room&#x27;</span>); <span class="comment">// 连接 socket</span></span><br><span class="line">    &#125;).catch(<span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        alert(e);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// socket 连接成功</span></span><br><span class="line">socket.on(<span class="string">&#x27;conn&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    hangupButton.disabled = <span class="literal">false</span>;</span><br><span class="line">    pc = <span class="keyword">new</span> RTCPeerConnection(); <span class="comment">// 创建 RTC 连接</span></span><br><span class="line"></span><br><span class="line">    localStream.getTracks().forEach(<span class="function"><span class="params">track</span> =&gt;</span> pc.addTrack(track, localStream)); <span class="comment">// 添加本地视频流 track</span></span><br><span class="line">    <span class="comment">// 创建 Offer 请求</span></span><br><span class="line">    pc.createOffer(offerOptions).then(<span class="function"><span class="keyword">function</span> (<span class="params">offer</span>) </span>&#123;</span><br><span class="line">        pc.setLocalDescription(offer); <span class="comment">// 设置本地 Offer 描述，（设置描述之后会触发ice事件）</span></span><br><span class="line">        socket.emit(<span class="string">&#x27;signalOffer&#x27;</span>, offer); <span class="comment">// 发送 Offer 请求信令</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">// 监听 ice</span></span><br><span class="line">    pc.addEventListener(<span class="string">&#x27;icecandidate&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> iceCandidate = event.candidate;</span><br><span class="line">        <span class="keyword">if</span> (iceCandidate) &#123;</span><br><span class="line">            <span class="comment">// 发送 iceOffer 请求</span></span><br><span class="line">            socket.emit(<span class="string">&#x27;iceOffer&#x27;</span>, iceCandidate);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收 Offer 请求信令</span></span><br><span class="line">socket.on(<span class="string">&#x27;signalOffer&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">    pc.setRemoteDescription(<span class="keyword">new</span> RTCSessionDescription(message)); <span class="comment">// 设置远端描述</span></span><br><span class="line">    <span class="comment">// 创建 Answer 请求</span></span><br><span class="line">    pc.createAnswer().then(<span class="function"><span class="keyword">function</span> (<span class="params">answer</span>) </span>&#123;</span><br><span class="line">        pc.setLocalDescription(answer); <span class="comment">// 设置本地 Answer 描述</span></span><br><span class="line">        socket.emit(<span class="string">&#x27;signalAnswer&#x27;</span>, answer); <span class="comment">// 发送 Answer 请求信令</span></span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听远端视频流</span></span><br><span class="line">    pc.addEventListener(<span class="string">&#x27;track&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        event.streams.forEach(<span class="function"><span class="params">stream</span> =&gt;</span> &#123;</span><br><span class="line">            remoteVideo.srcObject = stream;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收 Answer 请求信令</span></span><br><span class="line">socket.on(<span class="string">&#x27;signalAnswer&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">    pc.setRemoteDescription(<span class="keyword">new</span> RTCSessionDescription(message)); <span class="comment">// 设置远端描述</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;remote answer&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 监听远端视频流</span></span><br><span class="line">    pc.addEventListener(<span class="string">&#x27;track&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">        event.streams.forEach(<span class="function"><span class="params">stream</span> =&gt;</span> &#123;</span><br><span class="line">            remoteVideo.srcObject = stream;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收 iceOffer</span></span><br><span class="line">socket.on(<span class="string">&#x27;iceOffer&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">    addIceCandidates(message)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收 iceAnswer</span></span><br><span class="line">socket.on(<span class="string">&#x27;iceAnswer&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">    addIceCandidates(message)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加 IceCandidate</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addIceCandidates</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pc !== <span class="string">&#x27;undefined&#x27;</span>) &#123;</span><br><span class="line">        pc.addIceCandidate(<span class="keyword">new</span> RTCIceCandidate(message));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 挂断</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hangupAction</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    localStream.getTracks().forEach(<span class="function"><span class="params">track</span> =&gt;</span> track.stop());</span><br><span class="line">    pc.close();</span><br><span class="line">    pc = <span class="literal">null</span>;</span><br><span class="line">    hangupButton.disabled = <span class="literal">true</span>;</span><br><span class="line">    startButton.disabled = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>webRTC 中交换描述和 ice 的具体过程：</p><p>第一步：创建一个 RTCPeerConnection，并添加本地媒体流。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pc = <span class="keyword">new</span> RTCPeerConnection();</span><br><span class="line"></span><br><span class="line">localStream.getTracks().forEach(<span class="function"><span class="params">track</span> =&gt;</span> pc.addTrack(track, localStream));</span><br></pre></td></tr></table></figure><p>第二步：如果是发起者，那么创建 offer，添加到本地描述，然后通过信令服务器发送给接收方。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">pc.createOffer(offerOptions).then(<span class="function"><span class="keyword">function</span> (<span class="params">offer</span>) </span>&#123;</span><br><span class="line">    pc.setLocalDescription(offer); <span class="comment">// 设置本地描述</span></span><br><span class="line">    socket.emit(<span class="string">&#x27;signalOffer&#x27;</span>, offer)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>第三步：接收方获取到 offer，将其添加到远程描述，然后创建 answer，添加到本地描述，并将 answer 发送给发起方。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pc.setRemoteDescription(<span class="keyword">new</span> RTCSessionDescription(message)); <span class="comment">// 设置远端描述</span></span><br><span class="line"><span class="comment">// 创建 Answer 请求</span></span><br><span class="line">pc.createAnswer().then(<span class="function"><span class="keyword">function</span> (<span class="params">answer</span>) </span>&#123;</span><br><span class="line">    pc.setLocalDescription(answer); <span class="comment">// 设置本地 Answer 描述</span></span><br><span class="line">    socket.emit(<span class="string">&#x27;signalAnswer&#x27;</span>, answer); <span class="comment">// 发送 Answer 请求信令</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>第四步：发起方获取到 answer，将其添加到远程描述。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pc.setRemoteDescription(<span class="keyword">new</span> RTCSessionDescription(message));</span><br></pre></td></tr></table></figure><p>第五步：交换 ice。其实在创建 offer 或 answer 时会触发 icecandidate 事件，通过该事件可以获取到 ice 信息，然后将信息发送给对方，对方将其添加即可。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">pc.addEventListener(<span class="string">&#x27;icecandidate&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> iceCandidate = event.candidate;</span><br><span class="line">  <span class="keyword">if</span> (iceCandidate) &#123;</span><br><span class="line">      socket.emit(<span class="string">&#x27;iceOffer&#x27;</span>, iceCandidate);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">socket.on(<span class="string">&#x27;iceOffer&#x27;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">    pc.addIceCandidate(<span class="keyword">new</span> RTCIceCandidate(message));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h5 id="开启服务"><a href="#开启服务" class="headerlink" title="开启服务"></a>开启服务</h5><p>执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node index.js</span><br></pre></td></tr></table></figure><p>然后在浏览器输入 <code>https://localhost:3000</code> 即可访问。</p><p><strong>注意：</strong>通信双方需要在同一局域网下。</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> webRTC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webRTC</title>
      <link href="/2022/04/05/JS/webRTC/"/>
      <url>/2022/04/05/JS/webRTC/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是-WebRTC？"><a href="#什么是-WebRTC？" class="headerlink" title="什么是 WebRTC？"></a>什么是 WebRTC？</h3><p>WebRTC，名称源自网页即时通信（英语：Web Real-Time Communication）的缩写，是一个支持网页浏览器进行实时语音对话或视频对话的 API，经过多年来的发展与改进，日臻成熟，作为浏览器网页端的通信技术，WebRTC 与 H5 巧妙结合，使得网页端的音视频通信变的简单易行，最为重要的是：网页端通信是完全免费的。</p><span id="more"></span><hr><h3 id="WebRTC-技术介绍"><a href="#WebRTC-技术介绍" class="headerlink" title="WebRTC 技术介绍"></a>WebRTC 技术介绍</h3><p>WebRTC 是一个开源项目，旨在使得浏览器能为实时通信（RTC）提供简单的JavaScript 接口。说的简单明了一点就是让浏览器提供 JS 的即时通信接口。这个接口所创立的信道并不是像 WebSocket 一样，打通一个浏览器与 WebSocket 服务器之间的通信，而是通过一系列的信令，建立一个浏览器与浏览器之间（peer-to-peer）的信道，这个信道可以发送任何数据，而不需要经过服务器。并且 WebRTC 通过实现 MediaStream，通过浏览器调用设备的摄像头、话筒，使得浏览器之间可以传递音频和视频。</p><p>WebRTC 技术将语音视频的采集和编解码全部内嵌到了浏览器中，由此大大简化了视频通信所需的成本，即只需要一个支持 WebRTC 技术的浏览器即可实现视频通信，并且可以跨越不同平台和终端。</p><p>WebRTC 有三个模块：Voice Engine（音频引擎），Video Engine（视频引擎）和 Transport。</p><p>WebRTC 有三个重要的部分：MediaStream、RTCPeerConnection、RTCDataChannel。</p><h5 id="MediaStream"><a href="#MediaStream" class="headerlink" title="MediaStream"></a>MediaStream</h5><p>getUserMedia 允许网页浏览器获取摄像头和麦克风的使用权限，并且捕获媒体。通过 MediaStream 的 API 能够通过设备的摄像头及话筒获得音视频的同步流。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">navigator.mediaDevices</span><br><span class="line">  .getUserMedia(Constraints)</span><br><span class="line">  .then(<span class="function"><span class="params">stream</span> =&gt;</span> &#123;&#125;)</span><br></pre></td></tr></table></figure><p>getUserMedia(constraints,successCallback,errCallback)，用于获取用户授权提供的音频视频数据流，三个参数分别为约束对象，成功的回调函数，发送错误的回调函数。</p><p><strong>注意：只有在 https 环境下才可以正常调用摄像头和麦克风。</strong></p><p>具体内容请看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MediaDevices/getUserMedia">getUserMedia</a>。</p><br/><h5 id="RTCPeerConnection"><a href="#RTCPeerConnection" class="headerlink" title="RTCPeerConnection"></a>RTCPeerConnection</h5><p>RTCPeerConnection 作为创建点对点连接的 API，是我们实现音视频实时通信的关键。在点对点通信的过程中，需要交换一系列信息，通常这一过程叫做<strong>信令</strong>（signaling）。在信令阶段需要完成的任务：</p><ul><li>为每个连接端创建一个 RTCPeerConnection，并添加本地媒体流</li><li>获取并交换本地和远程<strong>描述</strong>：SDP 格式的本地媒体元数据</li><li>获取并交换网络信息：潜在的连接端点称为 <strong>ICE 候选者</strong></li></ul><p>我们虽然把 WebRTC 称之为点对点的连接，但并不意味实现过程中不需要服务器的参与。因为在点对点的信道建立起来之前，二者之间是没有办法通信的。因此在信令阶段，我们需要一个通信服务来帮助我们建立起这个连接。WebRTC 本身没有指定信令服务，所以，我们可以使用 XMPP、XHR、Socket 等来做信令交换所需的服务。</p><p>具体内容请看 <a href="https://developer.mozilla.org/en-US/docs/Web/API/RTCPeerConnection">RTCPeerConnection</a>。</p><br/><p>建立点对点信道的问题是 NAT 穿越技术，在 RTCPeerConnection 中使用 ICE 框架来保证 RTCPeerConnection 能实现 NAT 穿越。</p><h5 id="ICE"><a href="#ICE" class="headerlink" title="ICE"></a>ICE</h5><p>ICE(Interactive Connectivity Establishment) 交互式连接建立，一种综合性的 NAT 穿越技术，是一种框架，可整合各种 NAT 穿越技术如 STUN、TURN。ICE 会先使用 STUN，尝试建立一个基于 UDP 的连接，如失败了就会去 TCP（先尝试 HTTP，然后尝试 HTTPS），若依旧失败 ICE 就会使用一个中继的 TURN 服务器。</p><p>打洞服务器需要我们自己配置：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = &#123;</span><br><span class="line">    <span class="string">&#x27;iceServers&#x27;</span>: [</span><br><span class="line">        &#123; <span class="attr">urls</span>: <span class="string">&#x27;stun:stun.l.google.com:19302&#x27;</span> &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">urls</span>: <span class="string">&quot;&quot;</span>,  <span class="comment">// 服务器地址（turn:ip:port）</span></span><br><span class="line">            <span class="attr">username</span>: <span class="string">&quot;&quot;</span>,  <span class="comment">// 用户名</span></span><br><span class="line">            <span class="attr">credential</span>: <span class="string">&quot;&quot;</span>,  <span class="comment">// 密码</span></span><br><span class="line">            <span class="attr">credentialType</span>: <span class="string">&quot;password&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">pc = <span class="keyword">new</span> RTCPeerConnection(config); </span><br></pre></td></tr></table></figure><p> 在 P2P 连接被创建前，首先必须进行信令处理。为了完成让用户都具有另一端用户的 IP 以及其他任何用户想要共享的涉及数据/视频的信息，信令会在用户和信令服务器之间进行多次往返。</p><p>首先呼叫端需要给接收端通过信令服务发送一条名为 offer（SDP） 的信息，接收端在接收到请求后，则通过信令服务返回一条 answer（SDP) 信息给呼叫端。然后在呼叫端和接收端的 ICE 候选信息准备完成后，通过信令服务进行交换，并互相保存对方的信息，这样就完成了一次连接。</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> webRTC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websocket-python服务端</title>
      <link href="/2022/04/05/websocket/websocket-python%E6%9C%8D%E5%8A%A1%E7%AB%AF/"/>
      <url>/2022/04/05/websocket/websocket-python%E6%9C%8D%E5%8A%A1%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<p>通过 socket.io 来操作 websocket API。</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install python-socketio</span><br></pre></td></tr></table></figure><h3 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h3><h5 id="创建服务的方式"><a href="#创建服务的方式" class="headerlink" title="创建服务的方式"></a>创建服务的方式</h5><h6 id="1-通过-WSGI-托管服务"><a href="#1-通过-WSGI-托管服务" class="headerlink" title="1. 通过 WSGI 托管服务"></a>1. 通过 WSGI 托管服务</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socketio</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建一个 socket.io 服务</span></span><br><span class="line">sio = socketio.Server()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 socket.io 服务托管到 wsgi 服务上</span></span><br><span class="line">app = socketio.WSGIApp(sio)</span><br></pre></td></tr></table></figure><span id="more"></span><h6 id="2-作为-Django、Flask-应用中的一部分"><a href="#2-作为-Django、Flask-应用中的一部分" class="headerlink" title="2. 作为 Django、Flask 应用中的一部分"></a>2. 作为 Django、Flask 应用中的一部分</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> wsgi <span class="keyword">import</span> app  <span class="comment"># a Flask, Django, etc. application</span></span><br><span class="line"></span><br><span class="line">app = socketio.WSGIApp(sio, app)</span><br></pre></td></tr></table></figure><p>不过，现在 django 或 flask 框架都有与之对应的 socket.io 扩展，直接使用即可。</p><h6 id="3-使用-eventlet-运行服务"><a href="#3-使用-eventlet-运行服务" class="headerlink" title="3. 使用 eventlet 运行服务"></a>3. 使用 eventlet 运行服务</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> eventlet</span><br><span class="line">eventlet.monkey_patch()</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> socketio</span><br><span class="line"><span class="keyword">import</span> eventlet.wsgi</span><br><span class="line"></span><br><span class="line">sio = socketio.Server(async_mode=<span class="string">&#x27;eventlet&#x27;</span>)  <span class="comment"># 指明在evenlet模式下</span></span><br><span class="line">app = socketio.WSGIApp(sio)</span><br><span class="line">eventlet.wsgi.server(eventlet.listen((<span class="string">&#x27;&#x27;</span>, <span class="number">8000</span>)), app)</span><br></pre></td></tr></table></figure><br/><h5 id="解决跨域"><a href="#解决跨域" class="headerlink" title="解决跨域"></a>解决跨域</h5><p>由于安全原因，socket.io 采用了同源策略，因此需要解决跨域的问题。</p><p>很简单，只需在创建服务的时候添加：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sio = socketio.Server(async_mode=<span class="string">&#x27;eventlet&#x27;</span>, cors_allowed_origins=<span class="string">&#x27;*&#x27;</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="消息收发"><a href="#消息收发" class="headerlink" title="消息收发"></a>消息收发</h3><h5 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h5><p>Socket.IO 协议是基于事件的。 当客户端想要与服务器通信时，它会发出一个事件。 每个事件都有一个名称和一个参数列表。 服务器使用 socketio.Server.event() 或 socketio.Server.on() 装饰器注册事件处理函数：</p><p>事件处理函数类似于 flask/django 中的视图函数，只不过不是通过 url 来调用对应的方法，而是通过事件名称来调用。</p><h6 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h6><p>监听事件用来接收消息。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@sio.event</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">sid, data</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@sio.on(<span class="params"><span class="string">&#x27;hello&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">sid, data</span>):</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure><p>被 <code>@sio.event</code> 修饰的函数的名称是事件名，<code>@sio.on</code> 修饰函数的参数是事件名称，该名称与客户端发送消息时使用的事件名称一致。</p><blockquote><p><strong>注意：</strong>‘connect’，’disconnect’，’message’ 是特殊的事件，当连接成功，连接失败，接收到消失时会自动调用，除非你想自定义它们的内部代码逻辑，否则应避免用它们作为事件名。</p></blockquote><p>事件处理函数参数介绍：</p><ul><li>sid：session_id，是客户端的身份标识。</li><li>data：客户端发送过来的数据，数据类型与客户端发送的数据类型一致。</li></ul><br/><h6 id="提交事件"><a href="#提交事件" class="headerlink" title="提交事件"></a>提交事件</h6><p>我们可以向客户端发送事件，从而将一些数据传递到客户端。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sio.emit(<span class="string">&#x27;hello&#x27;</span>, &#123;<span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;hello world&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure><p>第一个参数是事件名，第二个参数是数据载荷，他可以接受的类型有 <code>str</code>，<code>bytes</code>， <code>list</code>,，<code>dict</code> 或者 <code>tuple</code>。</p><br/><h5 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h5><p>Socket.IO 协议支持多个逻辑连接，全部复用在同一个物理连接上。 客户端可以通过在每个连接上指定不同的命名空间来打开多个连接。 命名空间由客户端作为主机名和端口之后的路径名给出。 例如，连接到 <a href="http://localhost:8000/chat">http://localhost:8000/chat</a> 将打开到命名空间 /chat 的连接。</p><p>每个命名空间都独立于其他命名空间进行处理，具有单独的会话 ID (sids)、事件处理程序和房间。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@sio.on(<span class="params"><span class="string">&#x27;hello&#x27;</span>, namespace=<span class="string">&#x27;/chat&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hello</span>(<span class="params">sid, data</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(data)</span><br><span class="line">    sio.emit(<span class="string">&#x27;hello&#x27;</span>, &#123;<span class="string">&#x27;sid&#x27;</span>: sid, <span class="string">&#x27;data&#x27;</span>: data[<span class="string">&#x27;data&#x27;</span>]&#125;, namespace=<span class="string">&#x27;/user&#x27;</span>)</span><br></pre></td></tr></table></figure><p>客户端代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;io&#125; <span class="keyword">from</span> <span class="string">&#x27;socket.io-client&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> socket = io(<span class="string">&#x27;http://localhost:8000/chat&#x27;</span>);</span><br><span class="line"><span class="comment">// 同时打开多个连接</span></span><br><span class="line"><span class="keyword">const</span> user_socket = io(<span class="string">&#x27;http://localhost:8000/user&#x27;</span>);</span><br><span class="line"></span><br><span class="line">socket.on(<span class="string">&#x27;hello&#x27;</span>, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(res.sid === socket.id) &#123;</span><br><span class="line">        <span class="built_in">this</span>.messages.push(res.data);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">socket.emit(<span class="string">&#x27;hello&#x27;</span>, &#123;<span class="attr">data</span>: <span class="built_in">this</span>.message&#125;);</span><br></pre></td></tr></table></figure><br/><h5 id="房间"><a href="#房间" class="headerlink" title="房间"></a>房间</h5><p>为了方便服务器向相关客户端组发送事件，应用程序可以将其客户端放入“房间”，然后将消息发送到这些房间。</p><p>socketio.SocketIO.emit() 方法的 room 参数用于将特定客户端指定为事件的接收者。 这是因为在连接时，会为每个客户端创建一个个人房间，并使用分配给连接的 sid 命名。 然后应用程序可以自由地创建额外的房间并使用 socketio.Server.enter_room() 和 socketio.Server.leave_room() 方法管理其中的客户端。 客户可以根据需要在多个房间中，并且可以根据需要经常在房间之间移动。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@sio.event</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">begin_chat</span>(<span class="params">sid</span>):</span></span><br><span class="line">    sio.enter_room(sid, <span class="string">&#x27;chat_users&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@sio.event</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">exit_chat</span>(<span class="params">sid</span>):</span></span><br><span class="line">    sio.leave_room(sid, <span class="string">&#x27;chat_users&#x27;</span>)</span><br></pre></td></tr></table></figure><p>如果我们想要向一个房间中的所有连接发送消息，可以这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@sio.event</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">my_message</span>(<span class="params">sid, data</span>):</span></span><br><span class="line">    sio.emit(<span class="string">&#x27;my reply&#x27;</span>, data, room=<span class="string">&#x27;chat_users&#x27;</span>, skip_sid=sid)</span><br></pre></td></tr></table></figure><p><code>skip_sid</code> 指明不向某个连接发送消息。这也是 scoket.io 的<strong>广播</strong>机制。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 返回该连接所在房间的列表</span><br><span class="line">rooms = sio.rooms(sid)</span><br><span class="line"></span><br><span class="line">// 移除该房间中的所有连接</span><br><span class="line">sio.close_room(room=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure><br/><p>更多内容请看 <a href="https://python-socketio.readthedocs.io/en/latest/index.html">python-socketio</a>。</p><br/><h3 id="flask-中使用-socketio"><a href="#flask-中使用-socketio" class="headerlink" title="flask 中使用 socketio"></a>flask 中使用 socketio</h3><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask_socketio</span><br></pre></td></tr></table></figure><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>webapp/<strong>init</strong>.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_socketio <span class="keyword">import</span> SocketIO</span><br><span class="line"></span><br><span class="line">sio = SocketIO(cors_allowed_origins=<span class="string">&#x27;*&#x27;</span>, async_mode=<span class="string">&#x27;eventlet&#x27;</span>, max_http_buffer_size=<span class="number">1e20</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createApp</span>():</span></span><br><span class="line">    ...</span><br><span class="line">    sio.init_app(app)</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>app.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> webapp <span class="keyword">import</span> createApp, sio</span><br><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = createApp()</span><br><span class="line">CORS(app, supports_credentials=<span class="literal">True</span>, max_age=<span class="string">&#x27;2592000&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sio.run(app)</span><br></pre></td></tr></table></figure><p>这里只是将 <code>app.run()</code> 改为 <code>sio.run()</code>，不影响其启动和运行。</p><p><strong>注意：</strong></p><ul><li><p>development server 启用不了 eventlet，传输协议只能是 polling 而不是 websocket。因此，在开发期间去掉 async_mode 参数，在部署时配合 gunicorn 即可使用 eventlet。</p></li><li><p>socketio 默认单个消息最大数据量为 1M，需要通过 max_http_buffer_size 参数将此限制放宽。</p></li></ul><p>详细内容请见：<a href="https://flask-socketio.readthedocs.io/en/latest/deployment.html%E3%80%82">https://flask-socketio.readthedocs.io/en/latest/deployment.html。</a></p>]]></content>
      
      
      <categories>
          
          <category> Websocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websocket-js客户端</title>
      <link href="/2022/04/05/websocket/websocket-js%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
      <url>/2022/04/05/websocket/websocket-js%E5%AE%A2%E6%88%B7%E7%AB%AF/</url>
      
        <content type="html"><![CDATA[<p>这里用到 socket.io。</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install socket.io-client</span><br></pre></td></tr></table></figure><br/><h5 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h5><p>你可以使用 http(https) 或 ws(wss) 来进行初始化。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;io&#125; <span class="keyword">from</span> <span class="string">&#x27;socket.io-client&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> socket = io(<span class="string">&#x27;http://localhost:8000&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">reconnectionDelay</span>: <span class="number">2000</span>,</span><br><span class="line">    <span class="attr">autoConnect</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><span id="more"></span><br/><h5 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h5><h6 id="监听事件"><a href="#监听事件" class="headerlink" title="监听事件"></a>监听事件</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">socket.on(<span class="string">&#x27;connect&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;连接成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">socket.on(<span class="string">&#x27;chat&#x27;</span>, <span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>socket.on</code> 第一个参数是事件名称，与服务端的事件名称相对应，第二个参数是服务端传递的数据。</p><p>‘connect’，’disconnect’，’connect_error’ 等是特殊的事件，在可以在连接发生变化时做一些处理。</p><br/><h6 id="提交事件"><a href="#提交事件" class="headerlink" title="提交事件"></a>提交事件</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">socket.emit(<span class="string">&#x27;chat&#x27;</span>, &#123;<span class="attr">data</span>: <span class="built_in">this</span>.message&#125;);</span><br><span class="line"></span><br><span class="line">socket.emit(<span class="string">&#x27;chat&#x27;</span>, &#123;<span class="attr">data</span>: <span class="built_in">this</span>.message&#125;, <span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>emit</code> 方法第一个参数是事件名称，第二个参数是要传递的数据，如果服务端对应事件的监听处理函数有返回值，那么该返回值就作为回调函数的参数。</p><br/><h5 id="命名空间"><a href="#命名空间" class="headerlink" title="命名空间"></a>命名空间</h5><p>命名空间是一种通信通道，允许你通过单个共享连接（也称为“多路复用”）拆分应用程序的逻辑。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> socket = io(<span class="string">&#x27;http://localhost:8000/user&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这里的 ‘/user’ 就是命名空间，若没有显式地规定命名空间，则默认是主命名空间。</p><p>一个连接只能有一个命名空间，但是可以创建多个连接来处理不同命名空间的事务。例如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> user_socket = io(<span class="string">&#x27;http://localhost:8000/user&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> order_socket = io(<span class="string">&#x27;http://localhost:8000/order&#x27;</span>);</span><br><span class="line"></span><br><span class="line">user_socket.on(<span class="string">&#x27;hello&#x27;</span>, <span class="function">() =&gt;</span> &#123;&#125;);</span><br><span class="line">order_socket.on(<span class="string">&#x27;hello&#x27;</span>, <span class="function">() =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><p>一旦定义命名空间后，只能与服务端具有相同命名空间的 event handlers 通信。</p><br/><p><strong>注意：</strong>socket.io 每次重新连接都会随机生成一个 session_id，那怎么让一个用户与一个连接永久绑定呢？</p><p>那我们可以自己生成一个永久唯一的房间号并在前端 localStorage 中保存，每次与服务端的连接都读取并携带此房号，后端让对话双话都加入此房间，再根据此房间号来转发消息，这样无论 socket.id 怎么变都可以一对一私聊了。</p><p>更多内容请看 <a href="https://socket.io/docs/v4/">https://socket.io/docs/v4/</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Websocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websocket通信</title>
      <link href="/2022/04/05/websocket/websocket%E9%80%9A%E4%BF%A1/"/>
      <url>/2022/04/05/websocket/websocket%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是-websocket"><a href="#什么是-websocket" class="headerlink" title="什么是 websocket"></a>什么是 websocket</h3><p>WebSocket 是一种标准协议，用于在客户端和服务端之间进行双向数据传输，它是一种基于 TCP 的独立实现。</p><p>以前客户端想知道服务端的处理进度，要不停地使用 Ajax 进行轮询，让浏览器隔个几秒就向服务器发一次请求，这对服务器压力较高。另外一种轮询就是采用 long poll 的方式，这就跟打电话差不多，没收到消息就一直不挂电话，也就是说，客户端发起连接后，如果没消息，就一直不返回 Response 给客户端，连接阶段一直是阻塞的。</p><span id="more"></span><p>而 WebSocket 解决了 HTTP 的这几个难题。首先，当服务器使用 WebSocket 后，服务端可以主动推送信息给客户端，解决了<a href="https://so.csdn.net/so/search?q=%E8%BD%AE%E8%AF%A2&spm=1001.2101.3001.7020">轮询</a>造成的同步延迟问题。由于 WebSocket 只需要一次 HTTP 握手，服务端就能一直与客户端保持通讯，直到关闭连接，这样就解决了服务器需要反复解析 HTTP 协议，减少了资源的开销。</p><p>使用 WebSocket 的时候，前端使用是比较规范的，js 支持 ws 协议。也就是说，想要连接服务器的 websocket 需要使用类似于 <code>ws://localhost:8000</code> 的 uri。</p><br/><h3 id="基于-websocket-通信的库"><a href="#基于-websocket-通信的库" class="headerlink" title="基于 websocket 通信的库"></a>基于 websocket 通信的库</h3><p>基于 webSocket 通信的库主要有 <a href="https://github.com/socketio/socket.io">socket.io</a>，<a href="https://github.com/sockjs/sockjs-client">SockJS</a>，它们对 websocket 进行了封装。它们建立在 WebSocket 协议之上，并提供额外的保证，例如如果连接不到 websocket 会回退到 HTTP 长轮询或自动重新连接。</p><p>Socket.io/SockJS 并不是一个基本的、独立的、能够回退到其它实时协议的 WebSocket 库，它实际上是一个依赖于其它实时传输协议的自定义实时传输协议的实现。该协议的协商部分使得支持标准 WebSocket 的客户端不能直接连接到 Socket.io/SockJS 服务器，并且支持 Socket.io/SockJS 的客户端也不能与非 Socket.io/SockJS 框架的 WebSocket 服务器通信。因而，<strong>Socket.io/SockJS 要求客户端与服务器端均须使用该框架</strong>。</p><br/><h3 id="StompJS"><a href="#StompJS" class="headerlink" title="StompJS"></a>StompJS</h3><p>STOMP(Simple Text-Orientated Messaging Protocol) 面向消息的简单文本协议，它提供了一个可互操作的连接格式，允许 STOMP 客户端与任意 STOMP 消息代理（Broker）进行交互。STOMP 协议由于设计简单，易于开发客户端，因此在多种语言和多种平台上得到广泛地应用。</p><p>与 HTTP 不同，WebSocket 是处在 TCP 上非常薄的一层，会将字节流转化为文本/二进制消息，因此，对于实际应用来说，WebSocket 的通信形式层级过低，因此可以在 WebSocket 之上使用 STOMP 协议，来为浏览器 和 server 间的通信增加适当的消息语义。</p><br/><h5 id="StompJS-与-WebSocket-的关系"><a href="#StompJS-与-WebSocket-的关系" class="headerlink" title="StompJS 与 WebSocket 的关系"></a>StompJS 与 WebSocket 的关系</h5><p>HTTP 协议解决了web 浏览器发起请求以及 web 服务器响应请求的细节，假设HTTP 协议不存在，只能使用 TCP 套接字来编写 web 应用，你可能认为这是一件疯狂的事情。</p><p>直接使用 WebSocket(SockJS) 就很类似于使用 TCP 套接字来编写 web 应用，因为没有高层协议，就需要我们定义应用间发送消息的语义，还需要确保连接的两端都能遵循这些语义。</p><p>同 HTTP 在 TCP 套接字上添加请求-响应模型层一样，STOMP 在 WebSocket 之上提供了一个基于帧的线路格式层，用来定义消息语义。</p><br/><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>简而言之，WebSocket 是底层协议，Socket.io/SockJS 是 WebSocket 的备选方案，也是底层协议，而 STOMP 是基于 WebSocket（SockJS）的上层协议。</p>]]></content>
      
      
      <categories>
          
          <category> Websocket </category>
          
      </categories>
      
      
        <tags>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-jwt</title>
      <link href="/2022/03/27/Flask/python-jwt/"/>
      <url>/2022/03/27/Flask/python-jwt/</url>
      
        <content type="html"><![CDATA[<h3 id="JWT-介绍"><a href="#JWT-介绍" class="headerlink" title="JWT 介绍"></a>JWT 介绍</h3><p>JWT 即 JSON Web Token，是为了在网络应用环境间传递声明而执行的一种基于 JSON 的开放标准。</p><p>JWT 由三部分构成：</p><p>1  头部（Header）：用于描述关于该 JWT 的最基本的信息，例如其类型以及签名所用的算法等。</p><p>2  载荷（Payload）：payload 有五个字段</p><ol><li>iss：该 JWT 的签发者</li><li>sub：该 JWT 所面向的用户</li><li>aud：接收该 JWT 的一方</li><li>exp：过期时间</li><li>iat：签发时间</li></ol><p>3  签名（Signature）：header 与 payload 通过 header 中声明的加密方式，使用密钥 secret 进行加密，生成签名（也就是 token 值）。</p><span id="more"></span><hr><h3 id="为什么使用-JWT"><a href="#为什么使用-JWT" class="headerlink" title="为什么使用 JWT"></a>为什么使用 JWT</h3><p>之前用户身份认证广泛使用的是 session 机制，但是 session 机制存在以下问题：</p><ol><li>随着客户端用户的增加，服务器的开销会明显增大</li><li>它是基于 cookie 来进行用户识别的, cookie 如果被截获，用户就会很容易受到跨站请求伪造的攻击。</li></ol><p>比较而言，JWT 有着更大的优势。</p><hr><h3 id="代码讲解"><a href="#代码讲解" class="headerlink" title="代码讲解"></a>代码讲解</h3><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyjwt</span><br></pre></td></tr></table></figure><h5 id="生成-token"><a href="#生成-token" class="headerlink" title="生成 token"></a>生成 token</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta, timezone</span><br><span class="line"></span><br><span class="line">payload = &#123;</span><br><span class="line">    <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;silence&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;exp&#x27;</span>: datetime.now(tz=timezone.utc) + timedelta(hours=<span class="number">1</span>),</span><br><span class="line">&#125;</span><br><span class="line">key = <span class="string">&quot;123&quot;</span></span><br><span class="line">algorithm = <span class="string">&quot;HS256&quot;</span></span><br><span class="line"></span><br><span class="line">token = jwt.encode(payload=payload, key=key, algorithm=algorithm)</span><br></pre></td></tr></table></figure><p>参数解释：</p><ul><li>payload：数据载荷。exp 过期时间，是规定字段，它可以是 UTC 时间戳，也可以是 datetime 类型</li><li>key：加密密钥</li><li>algorithm：加密方式，默认为 HS256</li></ul><br/><h5 id="验证-token"><a href="#验证-token" class="headerlink" title="验证 token"></a>验证 token</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    data = jwt.decode(token, key=key, algorithms=algorithms)</span><br><span class="line"><span class="keyword">except</span> jwt.ExpiredSignatureError:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>如果生成 token 的时候添加了字段 exp，那么在 decode 的时候会自动验证是否过期，如果过期，则抛出 ExpiredSignatureError 错误。</p><br/><h5 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime, timedelta, timezone</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> current_app</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JWT</span>():</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, exp_hours</span>):</span></span><br><span class="line">        self.hours = exp_hours</span><br><span class="line">        self.key = current_app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>]</span><br><span class="line">        self.algorithm = <span class="string">&#x27;HS256&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">generate_token</span>(<span class="params">self, user_id</span>):</span></span><br><span class="line">        dic = &#123;</span><br><span class="line">            <span class="string">&#x27;exp&#x27;</span>: datetime.now(tz=timezone.utc) + timedelta(hours=self.hours),</span><br><span class="line">            <span class="string">&#x27;data&#x27;</span>: user_id</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        token = jwt.encode(dic, key=self.key, algorithm=self.algorithm)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> token</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">verify_token</span>(<span class="params">self, token</span>):</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = jwt.decode(token, key=self.key, algorithms=self.algorithm)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>页面刷新 vuex 中数据丢失</title>
      <link href="/2022/03/27/Vue/%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0vuex%E4%B8%AD%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1/"/>
      <url>/2022/03/27/Vue/%E9%A1%B5%E9%9D%A2%E5%88%B7%E6%96%B0vuex%E4%B8%AD%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1/</url>
      
        <content type="html"><![CDATA[<p>当我们刷新页面时，vue 实例会被重新加载， vuex 仓库里的数据也会被初始化，这会导致数据的丢失。</p><h5 id="解决方法："><a href="#解决方法：" class="headerlink" title="解决方法："></a>解决方法：</h5><p>我们可以在页面将要刷新之前将 state 中的数据保存到 sessionStorage 中，待页面刷新之后再将数据取出，重新赋值给 state，然后清空 sessionStorage。</p><p>在根组件 App.vue 中添加如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = useStore();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> data = sessionStorage.getItem(<span class="string">&quot;store&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (data) &#123;</span><br><span class="line">        store.replaceState(</span><br><span class="line">            <span class="built_in">Object</span>.assign(</span><br><span class="line">                store.state,</span><br><span class="line">                <span class="built_in">JSON</span>.parse(data)</span><br><span class="line">            )</span><br><span class="line">        );</span><br><span class="line">        sessionStorage.removeItem(<span class="string">&quot;store&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;beforeunload&quot;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        sessionStorage.setItem(<span class="string">&quot;store&quot;</span>, <span class="built_in">JSON</span>.stringify(store.state));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Object.assign(target, sources)</span><br></pre></td></tr></table></figure><p>方法可以将 sources 对象中的属性和值分配到 target 对象中。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js数组扁平化</title>
      <link href="/2022/03/23/JS/js%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/"/>
      <url>/2022/03/23/JS/js%E6%95%B0%E7%BB%84%E6%89%81%E5%B9%B3%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<p>数组的成员有时还是数组，<code>Array.prototype.flat()</code> 用于将嵌套的数组“拉平”，变成一维数组。该方法返回一个新数组，对原数据没有影响。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, <span class="number">4</span>]].flat()</span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>上面代码中，原数组的成员里面有一个数组，flat() 方法将子数组的成员取出来，添加在原来的位置。</p><p>flat() 默认只会“拉平”一层，如果想要“拉平”多层的嵌套数组，可以将 flat() 方法的参数写成一个整数，表示想要拉平的层数，默认为1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].flat()</span><br><span class="line"><span class="comment">// [1, 2, 3, [4, 5]]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, <span class="number">5</span>]]].flat(<span class="number">2</span>)</span><br><span class="line"><span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p>上面代码中，flat() 的参数为2，表示要拉平两层的嵌套数组。</p><span id="more"></span><p>如果不管有多少层嵌套，都要转成一维数组，可以用 Infinity 关键字作为参数。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>]]].flat(<span class="literal">Infinity</span>)</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>如果原数组有空位，flat()方法会跳过空位。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, , <span class="number">4</span>, <span class="number">5</span>].flat()</span><br><span class="line"><span class="comment">// [1, 2, 4, 5]</span></span><br></pre></td></tr></table></figure><p><code>flatMap()</code> 方法对原数组的每个成员执行一个函数，相当于执行Array.prototype.map()，然后对返回值组成的数组执行 flat() 方法。该方法返回一个新数组，不改变原数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 相当于 [[2, 4], [3, 6], [4, 8]].flat()</span></span><br><span class="line">[<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>].flatMap(<span class="function">(<span class="params">x</span>) =&gt;</span> [x, x * <span class="number">2</span>])</span><br><span class="line"><span class="comment">// [2, 4, 3, 6, 4, 8]</span></span><br></pre></td></tr></table></figure><p>flatMap() 只能展开一层数组。</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js选取文件夹并上传</title>
      <link href="/2022/03/23/JS/js%E9%80%89%E5%8F%96%E6%96%87%E4%BB%B6%E5%A4%B9%E5%B9%B6%E4%B8%8A%E4%BC%A0/"/>
      <url>/2022/03/23/JS/js%E9%80%89%E5%8F%96%E6%96%87%E4%BB%B6%E5%A4%B9%E5%B9%B6%E4%B8%8A%E4%BC%A0/</url>
      
        <content type="html"><![CDATA[<h3 id="点击选取文件夹"><a href="#点击选取文件夹" class="headerlink" title="点击选取文件夹"></a>点击选取文件夹</h3><p>我们知道，选取文件可以通过以下方式：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>其实，想要选取文件夹只需要加上 webkitdirectory 属性：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">&quot;inputFile&quot;</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span> <span class="attr">webkitdirectory</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>现在可以选中文件夹了，那么怎么获取文件夹里的文件呢？方法和获取文件一样，只不过变成了包含多个文件的列表。代码如下：</p><span id="more"></span><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&quot;inputFile&quot;</span>);</span><br><span class="line">    input.onchange = <span class="function"><span class="params">event</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> fileList = event.currentTarget.files;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> file <span class="keyword">of</span> fileList) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(file.name, file.webkitRelativePath, file.size);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="拖拽文件夹（文件）"><a href="#拖拽文件夹（文件）" class="headerlink" title="拖拽文件夹（文件）"></a>拖拽文件夹（文件）</h3><h5 id="思路介绍"><a href="#思路介绍" class="headerlink" title="思路介绍"></a>思路介绍</h5><p>拖拽上传文件夹主要通过 drop 事件实现。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box.addEventListener(<span class="string">&quot;drop&quot;</span>, <span class="function"><span class="params">event</span> =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><p>这里我们主要用到 <code>event.dataTransfer.items</code> 属性，它是一个 DataTransferItemList 对象，若选中 n 个文件夹或文件，则它的 lenght 为 n。</p><p>DataTransferItemList 对象有一个 <code>webkitGetAsEntry()</code> 方法，该方法返回一个 FileSystemEntry 对象（包括 FileEntry 和 DirectoryEntry）。</p><p>每个 FileSystemEntry 对象都有 <code>isFile</code> 和 <code>isDirectory</code> 两个属性，便于判断是文件还是文件夹。它还有 <code>fullPath</code> 属性表示从选取的文件夹开始的路径。</p><p>如果是文件夹（DirectoryEntry），它有一个 <code>createReader()</code> 方法，可以创建一个 reader，reader 通过 <code>readEntries()</code> 方法获取文件夹中的内容，如下所示：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// readEntries(successCallBack, errorCallback)</span></span><br><span class="line">reader.readEntries(<span class="function"><span class="params">results</span> =&gt;</span> &#123;&#125;);</span><br></pre></td></tr></table></figure><p>得到一个 FileSystemEntry 类型的数组（results）。</p><p><strong>注意：</strong> 该方法是异步执行的。而且，在文件夹中的文件<br>数目小于 100 时，可以读取到文件夹中的每个文件，但当文件数量大于 100 时，它最多只能读取到 100 个文件。因此，建议用递归获取完整的 results。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fileEntryList = [];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> getFileEntries = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    dirReader.readEntries(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (results.length) &#123;</span><br><span class="line">            fileEntryList = fileEntryList.concat(results);</span><br><span class="line">            getFileEntries();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getFileEntries();</span><br></pre></td></tr></table></figure><p>如果是文件（FileEntry）,它有 <code>file</code> 方法，可以获取文件的信息。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fileEntry.file(fileData =-&gt; &#123;&#125;);</span><br></pre></td></tr></table></figure><p>fileData 中包含属的属性有：</p><ol><li>name：文件名</li><li>size：文件大小</li></ol><p><strong>注意：</strong>该方法也是异步执行的。</p><br/><h5 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h5><p>html：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span>拖拽上传(可选多个文件夹)<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">&quot;list&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br></pre></td></tr></table></figure><p>js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&quot;box&quot;</span>);</span><br><span class="line"></span><br><span class="line">box.addEventListener(<span class="string">&quot;dragover&quot;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 阻止浏览器的默认行为</span></span><br><span class="line">    e.preventDefault();</span><br><span class="line">    <span class="comment">// 阻止事件捕获/冒泡</span></span><br><span class="line">    e.stopPropagation();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">box.addEventListener(<span class="string">&quot;drop&quot;</span>, <span class="function"><span class="params">e</span> =&gt;</span> &#123;</span><br><span class="line">    e.preventDefault();</span><br><span class="line">    e.stopPropagation();</span><br><span class="line"></span><br><span class="line">    dropedFileReader(e).then(<span class="function"><span class="params">fileList</span> =&gt;</span> &#123;</span><br><span class="line">        fileList.forEach(<span class="function"><span class="params">file</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> dom_ul = <span class="built_in">document</span>.getElementById(<span class="string">&quot;list&quot;</span>);</span><br><span class="line">            <span class="keyword">const</span> dom_li = <span class="built_in">document</span>.createElement(<span class="string">&quot;li&quot;</span>);</span><br><span class="line">            dom_li.innerHTML = <span class="string">`name: <span class="subst">$&#123;file.name&#125;</span>,path: <span class="subst">$&#123;file.fullPath&#125;</span>,size: <span class="subst">$&#123;file.size&#125;</span>`</span>;</span><br><span class="line">            dom_ul.appendChild(dom_li);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">readRoll</span>(<span class="params">fileEntryList</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> idx <span class="keyword">in</span> fileEntryList) &#123;</span><br><span class="line">        <span class="keyword">const</span> fileEntry = fileEntryList[idx];</span><br><span class="line">        <span class="keyword">if</span> (fileEntry.isDirectory) &#123;</span><br><span class="line">            <span class="comment">// FileEntryList</span></span><br><span class="line">            <span class="keyword">let</span> result = <span class="keyword">await</span> readDirectory(fileEntry);</span><br><span class="line">            fileEntryList[idx] = result;</span><br><span class="line">            <span class="keyword">await</span> readRoll(result);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readDirectory</span>(<span class="params">fileEntry</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> dirReader = fileEntry.createReader();</span><br><span class="line">        <span class="keyword">let</span> fileEntryList = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> getFileEntries = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// readEntries 异步函数</span></span><br><span class="line">            dirReader.readEntries(<span class="function"><span class="params">results</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (results.length) &#123;</span><br><span class="line">                    fileEntryList = fileEntryList.concat(results);</span><br><span class="line">                    getFileEntries();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    resolve(fileEntryList);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        getFileEntries();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">readFileEntry</span>(<span class="params">fileEntry</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> fileData;</span><br><span class="line">        <span class="comment">// 异步函数</span></span><br><span class="line">        fileEntry.file(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">            fileData = data;</span><br><span class="line">            fileData.fullPath = fileEntry.fullPath;</span><br><span class="line">            resolve(fileData);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">dropedFileReader</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> fileEntryList = [];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> dataTransferItemList = event.dataTransfer.items;  <span class="comment">// DataTransferItemList</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> dataTransferItemList) &#123;</span><br><span class="line">        fileEntryList.push(item.webkitGetAsEntry());  <span class="comment">// FileEntry</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">await</span> readRoll(fileEntryList);</span><br><span class="line"></span><br><span class="line">    fileEntryList = fileEntryList.flat(<span class="literal">Infinity</span>); <span class="comment">// 将子数组拼接到原数组中</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> fileList = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> fileEntry <span class="keyword">of</span> fileEntryList) &#123;</span><br><span class="line">        <span class="keyword">const</span> fileData = <span class="keyword">await</span> readFileEntry(fileEntry);</span><br><span class="line">        fileList.push(fileData);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> fileList;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3 使用 vuex</title>
      <link href="/2022/03/12/Vue3/Vue3-%E4%BD%BF%E7%94%A8-vuex/"/>
      <url>/2022/03/12/Vue3/Vue3-%E4%BD%BF%E7%94%A8-vuex/</url>
      
        <content type="html"><![CDATA[<h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p>在 store 文件夹下新建 user.js 和 cart.js 作为子模块：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">static</span> = <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">const</span> getters = &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> mutations = &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> actions = &#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  <span class="attr">namespaced</span>: <span class="literal">true</span>,</span><br><span class="line">  state,</span><br><span class="line">  getters,</span><br><span class="line">  mutations,</span><br><span class="line">  actions</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><span id="more"></span><p>然后在 index.js 中引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span></span><br><span class="line"><span class="keyword">import</span> user <span class="keyword">from</span> <span class="string">&#x27;./modules/user&#x27;</span></span><br><span class="line"><span class="keyword">import</span> cart <span class="keyword">from</span> <span class="string">&quot;./modules/cart&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> createStore(&#123;</span><br><span class="line">    <span class="attr">modules</span>: &#123;</span><br><span class="line">        user,</span><br><span class="line">        cart</span><br><span class="line">  &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h3 id="在组件中使用"><a href="#在组件中使用" class="headerlink" title="在组件中使用"></a>在组件中使用</h3><h5 id="state"><a href="#state" class="headerlink" title="state"></a>state</h5><p>state 保存着全局的状态，这些状态是具有响应性的，应放在 computed 属性中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useStore, mapState&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = useStore();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不使用辅助函数</span></span><br><span class="line">    <span class="keyword">const</span> username = computed(<span class="function">() =&gt;</span> store.state.user.username);</span><br><span class="line">    <span class="keyword">const</span> age = computed(<span class="function">() =&gt;</span> store.state.user.age);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用辅助函数</span></span><br><span class="line">    <span class="keyword">const</span> stateFns = mapState(<span class="string">&#x27;user&#x27;</span>, [<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;age&#x27;</span>]);</span><br><span class="line">    <span class="keyword">const</span> State = &#123;&#125;;</span><br><span class="line">    <span class="built_in">Object</span>.keys(stateFns).forEach(<span class="function"><span class="params">fn_key</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> fn = stateFns[fn_key].bind(&#123;<span class="attr">$store</span>:store&#125;);</span><br><span class="line">        State[fn_key] = computed(fn);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        username,</span><br><span class="line">        age,</span><br><span class="line">        ...State</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用 <code>bind(&#123;$store:store&#125;)</code> 是因为我们需要将通过 useStore 初始化的 store 与全局 $store 绑定，才可以访问到仓库中的内容。</p><br/><h5 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h5><p>getters 的作用是对 state 中的数据进行一系列的计算，然后将结果返回。</p><p>getters 中的属性也应放在 computed 中。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useStore, mapGetters&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;computed&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = useStore();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不使用辅助函数</span></span><br><span class="line">    <span class="keyword">const</span> username = computed(<span class="function">() =&gt;</span> store.getters[<span class="string">&#x27;user/getUsername&#x27;</span>]);</span><br><span class="line">    <span class="keyword">const</span> age = computed(<span class="function">() =&gt;</span> store.getters[<span class="string">&#x27;user/getAge&#x27;</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用辅助函数</span></span><br><span class="line">    <span class="keyword">const</span> getterFns = mapGetters(<span class="string">&#x27;user&#x27;</span>, [<span class="string">&#x27;getUsername&#x27;</span>, <span class="string">&#x27;getAge&#x27;</span>]);</span><br><span class="line">    <span class="keyword">const</span> Getter = &#123;&#125;;</span><br><span class="line">    <span class="built_in">Object</span>.keys(getterFns).forEach(<span class="function"><span class="params">fn_key</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> fn = getterFns[fn_key].bind(&#123;<span class="attr">$store</span>:store&#125;);</span><br><span class="line">        Getter[fn_key] = computed(fn);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        username,</span><br><span class="line">        age,</span><br><span class="line">        ...Getter</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h5 id="mutations"><a href="#mutations" class="headerlink" title="mutations"></a>mutations</h5><p>mutations 的作用是更改 state 的属性值，但是它必须是 同步的。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useStore, mapMutations&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = useStore();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不使用辅助函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        store.commit(<span class="string">&#x27;user/changeName&#x27;</span>, <span class="string">&#x27;Bob&#x27;</span>);</span><br><span class="line">        store.commit(<span class="string">&#x27;user/changeAge&#x27;</span>, <span class="number">22</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用辅助函数</span></span><br><span class="line">    <span class="keyword">const</span> mutationFns = mapMutations([<span class="string">&#x27;changeAge&#x27;</span>, <span class="string">&quot;changeName&quot;</span>]);</span><br><span class="line">    <span class="keyword">const</span> Mutation = &#123;&#125;;</span><br><span class="line">    <span class="built_in">Object</span>.keys(mutationFns).forEach(<span class="function"><span class="params">fn_key</span> =&gt;</span> &#123;</span><br><span class="line">      Mutation[fn_key] = mutationFns[fn_key].bind(&#123;<span class="attr">$store</span>:store&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> &#123;changeName, changeAge&#125; = Mutation;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        changeName(<span class="string">&#x27;Bob&#x27;</span>);</span><br><span class="line">        changeAge(<span class="number">23</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        changeState</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h5 id="actions"><a href="#actions" class="headerlink" title="actions"></a>actions</h5><p>可以在 actions 中提交 mutations，actions 支持异步。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;useStore, mapActions&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> store = useStore();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 不使用辅助函数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        store.dispatch(<span class="string">&#x27;user/changeNameAsync&#x27;</span>, <span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">        store.dispatch(<span class="string">&#x27;user/changeAgeAsync&#x27;</span>, <span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 使用辅助函数</span></span><br><span class="line">    <span class="keyword">const</span> actionFns = mapActions(<span class="string">&#x27;user&#x27;</span>, [<span class="string">&#x27;changeNameAsync&#x27;</span>, <span class="string">&#x27;changeAgeAsync&#x27;</span>]);</span><br><span class="line">    <span class="keyword">const</span> Actions = &#123;&#125;</span><br><span class="line">    <span class="built_in">Object</span>.keys(actionFns).forEach(<span class="function"><span class="params">fn_key</span> =&gt;</span> &#123;</span><br><span class="line">      Actions[fn_key] = actionFns[fn_key].bind(&#123;<span class="attr">$store</span>:store&#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> &#123;changeNameAsync, changeAgeAsync&#125; = Actions;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">changeState</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        changeNameAsync(<span class="string">&#x27;xxx&#x27;</span>);</span><br><span class="line">        changeAgeAsync(<span class="number">23</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="为什么-state-必须放在计算属性中？"><a href="#为什么-state-必须放在计算属性中？" class="headerlink" title="为什么 state 必须放在计算属性中？"></a>为什么 state 必须放在计算属性中？</h3><p>如果我们将 state 中的属性放在 data 中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="built_in">this</span>.$store.state.username</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于 data 只在 created 之前初始化一次，那么当通过提交 mutations 的方式修改 state 中的数据后，data 不会再次执行 <code>this.$store.state.username</code>，因此 username 的值也不会改变。</p><p>那为什么放在 computed 中就可以响应呢？因为 computed 属性通过依赖计算求值。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">    <span class="function"><span class="title">name</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.$store.state.username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说，name 依赖于 this.$store.state.username，那么当 state 中的 username 发生改变后，computed 会重新获取它的值。</p>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> vuex </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python定时任务</title>
      <link href="/2022/02/27/Flask/python%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>/2022/02/27/Flask/python%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p>在项目中，我们可能会遇到定时任务，比如要每隔一段时间执行一次任务，并且还需要在不打断循环的基础上修改任务。这时，我们可以使用 APScheduler 框架。</p><h3 id="APScheduler-的使用"><a href="#APScheduler-的使用" class="headerlink" title="APScheduler 的使用"></a>APScheduler 的使用</h3><p>APScheduler 是一个轻量级的 Python 定时任务调度框架。APScheduler 支持三种调度任务：<strong>固定时间间隔，固定时间点（日期），Linux 下的 Crontab 命令</strong>。同时，它还支持异步执行、后台执行调度任务。</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install APScheduler</span><br></pre></td></tr></table></figure><span id="more"></span><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>可以概括为一下三个步骤：</p><ol><li>新建一个调度器（schedulers）</li><li>添加一个调度任务</li><li>运行调度任务</li></ol><p>接下来我们看一个示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> apscheduler.schedulers.background <span class="keyword">import</span> BackgroundScheduler</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 创建一个调度器</span></span><br><span class="line">    scheduler = BackgroundScheduler()</span><br><span class="line">    <span class="comment"># 添加调度任务</span></span><br><span class="line">    scheduler.add_job(<span class="built_in">id</span>=<span class="string">&#x27;1&#x27;</span>, func=count, trigger=<span class="string">&#x27;interval&#x27;</span>, seconds=<span class="number">5</span>, args=(<span class="number">3</span>,))</span><br><span class="line">    <span class="comment"># 开始调度</span></span><br><span class="line">    scheduler.start()</span><br></pre></td></tr></table></figure><p>add_job 函数参数解释：</p><ul><li>id：任务的 id，用于区分不同的任务</li><li>func：任务函数，可直接传入回调函数，或者以 package.module:some.object（函数所在路径） 的形式传入</li><li>trigger：触发器，’interval’ ，’date’， ‘cron’ 三种可选</li><li>seconds：当触发器为 interval 时传入，表示时间间隔</li><li>args：任务函数的参数</li></ul><hr><p>对定时任务有了初步了解后，我们来介绍一下 APScheduler 的几个核心组件。</p><h5 id="调度器"><a href="#调度器" class="headerlink" title="调度器"></a>调度器</h5><p>APScheduler 提供了七种调度器：</p><ul><li>BlockingScheduler : 调度器在当前进程的主线程中运行，也就是会阻塞当前线程。</li><li>BackgroundScheduler : 调度器在后台线程中运行，不会阻塞当前线程（常用）。</li><li>AsyncIOScheduler : 结合 asyncio 模块（一个异步框架）一起使用。</li><li>GeventScheduler : 程序中使用 gevent（高性能的Python并发框架）作为IO模型，和 GeventExecutor 配合使用。</li><li>TornadoScheduler : 程序中使用 Tornado（一个web框架）的IO模型，用 ioloop.add_timeout 完成定时唤醒。</li><li>TwistedScheduler : 配合 TwistedExecutor，用 reactor.callLater 完成定时唤醒。</li><li>QtScheduler : 你的应用是一个 Qt 应用，需使用QTimer完成定时唤醒。</li></ul><hr><h5 id="触发器"><a href="#触发器" class="headerlink" title="触发器"></a>触发器</h5><h6 id="1-date"><a href="#1-date" class="headerlink" title="1. date"></a>1. date</h6><p>作业任务只会执行一次，它表示特定的时间点触发。当触发器类型为 date 时 add_job 的参数如下：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>run_date (datetime 或 str)</td><td>作业的运行日期或时间</td></tr><tr><td>timezone (datetime.tzinfo 或 str)</td><td>指定时区</td></tr></tbody></table><p>示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> date, datetime</span><br><span class="line"></span><br><span class="line">scheduler.add_job(<span class="built_in">id</span>=<span class="string">&#x27;1&#x27;</span>, func=count, trigger=<span class="string">&#x27;date&#x27;</span>, run_date=date(<span class="number">2022</span>, <span class="number">1</span>, <span class="number">1</span>), args=(<span class="number">3</span>,))</span><br><span class="line"></span><br><span class="line">scheduler.add_job(<span class="built_in">id</span>=<span class="string">&#x27;1&#x27;</span>, func=count, trigger=<span class="string">&#x27;date&#x27;</span>, run_date=datetime(<span class="number">2022</span>, <span class="number">1</span>, <span class="number">1</span>, <span class="number">14</span>, <span class="number">30</span>, <span class="number">20</span>), args=(<span class="number">3</span>,))</span><br><span class="line"></span><br><span class="line">scheduler.add_job(<span class="built_in">id</span>=<span class="string">&#x27;1&#x27;</span>, func=count, trigger=<span class="string">&#x27;date&#x27;</span>, run_date=<span class="string">&#x27;2022-1-1 14:30:20&#x27;</span>, args=(<span class="number">3</span>,))</span><br></pre></td></tr></table></figure><br/><h6 id="2-interval"><a href="#2-interval" class="headerlink" title="2. interval"></a>2. interval</h6><p>固定时间间隔触发，循环执行。当触发器类型为 date 时 add_job 的参数如下：</p><table><thead><tr><th>参数</th><th>说明</th></tr></thead><tbody><tr><td>weeks (int)</td><td>间隔几周</td></tr><tr><td>days (int)</td><td>间隔几天</td></tr><tr><td>hours (int)</td><td>间隔几小时</td></tr><tr><td>minutes (int)</td><td>间隔几分钟</td></tr><tr><td>seconds (int)</td><td>间隔几秒</td></tr><tr><td>start_date (datetime 或 str)</td><td>开始日期</td></tr><tr><td>end_date (datetime 或 str)</td><td>结束日期</td></tr><tr><td>timezone (datetime.tzinfo 或str)</td><td>时区</td></tr></tbody></table><hr><h5 id="作业存储"><a href="#作业存储" class="headerlink" title="作业存储"></a>作业存储</h5><h6 id="添加-job"><a href="#添加-job" class="headerlink" title="添加 job"></a>添加 job</h6><p>有两种添加任务的方法，第一种就是上面用到的 <code>add_job</code> 函数，另一种是通过修饰器 <code>scheduled_job()</code> 来添加任务。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@scheduler.scheduled_job(<span class="params"><span class="built_in">id</span>=<span class="string">&#x27;1&#x27;</span>, trigger=<span class="string">&#x27;interval&#x27;</span>, seconds=<span class="number">5</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">count</span>(<span class="params">n</span>):</span></span><br><span class="line">    <span class="built_in">print</span>(n)</span><br></pre></td></tr></table></figure><p><strong>不同的是：</strong>第一种方法返回一个 <code>apscheduler.job.Job</code> 实例，可以用来改变或者移除 job。第二种方法只适用于应用运行期间不会改变的 job。</p><br/><h6 id="移除-job"><a href="#移除-job" class="headerlink" title="移除 job"></a>移除 job</h6><p>移除 job 也有两种方法：<code>remove_job()</code> 和 <code>job.remove()</code>。<br><code>remove_job()</code> 是根据 job 的 id 来移除，所以要在 job 创建的时候指定一个 id。<br><code>job.remove()</code> 则是对 job 执行 remove 方法即可。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scheduler.remove_job(<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">job = scheduler.add_job()</span><br><span class="line">job.remove()</span><br></pre></td></tr></table></figure><br/><h6 id="修改-job"><a href="#修改-job" class="headerlink" title="修改 job"></a>修改 job</h6><p>可以在调度开始之后修改 job。可以使用 <code>Job.modify()</code> 或者 <code>modify_job()</code> 方法来修改 job 的属性。但是值得注意的是，job 的 id 是无法被修改的。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">scheduler = BackgroundScheduler()</span><br><span class="line"></span><br><span class="line">scheduler.add_job(<span class="built_in">id</span>=<span class="string">&#x27;1&#x27;</span>, func=count, trigger=<span class="string">&#x27;interval&#x27;</span>, seconds=<span class="number">5</span>, args=(<span class="number">3</span>,))</span><br><span class="line"></span><br><span class="line">scheduler.modify_job(<span class="string">&#x27;1&#x27;</span>, trigger=<span class="string">&#x27;interval&#x27;</span>, seconds=<span class="number">10</span>, args=(<span class="number">3</span>, <span class="number">5</span>))</span><br></pre></td></tr></table></figure><br/><h6 id="关闭-job"><a href="#关闭-job" class="headerlink" title="关闭 job"></a>关闭 job</h6><p>默认情况下调度器会等待所有正在运行的作业完成后，关闭所有的调度器和作业存储。如果你不想等待，可以将 wait 选项设置为 False。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scheduler.shutdown(wait=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="flask-中使用定时任务"><a href="#flask-中使用定时任务" class="headerlink" title="flask 中使用定时任务"></a>flask 中使用定时任务</h3><p>flask-apscheduler 是 flask 框架的一个扩展，它对 apscheduler 进行了进一步封装。</p><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-apscheduler</span><br></pre></td></tr></table></figure><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>在配置文件中添加如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JOBS = [    &#123;        <span class="string">&#x27;id&#x27;</span>: <span class="string">&#x27;1&#x27;</span>,  <span class="comment"># 一个标识        &#x27;func&#x27;: &#x27;app:tasks.task.count&#x27;,  # 指定运行的函数        &#x27;args&#x27;: (3,),  # 传入函数的参数        &#x27;trigger&#x27;: &#x27;interval&#x27;,  # 指定 定时任务的类型        &#x27;seconds&#x27;: 3  # 运行的间隔时间    &#125;]SCHEDULER_API_ENABLED = True</span></span><br></pre></td></tr></table></figure><p>然后在工厂函数中进行初始化：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_apscheduler <span class="keyword">import</span> APSchedulerfrom apscheduler.schedulers.background <span class="keyword">import</span> BackgroundScheduler<span class="comment"># 指明时区，避免在部署时因时区不统一报错scheduler = APScheduler(BackgroundScheduler(timezone=&quot;Asia/Shanghai&quot;))def create_app():    ...    scheduler.init_app(app)    scheduler.start()    ...</span></span><br></pre></td></tr></table></figure><p>scheduler 是一个调度器，其用法与 apscheduler 一样。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js实现点击复制</title>
      <link href="/2022/01/30/JS/js%E5%AE%9E%E7%8E%B0%E7%82%B9%E5%87%BB%E5%A4%8D%E5%88%B6/"/>
      <url>/2022/01/30/JS/js%E5%AE%9E%E7%8E%B0%E7%82%B9%E5%87%BB%E5%A4%8D%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p>js 实现复制的主要命令是 <code>document.execCommand(&#39;copy&#39;)</code>，只有在输入框中的内容被选择时执行此命令才有效。</p><p>但是一般情况下，我们想要复制的内容并不是输入框中的文字，这时我们把只要临时创建一个 input 元素，将想要复制的内容赋值给 input 的 value 属性，并让它 select，等执行完复制命令后再将其删除就可以了。</p><p>代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;copy&quot;</span>&gt;</span>点击复制<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">ref</span>=<span class="string">&quot;p&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="title">copy</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> val = <span class="built_in">this</span>.$refs.p.innerText;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> input = <span class="built_in">document</span>.createElement(<span class="string">&#x27;input&#x27;</span>);</span></span><br><span class="line"><span class="javascript">    input.value = val;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.body.appendChild(input);</span></span><br><span class="line"><span class="javascript">    input.select();</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span>(<span class="built_in">document</span>.execCommand(<span class="string">&#x27;copy&#x27;</span>)) &#123;</span></span><br><span class="line"><span class="javascript">        input.remove();</span></span><br><span class="line"><span class="javascript">        <span class="built_in">this</span>.$message(&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">message</span>: <span class="string">&#x27;复制成功&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue插件</title>
      <link href="/2022/01/30/Vue/Vue%E6%8F%92%E4%BB%B6/"/>
      <url>/2022/01/30/Vue/Vue%E6%8F%92%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="图片预览"><a href="#图片预览" class="headerlink" title="图片预览"></a>图片预览</h3><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install v-viewer</span><br></pre></td></tr></table></figure><h5 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h5><p>main.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Viewer <span class="keyword">from</span> <span class="string">&quot;v-viewer&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;viewerjs/dist/viewer.css&#x27;</span>;</span><br><span class="line"></span><br><span class="line">Vue.use(Viewer)</span><br></pre></td></tr></table></figure><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><p>使用时只需在父标签中加上 <code>v-viewer</code> 属性，它会自动作用于子 img 标签。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-viewer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>点击图片时就会弹出预览的界面。</p><span id="more"></span><h3 id="MarkDown-的编辑与转换"><a href="#MarkDown-的编辑与转换" class="headerlink" title="MarkDown 的编辑与转换"></a>MarkDown 的编辑与转换</h3><h4 id="markdown-编辑器"><a href="#markdown-编辑器" class="headerlink" title="markdown 编辑器"></a>markdown 编辑器</h4><h5 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install mavon-editor</span><br></pre></td></tr></table></figure><h5 id="引入-1"><a href="#引入-1" class="headerlink" title="引入"></a>引入</h5><p>main.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> mavonEditor <span class="keyword">from</span> <span class="string">&quot;mavon-editor&quot;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;mavon-editor/dist/css/index.css&#x27;</span></span><br><span class="line"></span><br><span class="line">Vue.use(mavonEditor)</span><br></pre></td></tr></table></figure><h5 id="使用-1"><a href="#使用-1" class="headerlink" title="使用"></a>使用</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mavon-editor</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入文章&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;content&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">mavon-editor</span>&gt;</span></span><br></pre></td></tr></table></figure><p>写的内容都保存在了 content 中。</p><h4 id="markdown-转-html"><a href="#markdown-转-html" class="headerlink" title="markdown 转 html"></a>markdown 转 html</h4><h5 id="安装-2"><a href="#安装-2" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install marked</span><br></pre></td></tr></table></figure><h5 id="引入-2"><a href="#引入-2" class="headerlink" title="引入"></a>引入</h5><p>在需要使用的组件中引入：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;parse&#125; <span class="keyword">from</span> <span class="string">&#x27;marked&#x27;</span></span><br></pre></td></tr></table></figure><h5 id="使用-2"><a href="#使用-2" class="headerlink" title="使用"></a>使用</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mavon-editor</span> <span class="attr">placeholder</span>=<span class="string">&quot;请输入文章&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;content&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">&quot;article&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;md_to_h5&quot;</span>&gt;</span></span><br><span class="line">    点击转换</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> &#123;parse&#125; <span class="keyword">from</span> <span class="string">&#x27;marked&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">blog</span>: <span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">content</span>: <span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;,</span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">md_to_h5</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// parse 只接受字符串</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.blog = parse(<span class="built_in">this</span>.content);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染出来的是默认的 markdown 样式，非常简单，可以去网上下载 css 文件，然后在组件中导入即可。</p><p>如果想让代码有高亮，可以引入 highlight.js：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install highlight.js --save<span class="comment">//安装</span></span><br><span class="line"><span class="keyword">import</span> hljs <span class="keyword">from</span> <span class="string">&#x27;highlight.js&#x27;</span><span class="comment">//引用</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;highlight.js/styles/monokai-sublime.css&quot;</span>; <span class="comment">// 引入高亮样式 这里我用的是sublime样式</span></span><br></pre></td></tr></table></figure><p>然后在 marked.setOptions 中加上：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">import</span> &#123;parse， setOPtions&#125; <span class="keyword">from</span> <span class="string">&#x27;marked&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="title">mounted</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">        setOptions(&#123;</span><br><span class="line">            <span class="attr">highlight</span>: <span class="function"><span class="keyword">function</span> (<span class="params">code</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> hljs.highlightAuto(code).value;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="normalize-css"><a href="#normalize-css" class="headerlink" title="normalize.css"></a>normalize.css</h3><p>Normalize.css 是一个可以定制的 CSS 文件，它让不同的浏览器在渲染网页元素的时候形式更统一。</p><p>Normalize.css 只是一个很小的 css 文件，但它在磨人的 HTML 元素样式上提供了跨浏览器的高度一致性。相比于传统的 CSS reset，Normalize.css 是一种现代的、为 HTML5 准备的优质替代方案。总之，Normalize.css 是一种 CSS reset 的替代方案。</p><h5 id="安装-3"><a href="#安装-3" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --save normalize.css</span><br></pre></td></tr></table></figure><h5 id="使用-3"><a href="#使用-3" class="headerlink" title="使用"></a>使用</h5><p>它只是一个初始化样式，在全局导入即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#x27;normalize.css/normalize.css&#x27;</span><br></pre></td></tr></table></figure><br/><h3 id="vue-项目国际化"><a href="#vue-项目国际化" class="headerlink" title="vue 项目国际化"></a>vue 项目国际化</h3><p>这里的国际化是指网站可以通过不同的语言来展示，比如可以切换中文或者英文。</p><p>vue 项目的国际化可以通过 vue-i18n 插件来实现。接下来我们来介绍一下它的使用方法。</p><h5 id="安装-4"><a href="#安装-4" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-i18n</span><br></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a><br/></h5><h5 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h5><p>在 src 目录下新建 lang 文件夹，然后在文件夹下新建 index.js，zh.js，en.js 三个 js 文件。</p><p>zh.js 和 en.js 用来存放需要进行转换的文字内容，若还有其他语言，增加相应文件即可。</p><p>index.js 用来创建 i18n 实例，然后将其导入 main.js 中。</p><h6 id="zh-js"><a href="#zh-js" class="headerlink" title="zh.js"></a>zh.js</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&#x27;用户名&#x27;</span>,</span><br><span class="line">        <span class="attr">password</span>: <span class="string">&#x27;密码&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="en-js"><a href="#en-js" class="headerlink" title="en.js"></a>en.js</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">user</span>: &#123;</span><br><span class="line">        <span class="attr">username</span>: <span class="string">&#x27;Username&#x27;</span>,</span><br><span class="line">        <span class="attr">password</span>: <span class="string">&#x27;Password&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="index-js"><a href="#index-js" class="headerlink" title="index.js"></a>index.js</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createI18n&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span></span><br><span class="line"><span class="keyword">import</span> zh <span class="keyword">from</span> <span class="string">&#x27;./zh&#x27;</span></span><br><span class="line"><span class="keyword">import</span> en <span class="keyword">from</span> <span class="string">&#x27;./en&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> i18n = createI18n(&#123;</span><br><span class="line">  <span class="attr">locale</span>: <span class="string">&#x27;zh&#x27;</span>, <span class="comment">// 语言标识，用来切换语言</span></span><br><span class="line">  <span class="attr">globalInjection</span>: <span class="literal">true</span>, <span class="comment">// 作用于全局</span></span><br><span class="line">  <span class="attr">legacy</span>: <span class="literal">false</span>, <span class="comment">// 若要在 setup 中使用 i18n 需设置为 false</span></span><br><span class="line">  <span class="attr">messages</span>: &#123;</span><br><span class="line">    zh,</span><br><span class="line">    en</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> i18n</span><br></pre></td></tr></table></figure><h6 id="main-js"><a href="#main-js" class="headerlink" title="main.js"></a>main.js</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> i18n <span class="keyword">from</span> <span class="string">&quot;./lang&quot;</span>;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">app.use(i18n);</span><br><span class="line">...</span><br></pre></td></tr></table></figure><br/><h5 id="使用-4"><a href="#使用-4" class="headerlink" title="使用"></a>使用</h5><p>配置好之后就可以使用了：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;&#123; $t(&#x27;user.username&#x27;) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 或者 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    &#123;&#123; t(&#x27;user.username&#x27;) &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>如果想要点击切换语言，可以这样做：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;changeLang&#x27;</span>&gt;</span></span><br><span class="line">    点击切换语言</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="comment">/* vue3 */</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> &#123;useI18n&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-i18n&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> i18n = useI18n();</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">changeLang</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// i18n.locale 是一个响应性的 ref 对象</span></span></span><br><span class="line"><span class="javascript">            i18n.locale.value = i18n.locale.value === <span class="string">&#x27;en&#x27;</span> ? <span class="string">&#x27;zh&#x27;</span> : <span class="string">&#x27;en&#x27;</span>; </span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            changeLang</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="comment">/* vue2 */</span></span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>: &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">changeLang</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">this</span>.$i18n.locale = <span class="built_in">this</span>.$i18n.locale === <span class="string">&#x27;en&#x27;</span> ? <span class="string">&#x27;zh&#x27;</span> : <span class="string">&#x27;en&#x27;</span>;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>更多关于 vue-i18n 的用法请看 <a href="https://kazupon.github.io/vue-i18n/zh/introduction.html">https://kazupon.github.io/vue-i18n/zh/introduction.html</a>。</p><h3 id="vue-图片裁剪"><a href="#vue-图片裁剪" class="headerlink" title="vue 图片裁剪"></a>vue 图片裁剪</h3><p>官网：<a href="https://github.com/xyxiao001/vue-cropper">https://github.com/xyxiao001/vue-cropper</a>。</p><h5 id="安装-5"><a href="#安装-5" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install vue-cropper@next</span><br></pre></td></tr></table></figure><h5 id="引入-3"><a href="#引入-3" class="headerlink" title="引入"></a>引入</h5><p>在需要用到的组件中：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;vue-cropper/dist/index.css&#x27;</span></span><br><span class="line"><span class="keyword">import</span> &#123; VueCropper &#125;  <span class="keyword">from</span> <span class="string">&quot;vue-cropper&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    <span class="attr">components</span>:&#123; VueCropper &#125;,</span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用-5"><a href="#使用-5" class="headerlink" title="使用"></a>使用</h5><p>需在父容器上规定宽高。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;with:300px; height:300px&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">VueCropper</span></span></span><br><span class="line"><span class="tag">          <span class="attr">ref</span>=<span class="string">&quot;cropperRef&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:img</span>=<span class="string">&quot;option.img&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:outputSize</span>=<span class="string">&quot;option.outputSize&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:outputType</span>=<span class="string">&quot;option.outputType&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:info</span>=<span class="string">&quot;option.info&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:canScale</span>=<span class="string">&quot;option.canScale&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:autoCrop</span>=<span class="string">&quot;option.autoCrop&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:autoCropWidth</span>=<span class="string">&quot;option.autoCropWidth&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:autoCropHeight</span>=<span class="string">&quot;option.autoCropHeight&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:fixed</span>=<span class="string">&quot;option.fixed&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:fixedNumber</span>=<span class="string">&quot;option.fixedNumber&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:full</span>=<span class="string">&quot;option.full&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:fixedBox</span>=<span class="string">&quot;option.fixedBox&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:canMove</span>=<span class="string">&quot;option.canMove&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:canMoveBox</span>=<span class="string">&quot;option.canMoveBox&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:original</span>=<span class="string">&quot;option.original&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:centerBox</span>=<span class="string">&quot;option.centerBox&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:height</span>=<span class="string">&quot;option.height&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:infoTrue</span>=<span class="string">&quot;option.infoTrue&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:maxImgSize</span>=<span class="string">&quot;option.maxImgSize&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:enlarge</span>=<span class="string">&quot;option.enlarge&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">:mode</span>=<span class="string">&quot;option.mode&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> <span class="keyword">const</span> cropperRef = ref();</span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> option = reactive(&#123;</span></span><br><span class="line"><span class="javascript">          <span class="attr">img</span>: <span class="string">&quot;&quot;</span>,   <span class="comment">//裁剪图片的地址</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">outputSize</span>: <span class="number">1</span>,       <span class="comment">//裁剪生成图片的质量(可选0.1 - 1)</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">outputType</span>: <span class="string">&#x27;png&#x27;</span>,  <span class="comment">//裁剪生成图片的格式（jpeg || png || webp）</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">info</span>: <span class="literal">true</span>,          <span class="comment">//图片大小信息</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">canScale</span>: <span class="literal">true</span>,      <span class="comment">//图片是否允许滚轮缩放</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">autoCrop</span>: <span class="literal">true</span>,      <span class="comment">//是否默认生成截图框</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">autoCropWidth</span>: <span class="number">230</span>,  <span class="comment">//默认生成截图框宽度</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">autoCropHeight</span>: <span class="number">230</span>, <span class="comment">//默认生成截图框高度</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">fixed</span>: <span class="literal">true</span>,         <span class="comment">//是否开启截图框宽高固定比例</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">fixedNumber</span>: [<span class="number">1</span>, <span class="number">1</span>], <span class="comment">//截图框的宽高比例</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">full</span>: <span class="literal">false</span>,         <span class="comment">//false按原比例裁切图片，不失真</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">fixedBox</span>: <span class="literal">false</span>,     <span class="comment">//固定截图框大小，不允许改变</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">canMove</span>: <span class="literal">false</span>,      <span class="comment">//上传图片是否可以移动</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">canMoveBox</span>: <span class="literal">true</span>,    <span class="comment">//截图框能否拖动</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">original</span>: <span class="literal">false</span>,     <span class="comment">//上传图片按照原始比例渲染</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">centerBox</span>: <span class="literal">false</span>,    <span class="comment">//截图框是否被限制在图片里面</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">height</span>: <span class="literal">true</span>,        <span class="comment">//是否按照设备的dpr 输出等比例图片</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">infoTrue</span>: <span class="literal">false</span>,     <span class="comment">//true为展示真实输出图片宽高，false展示看到的截图框宽高</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">maxImgSize</span>: <span class="number">3000</span>,    <span class="comment">//限制图片最大宽度和高度</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">enlarge</span>: <span class="number">1</span>,          <span class="comment">//图片根据截图框输出比例倍数</span></span></span><br><span class="line"><span class="javascript">          <span class="attr">mode</span>: <span class="string">&quot;300px 300px&quot;</span>   <span class="comment">//图片默认渲染方式</span></span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">        <span class="comment">// 获取裁剪后的图片</span></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">getData</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            cropperRef.value.getCropBlob(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">      &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            cropperRef,</span></span><br><span class="line"><span class="javascript">            option</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask用户身份认证</title>
      <link href="/2022/01/20/Flask/Flask%E7%94%A8%E6%88%B7%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/"/>
      <url>/2022/01/20/Flask/Flask%E7%94%A8%E6%88%B7%E8%BA%AB%E4%BB%BD%E8%AE%A4%E8%AF%81/</url>
      
        <content type="html"><![CDATA[<p>如果是跨域请求，而且在请求头中添加了东西（token），那么每次请求服务器时都会有一个 options 请求（预检请求），这会影响服务器响应的速度。</p><p>我们可以通过在响应头中添加 Access-Control-Max-Age 来解决，它的作用是把 OPTIONS 响应缓存起来，在指定的时间内，不会再次发起 OPTIONS 预请求，这样只有在第一次请求的时候会有 OPTIONS ，之后浏览器会从缓存里读取响应，也就不会再发送OPTIONS请求了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">addHeaders</span>(<span class="params">response</span>):</span></span><br><span class="line">    response.headers[<span class="string">&#x27;Access-Control-Max-Age&#x27;</span>] = <span class="string">&#x27;2592000&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br></pre></td></tr></table></figure><h3 id="跨域用户身份认证方案"><a href="#跨域用户身份认证方案" class="headerlink" title="跨域用户身份认证方案"></a>跨域用户身份认证方案</h3><h5 id="session"><a href="#session" class="headerlink" title="session"></a>session</h5><p>flask 的 session 机制是根据请求头中携带的 cookie 值创建对应的 session 对象。每有一个新的 cookie 值，就创建一个新的 session 对象，因此每个用户都对应一个 session 对象，不会混乱。</p><p>当在 flask 框架中编写前端代码时（同源），后台会携带带有 “Set-Cookie” 的响应头返回给浏览器，那么用户在请求时浏览器会自动携带带有 “Cookie” 的请求头给后台，”Set-Cookie” 和 “Cookie” 中保存的都是 session_id，后台会根据 session_id 找到对应的 session 对象。</p><span id="more"></span><p>如果是跨域的话，默认跨域请求是不携带 cookie 的，因此当前端向后端发起时，请求头中是没有 “Cookie” 的，后台会把 Cookie 值当成 None 来处理，创建一个新的 session 对象。那么每次请求都会创建一个新的 session，无法保持会话。</p><p>如果想要跨域携带 cookie，我们可以进行设置：</p><ol><li><p>后端采用 CORS 策略，将 <code>supports_credentials</code> 设为 True</p></li><li><p>前端配置 axios 时加上 <code>withCredentials: true</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> axios_ = axios.create(&#123;</span><br><span class="line">  <span class="attr">baseURL</span>: <span class="string">&#x27;http://localhost:5000&#x27;</span>,</span><br><span class="line">  <span class="attr">timeout</span>: <span class="number">60</span> * <span class="number">1000</span>,</span><br><span class="line">  <span class="attr">withCredentials</span>: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ol><p>现在，前后端通信时就会自动携带 cookie 了。</p><h5 id="token"><a href="#token" class="headerlink" title="token"></a>token</h5><p>token 由后端生成，发送给前端，然后前端进行保存，并在每次请求时将其加入到请求头中，后端接收到请求后通过比对 token 值判断用户身份。</p><p>token 一般存放的是用户的 id 或 用户名，并加密保存到 redis 或 mysql 中。</p><p>对于 jwt，token 不需要后端进行保存，验证即可。</p>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python调用支付宝接口</title>
      <link href="/2021/12/23/Flask/python%E8%B0%83%E7%94%A8%E6%94%AF%E4%BB%98%E5%AE%9D%E6%8E%A5%E5%8F%A3/"/>
      <url>/2021/12/23/Flask/python%E8%B0%83%E7%94%A8%E6%94%AF%E4%BB%98%E5%AE%9D%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p>这里使用的是支付宝的沙箱环境：<a href="https://open.alipay.com/platform/appDaily.htm">https://open.alipay.com/platform/appDaily.htm</a>。</p><p>关于沙箱的具体配置请看 <a href="https://opendocs.alipay.com/common/02kkv7">https://opendocs.alipay.com/common/02kkv7</a>。</p><p>我们直接来说 python 如何使用支付宝 API。</p><h5 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install alipay-sdk-pytho</span><br></pre></td></tr></table></figure><h6 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h6><h6 id="实例化客户端"><a href="#实例化客户端" class="headerlink" title="实例化客户端"></a>实例化客户端</h6><p>发起支付、查询交易信息、退款等服务都需要实例化一个客户端。</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> alipay.aop.api.DefaultAlipayClient <span class="keyword">import</span> DefaultAlipayClient</span><br><span class="line"><span class="keyword">from</span> alipay.aop.api.AlipayClientConfig <span class="keyword">import</span> AlipayClientConfig</span><br><span class="line"></span><br><span class="line">alipay_client_config = AlipayClientConfig()</span><br><span class="line"><span class="comment"># 请求网关</span></span><br><span class="line">alipay_client_config.server_url = current_app.config[<span class="string">&#x27;SERVER_URL&#x27;</span>]</span><br><span class="line"><span class="comment"># APP ID</span></span><br><span class="line">alipay_client_config.app_id = current_app.config[<span class="string">&#x27;APP_ID&#x27;</span>]</span><br><span class="line"><span class="comment"># 个人私钥</span></span><br><span class="line">alipay_client_config.app_private_key = current_app.config[<span class="string">&#x27;APP_PRIVATE_KEY&#x27;</span>]</span><br><span class="line"><span class="comment"># 支付宝公钥</span></span><br><span class="line">alipay_client_config.alipay_public_key = current_app.config[<span class="string">&#x27;ALIPAY_PUBLIC_KEY&#x27;</span>]</span><br><span class="line"></span><br><span class="line">client = DefaultAlipayClient(alipay_client_config)</span><br></pre></td></tr></table></figure><h6 id="构造请求参数模型"><a href="#构造请求参数模型" class="headerlink" title="构造请求参数模型"></a>构造请求参数模型</h6><p>不同的服务需要构造不同的参数模型：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;发起支付&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> alipay.aop.api.domain.AlipayTradePagePayModel <span class="keyword">import</span> AlipayTradePagePayModel</span><br><span class="line"></span><br><span class="line">model = AlipayTradePagePayModel()</span><br><span class="line"><span class="comment"># 订单号</span></span><br><span class="line">model.out_trade_no = order_id</span><br><span class="line"><span class="comment"># 总价</span></span><br><span class="line">model.total_amount = price</span><br><span class="line"><span class="comment"># 标题</span></span><br><span class="line">model.subject = name</span><br><span class="line"><span class="comment"># 订单超时时间，如果买家超过这个时间不付款,会关闭交易(最小1分钟)</span></span><br><span class="line">model.timeout_express = <span class="string">&#x27;5m&#x27;</span></span><br><span class="line"><span class="comment"># 产品码</span></span><br><span class="line">model.product_code = <span class="string">&#x27;FAST_INSTANT_TRADE_PAY&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;交易查询&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> alipay.aop.api.domain.AlipayTradeQueryModel <span class="keyword">import</span> AlipayTradeQueryModel</span><br><span class="line"></span><br><span class="line">model = AlipayTradeQueryModel()</span><br><span class="line"><span class="comment"># 订单号即可</span></span><br><span class="line">model.out_trade_no = <span class="string">&#x27;202112221533&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;退款&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> alipay.aop.api.domain.AlipayTradeRefundModel <span class="keyword">import</span> AlipayTradeRefundModel</span><br><span class="line"></span><br><span class="line">model = AlipayTradeRefundModel()</span><br><span class="line"><span class="comment"># 订单号</span></span><br><span class="line">model.out_trade_no = <span class="string">&#x27;202112221533&#x27;</span></span><br><span class="line"><span class="comment"># 退款总额</span></span><br><span class="line">model.refund_amount = <span class="number">100.50</span></span><br></pre></td></tr></table></figure><p>当然，我们也可以不使用模型来传参，直接向对应请求对象中的 <code>biz_content</code> 赋值，例如退款：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> alipay.aop.api.request.AlipayTradeRefundRequest <span class="keyword">import</span> AlipayTradeRefundRequest</span><br><span class="line"></span><br><span class="line">refund_request = AlipayTradeRefundRequest()</span><br><span class="line">refund_request.biz_content = &#123;<span class="string">&#x27;out_trade_no&#x27;</span>: trade_no, <span class="string">&#x27;refund_amount&#x27;</span>: price&#125;</span><br></pre></td></tr></table></figure><h6 id="发起请求并处理响应"><a href="#发起请求并处理响应" class="headerlink" title="发起请求并处理响应"></a>发起请求并处理响应</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;发起支付&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> alipay.aop.api.request.AlipayTradePagePayRequest <span class="keyword">import</span> AlipayTradePagePayRequest</span><br><span class="line"></span><br><span class="line">pay_request = AlipayTradePagePayRequest(biz_model=model)</span><br><span class="line"><span class="comment"># 支付成功后支付宝发送 POST 请求的地址</span></span><br><span class="line">pay_request.notify_url = <span class="string">&#x27;http://192.168.31.196:5000/pay_result&#x27;</span></span><br><span class="line"><span class="comment"># 支付成功后的跳转页面</span></span><br><span class="line">pay_request.return_url = <span class="string">&#x27;http://192.168.31.196:5000/order&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行 api 调用</span></span><br><span class="line"><span class="comment"># 执行请求 &#x27;get&#x27;返回支付页面的 url，&#x27;post&#x27;返回支付页面表单的 html 字符串</span></span><br><span class="line">pay_url = client.page_execute(pay_request, http_method=<span class="string">&#x27;GET&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;url&#x27;</span>: pay_url&#125;)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;查询交易&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> alipay.aop.api.request.AlipayTradeQueryRequest <span class="keyword">import</span> AlipayTradeQueryRequest</span><br><span class="line"><span class="keyword">from</span> alipay.aop.api.response.AlipayTradeQueryResponse <span class="keyword">import</span> AlipayTradeQueryResponse</span><br><span class="line"></span><br><span class="line">query_request = AlipayTradeQueryRequest(biz_model=model)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    response_content = client.execute(query_request)</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line">response = AlipayTradeQueryResponse()</span><br><span class="line">response.parse_response_content(response)</span><br><span class="line"><span class="comment"># 请求成功</span></span><br><span class="line"><span class="keyword">if</span> res.is_success():</span><br><span class="line">    <span class="built_in">print</span>(response.out_trade_no)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;退款&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">from</span> alipay.aop.api.request.AlipayTradeRefundRequest <span class="keyword">import</span> AlipayTradeRefundRequest</span><br><span class="line"><span class="keyword">from</span> alipay.aop.api.response.AlipayTradeRefundResponse <span class="keyword">import</span> AlipayTradeRefundResponse</span><br><span class="line"></span><br><span class="line"><span class="comment"># 同上</span></span><br></pre></td></tr></table></figure><p>在支付请求中，当用户支付完成后支付宝会向 <code>notify_url</code> 中的地址发送 post 请求，将订单的信息返回，但必须要求这个地址能够被外网访问，否则不会被请求。</p><p>我们得到返回的结果后，需要进行验签：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> alipay.aop.api.util.SignatureUtils <span class="keyword">import</span> verify_with_rsa</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">checkSign</span>(<span class="params">params</span>):</span></span><br><span class="line">    sign = params.pop(<span class="string">&#x27;sign&#x27;</span>)</span><br><span class="line">    params.pop(<span class="string">&#x27;sign_type&#x27;</span>)</span><br><span class="line">    params_sorted = <span class="built_in">sorted</span>(params.items(), key=<span class="keyword">lambda</span> x:x[<span class="number">0</span>], reverse=<span class="literal">False</span>)</span><br><span class="line">    params_encode = <span class="string">&#x27;&amp;&#x27;</span>.join(<span class="string">&#x27;&#123;&#125;=&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(k, v) <span class="keyword">for</span> k,v <span class="keyword">in</span> params_sorted).encode()</span><br><span class="line">    <span class="keyword">return</span> verify_with_rsa(current_app.config[<span class="string">&#x27;ALIPAY_PUBLIC_KEY&#x27;</span>], params_encode, sign)</span><br><span class="line"></span><br><span class="line">params = request.form</span><br><span class="line"><span class="comment"># 验签成功</span></span><br><span class="line"><span class="keyword">if</span> checkSign(params):</span><br><span class="line">    <span class="comment"># 核对订单号等信息</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask项目配置</title>
      <link href="/2021/12/23/Flask/Flask%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/"/>
      <url>/2021/12/23/Flask/Flask%E9%A1%B9%E7%9B%AE%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="创建项目"><a href="#创建项目" class="headerlink" title="创建项目"></a>创建项目</h3><p>flask  项目不能像 django 那样通过命令行创建，所以直接在 pycharm 中新建 Flask 项目。</p><p>假如我们创建了一个名为 Demo 的项目，那么创建好的项目目录如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Demo</span><br><span class="line">- static</span><br><span class="line">- templates</span><br><span class="line">- app.py</span><br></pre></td></tr></table></figure><p>只有两个文件夹和一个 py 文件，真不愧是轻量级框架。</p><ul><li>static：存放静态资源，如 css，js</li><li>templates：存放模板，类似 django</li><li>app.py：项目启动文件</li></ul><p>然后我们就可以启动项目了。在启动项目之前，需要设置 Flask 的环境变量，打开终端，执行以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$env:FLASK_APP=app.py</span><br><span class="line">$env:FLASK_ENV=development</span><br></pre></td></tr></table></figure><p>linux 环境：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export FLASK_APP=app.py</span><br><span class="line">export FLASK_ENV=development</span><br></pre></td></tr></table></figure><p>app.py 就是项目的入口文件，名字依个人而异。</p><p>然后启动项目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask run</span><br></pre></td></tr></table></figure><span id="more"></span><hr><h3 id="项目配置"><a href="#项目配置" class="headerlink" title="项目配置"></a>项目配置</h3><h5 id="创建“app”"><a href="#创建“app”" class="headerlink" title="创建“app”"></a>创建“app”</h5><p>类似于 Django，我们需要创建一个“app”用来存放各个模块的视图函数、路由配置、模型文件等。</p><p>在根目录下创建包 “webapp”，然后在 webapp 下创建所需的模块，再在每个模块下创建 views.py 存放视图函数，创建 models.py 存放数据库模型。</p><p>目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Demo</span><br><span class="line">- static</span><br><span class="line">- templates</span><br><span class="line">- webapp</span><br><span class="line">- __init__.py</span><br><span class="line">- user</span><br><span class="line">- __init__.py</span><br><span class="line">- views.py</span><br><span class="line">- models.py</span><br><span class="line">- order</span><br><span class="line">- __init__.py</span><br><span class="line">- views.py</span><br><span class="line">- models.py</span><br><span class="line">...</span><br><span class="line">- app.py</span><br></pre></td></tr></table></figure><p>webapp 下的 <strong>init</strong>.py 文件主要用于创建 flask 应用并加载配置，如 MySQL、redis等。</p><p>user 和 order 下的 <strong>init</strong>.py 文件用于创建蓝图对象，然后在 views.py 文件中导入对象并使用。</p><p>user/views.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> . <span class="keyword">import</span> userApp</span><br><span class="line"></span><br><span class="line"><span class="meta">@userApp.route(<span class="params"><span class="string">&#x27;/user&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;silence&#x27;</span></span><br></pre></td></tr></table></figure><p>user/<strong>init</strong>.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Blueprint</span><br><span class="line"></span><br><span class="line">userApp = Blueprint(<span class="string">&#x27;user&#x27;</span>, __name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> .view <span class="keyword">import</span> *  <span class="comment"># 写在末尾，不然会因循环导入报错</span></span><br></pre></td></tr></table></figure><br/><h5 id="创建配置文件"><a href="#创建配置文件" class="headerlink" title="创建配置文件"></a>创建配置文件</h5><p>在根目录新建 settings.py 文件，我们可以在其中自定义配置：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span>:</span></span><br><span class="line">    <span class="comment"># 密钥，用于 session 加密</span></span><br><span class="line">    SECRET_KEY = <span class="string">&#x27;Sm9obiBTY2hyb20ga2lja3MgYXNz&#x27;</span></span><br><span class="line">    <span class="comment"># 数据库连接格式</span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = <span class="string">&quot;mysql+pymysql://user:password@localhost:3306/databasename?charset=utf8&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 发展环境配置</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DevelopmentConfig</span>(<span class="params">Config</span>):</span></span><br><span class="line">    DEBUG = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 生产环境配置</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductionConfig</span>(<span class="params">Config</span>):</span></span><br><span class="line">    DEBUG = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">config = &#123;</span><br><span class="line">    <span class="string">&#x27;development&#x27;</span>: DevelopmentConfig,</span><br><span class="line">    <span class="string">&#x27;production&#x27;</span>: ProductionConfig</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置项是需要加载到项目中的，可以在 app.py 中加载，也可以在 webapp/<strong>init</strong>.py 中加载。</p><p>项目默认在 app.py 中创建 Flask 实例，我们也可以将这部分代码封装到一个函数中，还可以添加更多的其它功能。</p><p>在 webapp/<strong>init</strong>.py 中添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> config</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createApp</span>():</span></span><br><span class="line">    <span class="comment"># 创建 app</span></span><br><span class="line">    app = Flask(__name__)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 选择配置类</span></span><br><span class="line">    Config = config[<span class="string">&#x27;development&#x27;</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 加载配置</span></span><br><span class="line">    app.config.from_object(Config)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 注册蓝图</span></span><br><span class="line">    <span class="comment"># 在使用前 import，防止循环导入</span></span><br><span class="line">    <span class="keyword">from</span> .cart.view <span class="keyword">import</span> cartApp</span><br><span class="line">    app.register_blueprint(userApp)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">from</span> .user.view <span class="keyword">import</span> userApp</span><br><span class="line">    app.register_blueprint(cartApp)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> app</span><br></pre></td></tr></table></figure><p>然后将注册好的 app 导入 app.py 文件中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> webapp <span class="keyword">import</span> createApp</span><br><span class="line"></span><br><span class="line">app = createApp()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:    </span><br><span class="line">    app.run()</span><br></pre></td></tr></table></figure><br/><h5 id="配置数据库"><a href="#配置数据库" class="headerlink" title="配置数据库"></a>配置数据库</h5><p>Flask-SQLAlchemy 是一款适用于 Flask 的数据库插件，它支持包含 MySQL、PostgreSQL 和 SQLite 在内的很多数据库软件。</p><p>我们可以在开发的时候使用简单易用且无需另起服务的 SQLite（直接以 db 文件保存在项目中），需要部署应用到生产服务器上时，则选用更健壮的 MySQL 或 PostgreSQL 服务。</p><h6 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h6><p>flask-sqlalchemy 用于连接数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-sqlalchemy</span><br></pre></td></tr></table></figure><p>flask-migrate 用于迁移数据库：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-migrate</span><br></pre></td></tr></table></figure><h6 id="2-配置-settings-py"><a href="#2-配置-settings-py" class="headerlink" title="2. 配置 settings.py"></a>2. 配置 settings.py</h6><p>在 settings.py 中添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">basedir = os.path.abspath(os.path.dirname(__file__))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span>:</span>    </span><br><span class="line">    <span class="comment"># 密钥，用于 session 加密    </span></span><br><span class="line">    SECRET_KEY = <span class="string">&#x27;Sm9obiBTY2hyb20ga2lja3MgYXNz&#x27;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 发展环境配置</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DevelopmentConfig</span>(<span class="params">Config</span>):</span>    </span><br><span class="line">    DEBUG = <span class="literal">True</span>    </span><br><span class="line">    <span class="comment"># 数据库连接格式    </span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = os.environ.get(<span class="string">&#x27;DATABASE_URL&#x27;</span>) <span class="keyword">or</span> <span class="string">&#x27;sqlite:///&#x27;</span> + os.path.join(basedir, <span class="string">&#x27;app.db&#x27;</span>)    </span><br><span class="line">    <span class="comment"># 数据发生变更是否发信号给应用    </span></span><br><span class="line">    SQLALCHEMY_TRACK_MODIFICATIONS = <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># 生产环境配置</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProductionConfig</span>(<span class="params">Config</span>):</span>    </span><br><span class="line">    DEBUG = <span class="literal">False</span>    </span><br><span class="line">    <span class="comment"># 数据库连接格式    </span></span><br><span class="line">    SQLALCHEMY_DATABASE_URI = <span class="string">&quot;mysql+pymysql://user:password@localhost:3306/databasename?charset=utf8&quot;</span></span><br></pre></td></tr></table></figure><p><code>os.environ.get</code> 可以获取本机的用户环境变量，一些比较机密的数据可以放在环境变量里面，仅对自己可见。<code>or</code> 的作用是如果没有定义该环境变量，则选择后面的值。</p><p>当然，发展环境也可以用 mysql 数据库。</p><h6 id="3-配置-app-init-py"><a href="#3-配置-app-init-py" class="headerlink" title="3. 配置 app/init.py"></a>3. 配置 app/<strong>init</strong>.py</h6><p>在 webapp/<strong>init</strong>.py 文件中添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_sqlalchemy <span class="keyword">import</span> SQLAlchemy</span><br><span class="line"><span class="keyword">from</span> flask_migrate <span class="keyword">import</span> Migrate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建数据库连接对象</span></span><br><span class="line">db = SQLAlchemy()</span><br><span class="line"><span class="comment"># 创建数据库迁移对象</span></span><br><span class="line">migrate = Migrate()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createApp</span>():</span>    </span><br><span class="line">    ...    </span><br><span class="line">    <span class="comment"># 初始化数据库连接对象    </span></span><br><span class="line">    db.init_app(app)    </span><br><span class="line">    <span class="comment"># 初始化数据库迁移对象    </span></span><br><span class="line">    migrate.init_app(app, db)    </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h6 id="4-创建数据库模型"><a href="#4-创建数据库模型" class="headerlink" title="4. 创建数据库模型"></a>4. 创建数据库模型</h6><p>在 user/models.py 中添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> webapp <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span>(<span class="params">db.Model</span>):</span>    </span><br><span class="line">    __tablename__ = <span class="string">&quot;user&quot;</span>  <span class="comment"># 设置表名   </span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, autoincrement=<span class="literal">True</span>, primary_key=<span class="literal">True</span>)    </span><br><span class="line">    username = db.Column(db.String(<span class="number">50</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)    </span><br><span class="line">    email = db.Column(db.String(<span class="number">120</span>), unique=<span class="literal">True</span>, nullable=<span class="literal">False</span>)    </span><br><span class="line">    password = db.Column(db.String(<span class="number">20</span>), nullable=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><p>在 cart/models.py 中添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> webapp <span class="keyword">import</span> db</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cart</span>(<span class="params">db.Model</span>):</span>    </span><br><span class="line">    __tablename__ = <span class="string">&quot;cart&quot;</span>  <span class="comment"># 设置表名</span></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">id</span> = db.Column(db.Integer, autoincrement=<span class="literal">True</span>, primary_key=<span class="literal">True</span>)</span><br><span class="line">    user = db.Column(db.Integer, db.ForeignKey(‘user.<span class="built_in">id</span>’)) <span class="comment"># 外键 (‘表名.id’)</span></span><br><span class="line">    shopname = db.Column(db.String(<span class="number">200</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    price = db.Column(db.Float(<span class="number">2</span>), nullable=<span class="literal">False</span>)</span><br><span class="line">    date = db.Column(db.DateTime, nullable=<span class="literal">False</span>)</span><br></pre></td></tr></table></figure><h6 id="生成数据库"><a href="#生成数据库" class="headerlink" title="生成数据库"></a>生成数据库</h6><p>先初始化迁移文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask db init</span><br></pre></td></tr></table></figure><p>会发现根目录下多了一个 migrations 文件夹，就是生成的迁移文件。</p><p>然后要创建数据表，有两种方法：</p><ol><li><p>在项目中的某个文件导入模型类或实例化模型类之后，在终端执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flask db migrateflask db  upgrade</span><br></pre></td></tr></table></figure></li><li><p>不需要事先在项目中导入模型类，打开终端，进入 shell：<code>flask shell</code>，然后执行</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; from webapp import db</span><br><span class="line">&gt;&gt;&gt; from webapp.user.models import User</span><br><span class="line">&gt;&gt;&gt; from webapp.cart.models import Cart</span><br><span class="line">&gt;&gt;&gt; db.create_all()</span><br><span class="line">&gt;&gt;&gt; quit()</span><br></pre></td></tr></table></figure><p>此方法需要在 shell 中导入要创建的模型类。</p></li></ol><p>之后如果更改了数据库，用以上两种方法即可。</p><h6 id="使用数据库"><a href="#使用数据库" class="headerlink" title="使用数据库"></a>使用数据库</h6><p>在 user/view.py 中添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="meta">@userApp.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;post&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span>    </span><br><span class="line">    data = request.get_json()    </span><br><span class="line">    username = data[<span class="string">&#x27;username&#x27;</span>]    </span><br><span class="line">    password = data[<span class="string">&#x27;password&#x27;</span>]    </span><br><span class="line">    email = data[<span class="string">&#x27;email&#x27;</span>]  </span><br><span class="line">    </span><br><span class="line">    user = User(username=username, password=password, email=email)    </span><br><span class="line">    db.session.add(user) <span class="comment"># 添加数据    </span></span><br><span class="line">    db.session.commit() <span class="comment"># 提交更改    </span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;username&#x27;</span>: username, <span class="string">&#x27;password&#x27;</span>: password&#125;)</span><br></pre></td></tr></table></figure><p>关于更多 Falsk-SQLAlchemy 对数据库的操作，请看 <a href="https://silenceszd.top/2021/12/08/Flask/Flask%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/">Falsk-SQLAlchemy</a>。</p><br/><h5 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h5><p>安装 flask-cors：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-cors</span><br></pre></td></tr></table></figure><p>在入口文件 app.py 中添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_cors <span class="keyword">import</span> CORS</span><br><span class="line"></span><br><span class="line">CORS(app, ssupports_credentials=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>我们还可以规定 <code>origins</code>（请求源）、<code>methods</code>（请求方法）、<code>allow_headers</code>（允许的请求头）<code>supports_credentials</code>（是否支持 cookie）。</p><br/><h5 id="配置-redis"><a href="#配置-redis" class="headerlink" title="配置 redis"></a>配置 redis</h5><h6 id="安装-redis-支持包"><a href="#安装-redis-支持包" class="headerlink" title="安装 redis 支持包"></a>安装 redis 支持包</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-redis</span><br></pre></td></tr></table></figure><h6 id="配置-settings-py"><a href="#配置-settings-py" class="headerlink" title="配置 settings.py"></a>配置 settings.py</h6><p>在 settings.py 文件中添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">REDIS_URL = <span class="string">&quot;redis://:password@localhost:6379/0&quot;</span></span><br></pre></td></tr></table></figure><h6 id="配置-webapp-init-py"><a href="#配置-webapp-init-py" class="headerlink" title="配置 webapp/init.py"></a>配置 webapp/<strong>init</strong>.py</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_redis <span class="keyword">import</span> FlaskRedis</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 redis 对象</span></span><br><span class="line">redis_client = FlaskRedis()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createApp</span>():</span>    </span><br><span class="line">    ...    </span><br><span class="line">    <span class="comment"># 初始化 redis 对象    </span></span><br><span class="line">    redis_client.init_app(app)    </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>接下来就可以通过 redis-client 操作 redis 数据库了。</p><br/><h5 id="flask-用-redis-缓存-session"><a href="#flask-用-redis-缓存-session" class="headerlink" title="flask 用 redis 缓存 session"></a>flask 用 redis 缓存 session</h5><h6 id="安装-flask-session"><a href="#安装-flask-session" class="headerlink" title="安装 flask-session"></a>安装 flask-session</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-session</span><br></pre></td></tr></table></figure><h6 id="配置-settings-py-1"><a href="#配置-settings-py-1" class="headerlink" title="配置 settings.py"></a>配置 settings.py</h6><p>添加如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置 session</span></span><br><span class="line"><span class="comment"># 存储方式</span></span><br><span class="line">SESSION_TYPE = <span class="string">&#x27;redis&#x27;</span></span><br><span class="line"><span class="comment"># session 是否长期有效，如为 False 则关闭浏览器 session 失效</span></span><br><span class="line">SESSION_PERMANENT = <span class="literal">True</span></span><br><span class="line"><span class="comment"># session 如果设定为长期有效则设定 session 生命周期，单位是秒(默认为31天)</span></span><br><span class="line">PERMANENT_SESSION_LIFETIME = <span class="number">60</span> * <span class="number">60</span> * <span class="number">24</span></span><br><span class="line"><span class="comment"># 密钥，用于 session 加密</span></span><br><span class="line">SECRET_KEY = <span class="string">&#x27;Sm9obiBTY2hyb20ga2lja3MgYXNz&#x27;</span></span><br><span class="line"><span class="comment"># 是否对发送到浏览器上 session 的 cookie 值进行加密</span></span><br><span class="line">SESSION_USE_SIGNER = <span class="literal">True</span></span><br><span class="line"><span class="comment"># 保存 session 对象的键的前缀</span></span><br><span class="line">SESSION_KEY_PREFIX = <span class="string">&#x27;session:&#x27;</span></span><br><span class="line"><span class="comment"># 配置redis服务器参数，默认为 0 数据库</span></span><br><span class="line">SESSION_REDIS = StrictRedis(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">6379</span>, db=<span class="number">1</span>, password=<span class="string">&#x27;123456&#x27;</span>)</span><br></pre></td></tr></table></figure><h6 id="配置-webapp-init-py-1"><a href="#配置-webapp-init-py-1" class="headerlink" title="配置 webapp/init.py"></a>配置 webapp/<strong>init</strong>.py</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_session <span class="keyword">import</span> Session</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 session 对象</span></span><br><span class="line">session = Session()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createApp</span>():</span>    </span><br><span class="line">    ...    </span><br><span class="line">    <span class="comment"># 初始化 redis 对象    </span></span><br><span class="line">    session.init_app(app)    </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h6 id="使用-session"><a href="#使用-session" class="headerlink" title="使用 session"></a>使用 session</h6><p>我们虽然使用到了 flask-session，但它仅用来配置 session，使用 session 时还是要用 flask 模块中 session：</p><p>user/view.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> session</span><br><span class="line"></span><br><span class="line"><span class="meta">@userApp.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;get&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span>():</span>    </span><br><span class="line">    <span class="comment"># 存    </span></span><br><span class="line">    session[key] = value       </span><br><span class="line">    <span class="comment"># 取    </span></span><br><span class="line">    val = session.get[key]    </span><br><span class="line">    <span class="keyword">if</span> val <span class="keyword">is</span> <span class="literal">None</span>:        </span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;None&#x27;</span></span><br></pre></td></tr></table></figure><br/><h5 id="用-redis-做-cache-缓存"><a href="#用-redis-做-cache-缓存" class="headerlink" title="用 redis 做 cache 缓存"></a>用 redis 做 cache 缓存</h5><p>当你的应用变慢的时候，可以考虑加入缓存。至少这是最简单的加速方法。缓存有什 么用？假设有一个函数耗时较长，但是这个函数在五分钟前返回的结果还是正确的， 那么我们就可以考虑把这个函数的结果在缓存中存放一段时间，当再次请求数据的时候直接从缓存中读取。</p><h6 id="安装-flask-cache"><a href="#安装-flask-cache" class="headerlink" title="安装 flask-cache"></a>安装 flask-cache</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-cache</span><br></pre></td></tr></table></figure><h6 id="配置-settings-py-2"><a href="#配置-settings-py-2" class="headerlink" title="配置 settings.py"></a>配置 settings.py</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CACHE_TYPE = <span class="string">&#x27;redis&#x27;</span></span><br><span class="line">CACHE_REDIS_HOST = <span class="string">&#x27;localhost&#x27;</span></span><br><span class="line">CACHE_REDIS_PORT = <span class="number">6379</span></span><br><span class="line">CACHE_REDIS_DB = <span class="string">&#x27;2&#x27;</span></span><br><span class="line">CACHE_REDIS_PASSWORD = <span class="string">&#x27;123456&#x27;</span></span><br><span class="line">CACHE_DEFAULT_TIMEOUT = <span class="number">60</span> <span class="comment"># 过期时间</span></span><br></pre></td></tr></table></figure><h6 id="配置-webapp-init-py-2"><a href="#配置-webapp-init-py-2" class="headerlink" title="配置 webapp/init.py"></a>配置 webapp/<strong>init</strong>.py</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_cache <span class="keyword">import</span> Cache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 cache 对象</span></span><br><span class="line">cache = Cache()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createApp</span>():</span>    </span><br><span class="line">    ...    </span><br><span class="line">    <span class="comment"># 初始化 cache 对象    </span></span><br><span class="line">    cache.init_app(app)    </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h6 id="使用-cache"><a href="#使用-cache" class="headerlink" title="使用 cache"></a>使用 cache</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> webapp <span class="keyword">import</span> cache</span><br><span class="line"></span><br><span class="line">cache.<span class="built_in">set</span>(key, value)  <span class="comment"># 添加</span></span><br><span class="line">cache.get(key)  <span class="comment"># 获取</span></span><br><span class="line">cache.delete(key) <span class="comment"># 删除</span></span><br><span class="line">cache.clear() <span class="comment"># 清除所有缓存</span></span><br></pre></td></tr></table></figure><p>在 cart/view.py 文件中添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> webapp <span class="keyword">import</span> cache</span><br><span class="line"></span><br><span class="line"><span class="meta">@cartApp.route(<span class="params"><span class="string">&#x27;/cart&#x27;</span>, methods=[<span class="string">&#x27;get&#x27;</span>]</span>)</span></span><br><span class="line"><span class="meta">@cache.cached(<span class="params">timeout=<span class="number">60</span>, key_prefix=<span class="string">&#x27;cart_index&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCartInfo</span>():</span>    </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>使用装饰函数 <code>@cache.cached</code> 修饰视图函数，表示将视图函数的返回结果缓存到 redis 中。并且 <strong>@cache.cached 必须在 @cartApp.route 之后</strong>。</p><p><code>@cache.cached</code> 有两个参数，第一个表示过期时间，单位为秒，第二个表示保存在 redis 中的键的前缀。这个前缀名在删除缓存的时候可以用到。</p><p>这种方法适用于对所有用户都相同的页面数据进行缓存。</p><p>如果要针对每个用户单独进行缓存，可将用户的信息作为 cache 键的一部分，手动进行缓存：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> webapp <span class="keyword">import</span> cache</span><br><span class="line"></span><br><span class="line"><span class="meta">@cartApp.route(<span class="params"><span class="string">&#x27;/cart&#x27;</span>, methods=[<span class="string">&#x27;get&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCartInfo</span>():</span>    </span><br><span class="line">    username = session.get(<span class="string">&#x27;username&#x27;</span>)    </span><br><span class="line">    <span class="keyword">if</span> cache.get(<span class="string">&#x27;cart_&#x27;</span> + username) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:        </span><br><span class="line">        data = cache.get(<span class="string">&#x27;cart_&#x27;</span> + username)    </span><br><span class="line">    <span class="keyword">else</span>:        </span><br><span class="line">        data = []        </span><br><span class="line">        ...        </span><br><span class="line">        key = <span class="string">&#x27;cart_&#x27;</span> + username        </span><br><span class="line">        cache.<span class="built_in">set</span>(key, data)    </span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>当一个视图函数的返回结果发生改变时，缓存也应该进行<strong>更新</strong>。更新的方法就是在结果发生改变的地方将缓存删除，那么当用户再次请求的时候就会生成新的缓存。</p><br/><h5 id="flask-邮件"><a href="#flask-邮件" class="headerlink" title="flask 邮件"></a>flask 邮件</h5><h6 id="安装-flask-mail"><a href="#安装-flask-mail" class="headerlink" title="安装 flask-mail"></a>安装 flask-mail</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install flask-mail</span><br></pre></td></tr></table></figure><h6 id="配置-settings-py-3"><a href="#配置-settings-py-3" class="headerlink" title="配置 settings.py"></a>配置 settings.py</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置邮件（网易邮箱）    </span></span><br><span class="line">MAIL_SERVER = <span class="string">&#x27;smtp.163.com&#x27;</span>    </span><br><span class="line">MAIL_PORT = <span class="number">465</span>    </span><br><span class="line">MAIL_USE_SSL = <span class="literal">True</span> <span class="comment"># 安全协议    </span></span><br><span class="line">MAIL_USERNAME = <span class="string">&#x27;silence@163.com&#x27;</span> <span class="comment"># 发信服务器的用户名    </span></span><br><span class="line">MAIL_PASSWORD = <span class="string">&#x27;&#x27;</span> <span class="comment"># 授权码    </span></span><br><span class="line">MAIL_DEFAULT_SENDER = (<span class="string">&#x27;Silence&#x27;</span>, <span class="string">&#x27;silence@163.com&#x27;</span>) <span class="comment"># 默认发送人（姓名，邮箱地址）</span></span><br></pre></td></tr></table></figure><h6 id="配置-webapp-init-py-3"><a href="#配置-webapp-init-py-3" class="headerlink" title="配置 webapp/init.py"></a>配置 webapp/<strong>init</strong>.py</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Mail</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建 mail 对象</span></span><br><span class="line">mail = Mail()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createApp</span>():</span>    </span><br><span class="line">    ...    </span><br><span class="line">    <span class="comment"># 初始化 mail 对象    </span></span><br><span class="line">    mail.init_app(app)    </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h6 id="发送邮件"><a href="#发送邮件" class="headerlink" title="发送邮件"></a>发送邮件</h6><p>在 user/view.py 中添加如下代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Message</span><br><span class="line"><span class="keyword">from</span> webapp <span class="keyword">import</span> mail</span><br><span class="line"></span><br><span class="line"><span class="meta">@userApp.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;get&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>():</span>    </span><br><span class="line">    ...    </span><br><span class="line">    <span class="comment"># 邮件主题    </span></span><br><span class="line">    subject = <span class="string">&#x27;账号激活&#x27;</span>    </span><br><span class="line">    <span class="comment"># 接收者    </span></span><br><span class="line">    recipients = [email]   </span><br><span class="line">    <span class="comment"># 邮件内容（html）    </span></span><br><span class="line">    html = <span class="string">&#x27;点击链接激活邮箱: &lt;a href=&quot;http://127.0.0.1:5000/check/%d&quot;&gt;xxxxxxxxx&lt;/a&gt;&#x27;</span> %(user_id)    </span><br><span class="line">    <span class="comment"># 创建邮件内容    </span></span><br><span class="line">    message = Message(subject=subject, recipients=recipients, html=html)    </span><br><span class="line">    <span class="comment"># 发送邮件    </span></span><br><span class="line">    mail.send(message)    </span><br><span class="line">    ...    </span><br><span class="line">    </span><br><span class="line"><span class="comment"># 用户点击链接访问此 url</span></span><br><span class="line"><span class="meta">@userApp.route(<span class="params"><span class="string">&#x27;/check/&lt;id&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">chackid</span>(<span class="params"><span class="built_in">id</span></span>):</span>    </span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">str</span>(<span class="built_in">id</span>)</span><br></pre></td></tr></table></figure><br/><h5 id="celery-任务队列"><a href="#celery-任务队列" class="headerlink" title="celery 任务队列"></a>celery 任务队列</h5><p>celery 是异步任务队列，可以将一些比较耗时的操作（发送邮件）交给它来异步处理，这样用户不需要一直等待，以提高用户体验。</p><h6 id="安装-celery"><a href="#安装-celery" class="headerlink" title="安装 celery"></a>安装 celery</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install celery</span><br></pre></td></tr></table></figure><h6 id="配置-settings-py-4"><a href="#配置-settings-py-4" class="headerlink" title="配置 settings.py"></a>配置 settings.py</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 配置 celery</span></span><br><span class="line"><span class="comment"># 消息中间件的保存位置</span></span><br><span class="line">CELERY_BROKER_URL = <span class="string">&#x27;redis://:123456@192.168.239.130:6379/3&#x27;</span></span><br><span class="line"><span class="comment"># 返回结果的保存位置</span></span><br><span class="line">CELERY_RESULT_BACKEND = <span class="string">&#x27;redis://:123456@192.168.239.130:6379/3&#x27;</span></span><br><span class="line"><span class="comment"># 任务过期时间</span></span><br><span class="line">CELERY_TASK_RESULT_EXPIRES = <span class="number">120</span></span><br></pre></td></tr></table></figure><h6 id="在-webapp-init-py-中创建-celery-对象"><a href="#在-webapp-init-py-中创建-celery-对象" class="headerlink" title="在 webapp/init.py 中创建 celery 对象"></a>在 webapp/<strong>init</strong>.py 中创建 celery 对象</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="keyword">from</span> settings <span class="keyword">import</span> Config</span><br><span class="line"></span><br><span class="line">                <span class="comment"># app 名</span></span><br><span class="line">celery = Celery(__name__, broker=Config.CELERY_BROKER_URL, backend=Config.CELERY_RESULT_BACKEND)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createApp</span>():</span>    </span><br><span class="line">    ...    </span><br><span class="line">    <span class="comment"># 完善 celery 配置    </span></span><br><span class="line">    celery.conf.update(app.config)    </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><h6 id="创建任务"><a href="#创建任务" class="headerlink" title="创建任务"></a>创建任务</h6><p>新建 tasks.py 文件，我们用 celery 来发送邮件，在其中添加如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> webapp <span class="keyword">import</span> celery, mail, createApp</span><br><span class="line"><span class="keyword">from</span> flask_mail <span class="keyword">import</span> Message</span><br><span class="line"></span><br><span class="line"><span class="meta">@celery.task()</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_email</span>(<span class="params">user_id, email</span>):</span>    </span><br><span class="line">    app = createApp()    </span><br><span class="line">    mail.init_app(app)    </span><br><span class="line">    <span class="comment"># 创建应用上下文    </span></span><br><span class="line">    <span class="keyword">with</span> app.app_context():        </span><br><span class="line">        <span class="comment"># 邮件主题        </span></span><br><span class="line">        subject = <span class="string">&#x27;账号激活&#x27;</span>        </span><br><span class="line">        <span class="comment"># 接收者        </span></span><br><span class="line">        recipients = [email]        </span><br><span class="line">        <span class="comment"># 邮件内容（html）        </span></span><br><span class="line">        html = <span class="string">&#x27;点击链接激活邮箱: &lt;a href=&quot;http://127.0.0.1:5000/check/%d&quot;&gt;xxxxxxxxx&lt;/a&gt;&#x27;</span> % user_id        </span><br><span class="line">        message = Message(subject=subject, recipients=recipients, html=html)</span><br><span class="line">    mail.send(message)</span><br></pre></td></tr></table></figure><p>通过 <code>@celery.task()</code> 装饰器来声明这是一个 celery 任务。</p><p>关于 flask 应用上下文的介绍，请看 <a href="https://silenceszd.top/2021/12/16/Flask/Flask%E4%B8%8A%E4%B8%8B%E6%96%87%E4%BB%8B%E7%BB%8D/#more">Flask 应用上下文</a>。</p><h6 id="使用任务"><a href="#使用任务" class="headerlink" title="使用任务"></a>使用任务</h6><p>在 user/view.py 文件中添加如下内容：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tasks <span class="keyword">import</span> send_email</span><br><span class="line"></span><br><span class="line"><span class="meta">@userApp.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;get&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">register</span>():</span>    </span><br><span class="line">    ...    </span><br><span class="line">    send_email.delay(user.<span class="built_in">id</span>, email)       </span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p><strong>celery 开启任务的方法：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delay(*args, **kwargs)</span><br></pre></td></tr></table></figure><p>直接发送一个任务消息，其传入的参数就是任务函数的参数。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apply_async(countdown=60, expires=120)</span><br></pre></td></tr></table></figure><p>从现在起一分钟执行，但在两分钟后过期。</p><h6 id="开启-celery-服务"><a href="#开启-celery-服务" class="headerlink" title="开启 celery 服务"></a>开启 celery 服务</h6><p>Windows：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install eventletcelery -A tasks worker -l info -P eventlet</span><br></pre></td></tr></table></figure><p>Linux：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">celery -A tasks worker -l info</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
            <tag> flask </tag>
            
            <tag> celery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python循环导入</title>
      <link href="/2021/12/16/python%E5%9F%BA%E7%A1%80/python%E5%BE%AA%E7%8E%AF%E5%AF%BC%E5%85%A5/"/>
      <url>/2021/12/16/python%E5%9F%BA%E7%A1%80/python%E5%BE%AA%E7%8E%AF%E5%AF%BC%E5%85%A5/</url>
      
        <content type="html"><![CDATA[<p>比如有如下目录结构：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root.py</span><br><span class="line">- A</span><br><span class="line">- __init__.py</span><br><span class="line">- a.py</span><br><span class="line">- B</span><br><span class="line">- __init__.py</span><br><span class="line">- b.py</span><br></pre></td></tr></table></figure><p>root.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> A.a <span class="keyword">import</span> class_a</span><br></pre></td></tr></table></figure><p>a.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> B.b <span class="keyword">import</span> class_b</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class_a</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>b.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> A.a <span class="keyword">import</span> class_a</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class_b</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>此时运行 root.py 会发生报错：</p><blockquote><p>ImportError: cannot import name ‘class_a’ from partially initialized module ‘A.a’ (most likely due to a circular import)</p></blockquote><span id="more"></span><p>我们来解析一下运行过程：</p><ol><li>执行 root.py 的 <code>from A.a import class_a</code>，发现需要导入模块 a</li><li>一个空的字典会被创建，对应 a 的 globals</li><li>a.py 中的代码会被执行，当执行到 <code>from B.b import class_b</code>  时，发现需要导入模块 b</li><li>一个空的字典会被创建，对应 b 的 globals</li><li>b.py 中的代码会被执行，当执行到 <code>from A.a import class_a</code>  时，发现需要导入模块 a，但此时已经有 a 的 globals 了，所以直接访问字典里的 class_a，但由于 a 的 globals 还是空的，即没有 class_a，所以抛出异常。</li></ol><p>总结：循环导入的根本原因就是在导入的时候， b 需要访问 a 的变量 class_a，而 class_a 没有初始化完成。</p><p><strong>解决方法：</strong></p><ol><li>在导入的时候，让 b 不要访问 a 的变量</li><li>class_a 初始化完成后，才让 b 访问 a 中的变量</li></ol><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><p>import 整个模块，而不是 import 模块中的变量。</p><p>root.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> A.a</span><br></pre></td></tr></table></figure><p>a.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> B.b</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class_a</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>b.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> A.a</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class_b</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><p>首先编译 a，编译过程中发现需要编译 b，编译 b 完成后，编译 a 剩下的部分。</p><br/><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><p>把导入放在后面，或者把导入放在语句块中。</p><p>root.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> A.a <span class="keyword">import</span> class_a</span><br></pre></td></tr></table></figure><p>a.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class_a</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> B.b <span class="keyword">import</span> class_b</span><br><span class="line">class_b()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class_a</span>:</span></span><br><span class="line">    <span class="keyword">from</span> B.b <span class="keyword">import</span> class_b</span><br><span class="line">    class_b()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>b.py：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class_b</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> A.a <span class="keyword">import</span> class_a</span><br><span class="line">class_a()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">class_b</span>:</span></span><br><span class="line">    <span class="keyword">from</span> A.a <span class="keyword">import</span> class_a</span><br><span class="line">class_a()</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask上下文介绍</title>
      <link href="/2021/12/16/Flask/Flask%E4%B8%8A%E4%B8%8B%E6%96%87%E4%BB%8B%E7%BB%8D/"/>
      <url>/2021/12/16/Flask/Flask%E4%B8%8A%E4%B8%8B%E6%96%87%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p>在程序中我们所写的函数大都不是单独完整的，在使用一个函数完成自身功能的时候，很可能需要同其他的部分进行交互，需要其他外部变量的支持，上下文就是给外部的变量赋值，使函数能正确运行。</p><p>Flask 提供了两种上下文，一种是应用上下文(Application Context)，一种是请求上下文(Request Context)。</p><p>应用上下文和请求上下文都是存放到一个 LocalStack 的栈中的，在应用运行时框架底层会在每个请求进入的时候将请求上下文和应用上下文都推入栈中，因此，在视图函数中，不用担心上下文的问题。</p><span id="more"></span><p>那么不是视图函数的函数（也就是请求之外的函数）要使用如 current_app、request、url_for、<strong>app 配置项</strong>等依赖上下文的对象时会发生什么呢？当然是报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">... outside of application context</span><br><span class="line">... outside of request context</span><br></pre></td></tr></table></figure><p>这时，我们就需要手动将上下文推入到栈中。</p><p>推入请求上下文到栈中时，会自动首先判断有没有应用上下文，如果没有则会先推入应用上下文到栈中，然后再推入请求上下文到栈中。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with app.test_request_context():</span><br><span class="line">　　 print(current_app)</span><br></pre></td></tr></table></figure><p>推入应用上下文到栈中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">with app.app_context():</span><br><span class="line">　　 print(current_app)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python装饰器</title>
      <link href="/2021/12/11/python%E5%9F%BA%E7%A1%80/python%E8%A3%85%E9%A5%B0%E5%99%A8/"/>
      <url>/2021/12/11/python%E5%9F%BA%E7%A1%80/python%E8%A3%85%E9%A5%B0%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<p>装饰器的作用就是为函数添加额外的功能。</p><h3 id="装饰器原理"><a href="#装饰器原理" class="headerlink" title="装饰器原理"></a>装饰器原理</h3><p><strong>&lt; 函数+实参高阶函数+返回值高阶函数+嵌套函数+语法糖 = 装饰器 &gt;</strong></p><p>直接来看例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x</span>(<span class="params">fuc</span>):</span> <span class="comment"># 参数为函数（实参高阶函数）</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">y</span>():</span> <span class="comment"># 嵌套函数</span></span><br><span class="line">        fuc()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;hai&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> y <span class="comment"># 返回一个函数（返回值高阶函数）</span></span><br></pre></td></tr></table></figure><p>其实，函数 x 就可以作为一个装饰器。</p><p>接下来用 x 来装饰另一个函数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x</span>(<span class="params">fuc</span>):</span> <span class="comment"># 参数为函数（实参高阶函数）</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">y</span>():</span> <span class="comment"># 嵌套函数</span></span><br><span class="line">        fuc()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;hai&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> y <span class="comment"># 返回一个函数（返回值高阶函数）</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span> <span class="comment"># 被装饰函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">test = X(test)</span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>运行代码，结果依次输出 “hello”，”hi”。</p><span id="more"></span><p>test() 是被装饰函数，其实被装饰函数就是装饰器的参数。上面的代码可以等价于：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x</span>(<span class="params">fuc</span>):</span> <span class="comment"># 参数为函数（实参高阶函数）</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">y</span>():</span> <span class="comment"># 嵌套函数</span></span><br><span class="line">        fuc()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;hai&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> y <span class="comment"># 返回一个函数（返回值高阶函数）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@x </span><span class="comment"># 语法糖</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span> <span class="comment"># 被装饰函数</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hello&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">test()</span><br></pre></td></tr></table></figure><p>这两个程序的运行结果是一样的。<code>@x</code> 就是 <code>test = x(test)</code> 的语法糖。</p><br/><h5 id="被装饰函数有参数"><a href="#被装饰函数有参数" class="headerlink" title="被装饰函数有参数"></a>被装饰函数有参数</h5><p>那如果被装饰函数有参数，那怎么传到装饰器中呢？</p><p>我们知道，test = x(test)，而 x 返回了函数 y，那么就有 test = y。所以 给 test 传参数的同时也给 y 传入参数就可以了，而参数 fuc 接收 test，因此 fuc 也要传入参数。为了使程序更加有扩展性，因此在装饰器中的 y() 和 func()，加如了可变参数 *args 和 **kwargs。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x</span>(<span class="params">fuc</span>):</span> <span class="comment"># 参数为函数（实参高阶函数）</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">y</span>(<span class="params">*args, **kwargs</span>):</span> <span class="comment"># 嵌套函数</span></span><br><span class="line">        fuc(*args, **kwargs)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;hai&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> y <span class="comment"># 返回一个函数（返回值高阶函数）</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@x </span><span class="comment"># 语法糖</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a, b, **c</span>):</span> <span class="comment"># 被装饰函数</span></span><br><span class="line">    <span class="built_in">print</span>(a, b, c)</span><br><span class="line">    </span><br><span class="line">test(<span class="number">1</span>, <span class="number">2</span>, p=<span class="number">5</span>)</span><br></pre></td></tr></table></figure><p>结果输出：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 2 &#123;&#x27;p&#x27;: 5&#125;</span><br><span class="line">hahaha</span><br></pre></td></tr></table></figure><br/><h5 id="装饰函数有参数"><a href="#装饰函数有参数" class="headerlink" title="装饰函数有参数"></a>装饰函数有参数</h5><p>有的装饰器带有参数，像这样:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@decorator(<span class="params">parameter = value</span>)</span></span><br></pre></td></tr></table></figure><p>但是装饰器传入的是函数，那么这个参数如何传到装饰器中呢？我们可以再加一层函数来接收这个参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">x</span>(<span class="params">parameter</span>):</span> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">f</span>(<span class="params">fuc</span>):</span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">y</span>(<span class="params">*args, **kwargs</span>):</span> </span><br><span class="line">            fuc(*args, **kwargs)</span><br><span class="line">            <span class="built_in">print</span>(parameter)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;hai&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> y </span><br><span class="line">    <span class="keyword">return</span> f</span><br><span class="line"></span><br><span class="line"><span class="meta">@x(<span class="params">parameter=<span class="string">&#x27;&#x27;</span></span>) </span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>(<span class="params">a, b, **c</span>):</span> </span><br><span class="line">    <span class="built_in">print</span>(a, b, c)</span><br></pre></td></tr></table></figure><p>关于更详细的介绍，请参考 <a href="https://qzmvc1.top/Python%E8%A3%85%E9%A5%B0%E5%99%A8%E7%9A%84%E9%80%9A%E4%BF%97%E7%90%86%E8%A7%A3.html">Python装饰器的通俗理解</a>。</p><hr><h3 id="常见装饰器介绍"><a href="#常见装饰器介绍" class="headerlink" title="常见装饰器介绍"></a>常见装饰器介绍</h3><h5 id="classmethod"><a href="#classmethod" class="headerlink" title="@classmethod"></a>@classmethod</h5><p><strong>classmethod</strong> 修饰符对应的函数不需要实例化，不需要 self 参数，但第一个参数需要是表示自身类的 cls 参数，可以来调用类的属性，类的方法，实例化对象等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        self.a = <span class="number">1</span></span><br><span class="line">        self.b = <span class="number">2</span></span><br><span class="line">        </span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">cls</span>):</span></span><br><span class="line">        <span class="keyword">return</span> cls().a + cls().b</span><br><span class="line">    </span><br><span class="line">res = Test.add() <span class="comment"># 不需要实例化可直接调用</span></span><br><span class="line"><span class="built_in">print</span>(res) <span class="comment"># 输出 3</span></span><br></pre></td></tr></table></figure><h5 id="staticmethod"><a href="#staticmethod" class="headerlink" title="@staticmethod"></a>@staticmethod</h5><p><strong>staticmethod</strong> 修饰符对应的函数不需要实例化，不需要 self 参数，也不需要表示自身类的 cls 参数，就跟使用函数一样。</p><p>staticmethod 基本可以被 classmethod 代替。</p><h5 id="property"><a href="#property" class="headerlink" title="@property"></a>@property</h5><p><strong>property</strong> 装饰器用来创建只读属性，它会将函数转换为相同名称的<strong>只读属性</strong>，这样可以防止属性被修改。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span>    </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span>        </span><br><span class="line">        self.a = <span class="number">1</span>        </span><br><span class="line">        self.b = <span class="number">2</span>  </span><br><span class="line">        </span><br><span class="line"><span class="meta">        @property    </span></span><br><span class="line">        <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self</span>):</span>        </span><br><span class="line">            <span class="keyword">return</span> self.a + self.b</span><br><span class="line">        </span><br><span class="line">test = Test()</span><br><span class="line"><span class="built_in">print</span>(test.add) <span class="comment"># 像调用变量一样</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 装饰器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python类的特殊成员方法</title>
      <link href="/2021/12/11/python%E5%9F%BA%E7%A1%80/python%E7%B1%BB%E7%9A%84%E7%89%B9%E6%AE%8A%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95/"/>
      <url>/2021/12/11/python%E5%9F%BA%E7%A1%80/python%E7%B1%BB%E7%9A%84%E7%89%B9%E6%AE%8A%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="module"><a href="#module" class="headerlink" title="module"></a><strong>module</strong></h3><p>表示当前操作的对象在哪个模块，即所在包的包名，若不在包中，则为”<strong>main</strong>“。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> A.B <span class="keyword">import</span> C</span><br><span class="line"></span><br><span class="line">c = C()</span><br><span class="line"><span class="built_in">print</span>(c.__module__)  <span class="comment"># A.B</span></span><br></pre></td></tr></table></figure><br/><h3 id="class"><a href="#class" class="headerlink" title="class"></a><strong>class</strong></h3><p>表示当前操作的对象的类是什么。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> A.B <span class="keyword">import</span> C</span><br><span class="line"></span><br><span class="line">c = C()</span><br><span class="line"><span class="built_in">print</span>(c.__class__)  <span class="comment"># A.B.C</span></span><br></pre></td></tr></table></figure><br/><span id="more"></span><h3 id="init-，del"><a href="#init-，del" class="headerlink" title="init ，del"></a><strong>init</strong> ，<strong>del</strong></h3><p>__init__：构造方法，通过类创建对象时，自动触发执行。</p><p>__del__：析构方法，当对象在内存中被释放时，自动触发执行</p><p>创建对象后，Python 解释器默认调用 <strong>init</strong> 方法。当删除一个对象时，Python 解释器也会默认调用 <strong>del</strong> 方法。</p><p>一般情况下，创建了一个类的对象之后，如果该对象在之后的代码中不会被调用，那么 python 的内存管理机制会自动删除它。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;init&#x27;</span>)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;del&#x27;</span>)</span><br><span class="line">        </span><br><span class="line">a = A() <span class="comment"># 输出：init del</span></span><br></pre></td></tr></table></figure><br/><h3 id="call"><a href="#call" class="headerlink" title="call"></a><strong>call</strong></h3><p><strong>call</strong>() 允许一个类的实例像函数一样被调用。看如下例子：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, a, b</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="built_in">print</span>(self.a, self.b)</span><br><span class="line">        </span><br><span class="line">a = A(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">a() <span class="comment"># 输出：1 2</span></span><br></pre></td></tr></table></figure><p>实质上说，这意味着 a() 与 a.<strong>call</strong>() 是相同的。</p><br/><h3 id="dict"><a href="#dict" class="headerlink" title="dict"></a><strong>dict</strong></h3><p>类名.__dict__：查看类中的所有成员。</p><p>对象.__dict__：查看对象中的所有成员。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line">    b = <span class="number">2</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self, a, b</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.a = a</span><br><span class="line">        self.b = b</span><br><span class="line">        self.x = self.add</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">self</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.a + self.b</span><br><span class="line">    </span><br><span class="line">a = A(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(a.__dict__) </span><br><span class="line"><span class="comment"># 输出：&#123;&#x27;a&#x27;: 1, &#x27;b&#x27;: 2, &#x27;x&#x27;: &lt;bound method A.add of &lt;__main__.A object at 0x000001D8D9AB8E80&gt;&gt;&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(A.__dict__)</span><br><span class="line"><span class="comment"># 输出：&#123;&#x27;a&#x27;:1, &#x27;b&#x27;:2, &#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;__init__&#x27;: &lt;function A.__init__ at 0x0000023824F69B80&gt;, &#x27;add&#x27;: &lt;function A.add at 0x0000023824F78040&gt;, &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;A&#x27; objects&gt;, &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;A&#x27; objects&gt;, &#x27;__doc__&#x27;: None&#125;</span></span><br></pre></td></tr></table></figure><br/><h3 id="str"><a href="#str" class="headerlink" title="str"></a><strong>str</strong></h3><p>如果一个类中定义了__str__ 方法，那么在打印对象时，默认输出该方法的返回值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span>(<span class="params">self</span>) -&gt; <span class="built_in">str</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello world&quot;</span></span><br><span class="line">    </span><br><span class="line">a = A()</span><br><span class="line"><span class="built_in">print</span>(a) <span class="comment"># 输出： hello world</span></span><br></pre></td></tr></table></figure><br/><h3 id="getitem-，-setitem-，-delitem"><a href="#getitem-，-setitem-，-delitem" class="headerlink" title="getitem__，__setitem__，__delitem"></a><strong>getitem__，__setitem__，__delitem</strong></h3><p>使得对象能够以字典的方式获取、设置、删除数据。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.dic = &#123;</span><br><span class="line">            <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;silence&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;age&#x27;</span>: <span class="number">22</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getitem__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        <span class="keyword">return</span> self.dic[key]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setitem__</span>(<span class="params">self, key, value</span>):</span></span><br><span class="line">        self.dic[key] = value</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delitem__</span>(<span class="params">self, key</span>):</span></span><br><span class="line">        <span class="keyword">del</span> self.dic[key]</span><br><span class="line">        </span><br><span class="line">a = A()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(a[<span class="string">&#x27;name&#x27;</span>]) <span class="comment"># 输出：silence</span></span><br><span class="line"></span><br><span class="line">a[<span class="string">&#x27;sex&#x27;</span>] = <span class="string">&#x27;male&#x27;</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">del</span> a[<span class="string">&#x27;age&#x27;</span>]</span><br></pre></td></tr></table></figure><br/><h3 id="getattr-，-setattr"><a href="#getattr-，-setattr" class="headerlink" title="getattr__，__setattr"></a><strong>getattr__，__setattr</strong></h3><p>python 提供了诸多的魔法方法，比如 <strong>getattr</strong> 可以将其他类中的属性为自己所用，<strong>setattr</strong> 允许向对象中添加属性。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">cls, a, b</span>):</span></span><br><span class="line">        <span class="keyword">return</span> a+b</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span>(<span class="params">self</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.a = B()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span>(<span class="params">self, name</span>):</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getattr</span>(self.a, name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span>(<span class="params">self, __name: <span class="built_in">str</span>, __value</span>) -&gt; <span class="literal">None</span>:</span></span><br><span class="line">        self.__dict__[__name] = __value</span><br><span class="line">        </span><br><span class="line">a = A()</span><br><span class="line"><span class="built_in">print</span>(a.add(<span class="number">1</span>, <span class="number">2</span>)) <span class="comment"># 输出：3</span></span><br><span class="line"></span><br><span class="line">a.x = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(a.x) <span class="comment"># 输出：10</span></span><br></pre></td></tr></table></figure><p>我们先在 A 类的初始化函数中实例化一个 B 类的对象 a，然后将 a 作为 getattr 方法的参数，那么当执行 <code>a.add(1, 2)</code> 时，发现 A 类中并没有这个属性，这时就会自动调用 <strong>getattr</strong> 方法，从对象 a 对应的类 B 中调用 add 方法。</p><p>注意：<strong>getattr</strong> 方法一定是在本类中找不到属性时才会调用。</p><p><strong>setattr</strong> 方法通过 <strong>dict</strong> 实现。因为对象的属性都保存在 <strong>dict</strong> 中，那么通过向 <strong>dict</strong> 中添加属性就可以实现向对象中添加属性。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flask操作数据库</title>
      <link href="/2021/12/08/Flask/Flask%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
      <url>/2021/12/08/Flask/Flask%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">student = Student(<span class="built_in">id</span>=<span class="built_in">id</span>, name=name, age=age)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    db.session.add(student)</span><br><span class="line">    db.session.commit()</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="comment"># 事务回滚</span></span><br><span class="line">    db.session.rollback()</span><br></pre></td></tr></table></figure><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">db.session.delete(user)</span><br><span class="line">db.session.commit()</span><br></pre></td></tr></table></figure><span id="more"></span><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查询所有⽤户数据</span></span><br><span class="line">user_list = Wdtest.query.<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询⽤户数量</span></span><br><span class="line">user_list_num = Wdtest.query.count()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询第1个⽤户</span></span><br><span class="line">user= Wdtest.query.first()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询id为3的⽤户[3种⽅式]</span></span><br><span class="line">user = Wdtest.query.get(<span class="number">3</span>)  <span class="comment"># 根据主键查询</span></span><br><span class="line">user_list = Wdtest.query.filter_by(<span class="built_in">id</span>=<span class="number">3</span>).<span class="built_in">all</span>()  <span class="comment"># 以关键字实参形式进行匹配字段</span></span><br><span class="line">user_list = Wdtest.query.<span class="built_in">filter</span>(Wdtest.<span class="built_in">id</span> == <span class="number">3</span>).<span class="built_in">all</span>()  <span class="comment"># 以恒等式形式匹配字段</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询名字结尾字符为g的所有⽤户</span></span><br><span class="line">Wdtest.query.<span class="built_in">filter</span>(Wdtest.name.endswith(<span class="string">&#x27;g&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查询名字包含‘wa&#x27;的所有用户</span></span><br><span class="line">user_list = Wdtest.query.<span class="built_in">filter</span>(Wdtest.name.contains(<span class="string">&#x27;wa&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模糊查询</span></span><br><span class="line">user_list = Wdtest.query.<span class="built_in">filter</span>(Wdtest.name.like(<span class="string">&#x27;%a%&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 与</span></span><br><span class="line">user_list = Wdtest.query.<span class="built_in">filter</span>(Wdtest.name.startswith(<span class="string">&#x27;wa&#x27;</span>), Wdtest.age == <span class="number">20</span>).<span class="built_in">all</span>()</span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> and_</span><br><span class="line">user_list = Wdtest.query.<span class="built_in">filter</span>(and_(Wdtest.name.startswith(<span class="string">&#x27;wa&#x27;</span>), Wdtest.age == <span class="number">20</span>)).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> or_</span><br><span class="line">user_list = Wdtest.query.<span class="built_in">filter</span>(or_(Wdtest.name.startswith(<span class="string">&#x27;wa&#x27;</span>), Wdtest.age == <span class="number">20</span>)).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 非</span></span><br><span class="line"><span class="keyword">from</span> sqlalchemy <span class="keyword">import</span> not_</span><br><span class="line">user_list = Wdtest.query.<span class="built_in">filter</span>(not_(Wdtest.name == <span class="string">&#x27;wade&#x27;</span>)).<span class="built_in">all</span>()</span><br><span class="line">user_list = Wdtest.query.<span class="built_in">filter</span>(Wdtest.name != <span class="string">&#x27;wade&#x27;</span>).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># in 条件查询</span></span><br><span class="line">user_list = Wdtest.query.<span class="built_in">filter</span>(Wdtest.<span class="built_in">id</span>.in_([<span class="string">&#x27;97124f50-0208-11ea-a66c-04ea56212bdf&#x27;</span>, <span class="string">&#x27;3&#x27;</span>])).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 所有⽤户先按年龄从⼩到⼤, 再按id从⼤到⼩排序, 取前5个</span></span><br><span class="line">user_list = Wdtest.query.order_by(Wdtest.age, Wdtest.<span class="built_in">id</span>.desc()).limit(<span class="number">5</span>).<span class="built_in">all</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 分⻚查询, 每⻚3个, 查询第2⻚的数据</span></span><br><span class="line">pn = Wdtest.query.paginate(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(pn.pages)</span><br><span class="line"><span class="built_in">print</span>(pn.page)</span><br><span class="line"><span class="built_in">print</span>(pn.items)</span><br></pre></td></tr></table></figure><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">user = User.query.first()</span><br><span class="line">user.name = <span class="string">&#x27;silence&#x27;</span></span><br><span class="line">db.session.commit()</span><br><span class="line">User.query.first()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">User.query.filter_by(name=<span class="string">&#x27;zhang&#x27;</span>).update(&#123;<span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;silence&#x27;</span>&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>__init__.py的作用</title>
      <link href="/2021/12/08/python%E5%9F%BA%E7%A1%80/init-py%E7%9A%84%E4%BD%9C%E7%94%A8/"/>
      <url>/2021/12/08/python%E5%9F%BA%E7%A1%80/init-py%E7%9A%84%E4%BD%9C%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>拥有 <strong>init</strong>.py 文件的文件夹被视为包（模块），可以通过 import 正常导入包内的文件，否则，会报 ImportError 错误。</p><p>当 import 包或包内模块的时候，会先执行 <strong>init</strong>.py 文件中的代码，因此可以通过 <strong>init</strong>.py 组织包内各个子模块，然后在包外文件导入它们时更加方便简洁。我们来看一个例子：</p><p>目录结构如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- app</span><br><span class="line">- __init__.py</span><br><span class="line">- add.py</span><br><span class="line">- sub.py</span><br><span class="line">- main.py</span><br></pre></td></tr></table></figure><span id="more"></span><p>add.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a + b</span><br></pre></td></tr></table></figure><p>sub.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sub</span>(<span class="params">a, b</span>):</span></span><br><span class="line">    <span class="keyword">return</span> a - b</span><br></pre></td></tr></table></figure><p>main.py</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app.add <span class="keyword">import</span> add</span><br><span class="line"><span class="keyword">from</span> app.sub <span class="keyword">import</span> sub</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>, <span class="number">2</span>), sub(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure><p>接下来我们在 <strong>init</strong>.py 中写一些代码：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .add <span class="keyword">import</span> add</span><br><span class="line"><span class="keyword">from</span> .sub <span class="keyword">import</span> sub</span><br></pre></td></tr></table></figure><p>那此时 main.py 中就可以这样写：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> app <span class="keyword">import</span> add, sub</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(add(<span class="number">1</span>, <span class="number">2</span>), sub(<span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>移动Web适配</title>
      <link href="/2021/12/06/Vue/%E7%A7%BB%E5%8A%A8Web%E9%80%82%E9%85%8D/"/>
      <url>/2021/12/06/Vue/%E7%A7%BB%E5%8A%A8Web%E9%80%82%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<h3 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h3><h5 id="设备像素或逻辑像素"><a href="#设备像素或逻辑像素" class="headerlink" title="设备像素或逻辑像素"></a>设备像素或逻辑像素</h5><p>指设备能控制显示的最小物理单位，意指屏幕上一个个的点。</p><h5 id="CSS像素或设备独立像素"><a href="#CSS像素或设备独立像素" class="headerlink" title="CSS像素或设备独立像素"></a>CSS像素或设备独立像素</h5><p>指CSS样式代码中使用的逻辑像素，即 px（在iPhone中单位为pt）。</p><h5 id="像素密度（PPI）"><a href="#像素密度（PPI）" class="headerlink" title="像素密度（PPI）"></a>像素密度（PPI）</h5><p>指设备能控制显示的最小物理单位，意指屏幕上一个个的点（=设备像素或逻辑像素）。PPI 越高，分辨率也就越高。</p><h5 id="像素比（DPR）"><a href="#像素比（DPR）" class="headerlink" title="像素比（DPR）"></a>像素比（DPR）</h5><p>像素比 = 设备像素 / CSS像素。</p><h5 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h5><p>rem 是一个相对单位，区别于 em(相对于父亲的字体大小) ，它是相对于 html 的字体大小单位。</p><br/><span id="more"></span><h3 id="适配方案"><a href="#适配方案" class="headerlink" title="适配方案"></a>适配方案</h3><p>这里列举两种方案，其原理相同：</p><p>设置样式的长度单位为 rem，然后通过监听浏览器窗口大小的变化，实时改变根元素字体大小，那么 1rem 所对应的 px 值也随之变化，达到适配各种终端的目的。</p><h4 id="postcss-pxtorem-flexible-js"><a href="#postcss-pxtorem-flexible-js" class="headerlink" title="postcss-pxtorem + flexible.js"></a>postcss-pxtorem + flexible.js</h4><p>这个方法适用于 WebStorm。</p><h5 id="1-安装-postcss-pxtorem"><a href="#1-安装-postcss-pxtorem" class="headerlink" title="1. 安装 postcss-pxtorem"></a>1. 安装 postcss-pxtorem</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i postcss-pxtorem@5.1.1 --save</span><br></pre></td></tr></table></figure><p>注意，高版本的 postcss-pxtorem 会导致报错。</p><h5 id="2-配置-package-json-文件"><a href="#2-配置-package-json-文件" class="headerlink" title="2. 配置 package.json 文件"></a>2. 配置 package.json 文件</h5><p>在 package.json 文件中添加如下内容：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;postcss&quot;</span>: &#123;</span><br><span class="line">    <span class="attr">&quot;plugins&quot;</span>: &#123;</span><br><span class="line">      <span class="attr">&quot;autoprefixer&quot;</span>: &#123;&#125;,</span><br><span class="line">      <span class="attr">&quot;postcss-pxtorem&quot;</span>: &#123;</span><br><span class="line">          <span class="attr">&quot;rootValue&quot;</span>: <span class="number">16</span>,</span><br><span class="line">          <span class="attr">&quot;propList&quot;</span>: [<span class="string">&quot;*&quot;</span>],</span><br><span class="line">          <span class="attr">&quot;minPixelValue&quot;</span>: <span class="number">2</span>,</span><br><span class="line">          <span class="attr">&quot;selectorBlackList&quot;</span>: [],</span><br><span class="line">          <span class="attr">&quot;unitPrecision&quot;</span>: <span class="number">5</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>其中，<code>plugins</code> 字段中包含的是 postcss 的各种插件。我们来看 postcss-pxtorem 的配置项：</p><ul><li>rootValue：根元素字体大小，浏览器默认为 16px</li><li>propList：哪些属性需要转换成 rem，这里是全部</li><li>minPixelValue：就是最小转换单位，这里为 2px，小于 2px 不进行转换</li><li>selectorBlackList：是一个对 css 选择器进行过滤的数组，比如设置为[‘fs’]，那么例如 fs-xl 类型，里面有关 px 的样式将不被转化，这里也支持正则</li><li>unitPrecision：表示转换为 rem 后保留几位小数</li></ul><p>postcss-pxtorem 的作用是将 px 转换为 rem，即使我们的代码中用的是 px 单位，在编译时也会自动将 px 转换为 rem。它转换的标准基于 “rootValue” ，rootValue 的值为多少那么 1rem 就等于多少。</p><h5 id="3-安装-flexible-js"><a href="#3-安装-flexible-js" class="headerlink" title="3. 安装 flexible.js"></a>3. 安装 flexible.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install lib-flexible --save</span><br></pre></td></tr></table></figure><p> 打开 flexible.js，编辑源码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">refreshRem</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> width = docEl.getBoundingClientRect().width;</span><br><span class="line">    <span class="comment">// if (width / dpr &gt; 540) &#123;</span></span><br><span class="line">    <span class="comment">//     width = 540 * dpr;</span></span><br><span class="line">    <span class="comment">// &#125;  将这行代码注释</span></span><br><span class="line">    <span class="keyword">var</span> rem = width / <span class="number">10</span>; <span class="comment">// 根据需求将 10 换成其他数值</span></span><br><span class="line">    docEl.style.fontSize = rem + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    flexible.rem = win.rem = rem;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置 body 的字体大小，目的是使根字体大小不影响页面默认字体大小</span></span><br><span class="line"><span class="comment">// 我们可以将 12 改为 16（浏览器默认字体大小）</span></span><br><span class="line"><span class="keyword">if</span> (doc.readyState === <span class="string">&#x27;complete&#x27;</span>) &#123;</span><br><span class="line">    doc.body.style.fontSize = <span class="number">12</span> * dpr + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    doc.addEventListener(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">        doc.body.style.fontSize = <span class="number">12</span> * dpr + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">    &#125;, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="4-在-main-js-文件中引入-flexible-js"><a href="#4-在-main-js-文件中引入-flexible-js" class="headerlink" title="4. 在 main.js 文件中引入 flexible.js"></a>4. 在 main.js 文件中引入 flexible.js</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&#x27;lib-flexible/flexible&#x27;</span></span><br></pre></td></tr></table></figure><p>在  flexible.js 中，1rem  等于屏幕宽度的 1/10，假如设计稿的宽高为 1920*1080，那么 1rem = 192px。现在我们要以设计稿的标准定义一个宽高均为 300px 的 div，如果我们把 rootValue 的值设为 16，那么编译时将 300px 转换为了 18.75rem，而此时 1rem = 192px，那么最后渲染出来的 div 宽高为 1440px。但是如果把 rootValue 的值设为 192px，那么就正常了。</p><p>注意：只有写在 <code>&lt;style&gt;</code> 标签中的样式才能被转换为 rem，内联样式不被转换。</p><hr><h4 id="flexible-js-cssrem"><a href="#flexible-js-cssrem" class="headerlink" title="flexible.js + cssrem"></a>flexible.js + cssrem</h4><p>这个方法适合用于 VS Code。</p><h5 id="1-引入视口标签"><a href="#1-引入视口标签" class="headerlink" title="1. 引入视口标签"></a>1. 引入视口标签</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width,user-scalable=no initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="2-引入-flexible-js"><a href="#2-引入-flexible-js" class="headerlink" title="2. 引入 flexible.js"></a>2. 引入 flexible.js</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./flexible.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>源码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span> <span class="title">flexible</span>(<span class="params"><span class="built_in">window</span>, <span class="built_in">document</span></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> docEl = <span class="built_in">document</span>.documentElement;</span><br><span class="line">    <span class="keyword">var</span> dpr = <span class="built_in">window</span>.devicePixelRatio || <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// adjust body font size</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setBodyFontSize</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="built_in">document</span>.body) &#123;</span><br><span class="line">            <span class="built_in">document</span>.body.style.fontSize = <span class="number">12</span> * dpr + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">document</span>.addEventListener(<span class="string">&quot;DOMContentLoaded&quot;</span>, setBodyFontSize);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    setBodyFontSize();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// set 1rem = viewWidth / 10</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setRemUnit</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> rem = docEl.clientWidth / <span class="number">10</span>;</span><br><span class="line">        docEl.style.fontSize = rem + <span class="string">&quot;px&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setRemUnit();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// reset rem unit on page resize</span></span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;resize&quot;</span>, setRemUnit);</span><br><span class="line">    <span class="built_in">window</span>.addEventListener(<span class="string">&quot;pageshow&quot;</span>, <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (e.persisted) &#123;</span><br><span class="line">            setRemUnit();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// detect 0.5px supports</span></span><br><span class="line">    <span class="keyword">if</span> (dpr &gt;= <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> fakeBody = <span class="built_in">document</span>.createElement(<span class="string">&quot;body&quot;</span>);</span><br><span class="line">        <span class="keyword">var</span> testElement = <span class="built_in">document</span>.createElement(<span class="string">&quot;div&quot;</span>);</span><br><span class="line">        testElement.style.border = <span class="string">&quot;.5px solid transparent&quot;</span>;</span><br><span class="line">        fakeBody.appendChild(testElement);</span><br><span class="line">        docEl.appendChild(fakeBody);</span><br><span class="line">        <span class="keyword">if</span> (testElement.offsetHeight === <span class="number">1</span>) &#123;</span><br><span class="line">            docEl.classList.add(<span class="string">&quot;hairlines&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        docEl.removeChild(fakeBody);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)(<span class="built_in">window</span>, <span class="built_in">document</span>);</span><br></pre></td></tr></table></figure><p>配置与上面相似。</p><h5 id="3-安装-cssrem-插件"><a href="#3-安装-cssrem-插件" class="headerlink" title="3. 安装 cssrem 插件"></a>3. 安装 cssrem 插件</h5><p>在 VS Code 的插件选项中搜索，然后点击安装。</p><p>找到 cssrem 插件的设置，按照需要对里面的配置项进行配置。</p><p>设置完之后，在打 px 的时候会有转换成 rem 的提示框，选择对应 rem 即可。</p><p>大功告成！！！</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ArrayBuffer 介绍</title>
      <link href="/2021/10/21/JS/ArrayBuffer-%E4%BB%8B%E7%BB%8D/"/>
      <url>/2021/10/21/JS/ArrayBuffer-%E4%BB%8B%E7%BB%8D/</url>
      
        <content type="html"><![CDATA[<p><strong>ArrayBuffer</strong> 表示二进制数据的原始缓冲区，该缓冲区用于存储各种类型化数组的数据。是最基础的原始数据容器，无法直接读取或写入， 需要通过其他方式来读写。如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Int8Array             8位有符号整数</span><br><span class="line">Uint8Array            8位无符号整数</span><br><span class="line">Uint8ClampedArray     8位无符号整数，像素操作</span><br><span class="line"></span><br><span class="line">Int16Array            16位有符号整数</span><br><span class="line">Uint16Array           16位无符号整数</span><br><span class="line">...</span><br></pre></td></tr></table></figure><span id="more"></span><p>ArrayBuffer 的构造函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ArrayBuffer</span>(length)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 参数 length：要创建的 ArrayBuffer 的大小，单位为字节</span></span><br><span class="line"><span class="comment">// 返回值：一个指定大小的 ArrayBuffer 对象，其内容被初始化为 </span></span><br></pre></td></tr></table></figure><p>方法：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">ArrayBuffer</span>.slice() <span class="comment">// 切片</span></span><br></pre></td></tr></table></figure><p>接下来通过一个例子来直观地了解它的用法。比如我们上传一个文件，读取文件内容并将其转换为字符串：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">FileToString</span>(<span class="params">file</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> r = <span class="keyword">new</span> FileReader();  <span class="comment">// 初始化一个文件对象，用于读取文件</span></span><br><span class="line">    <span class="keyword">var</span> buffer = r.readAsArrayBuffer(file);  <span class="comment">// 将文件读取为 ArrayBuffer</span></span><br><span class="line">    <span class="keyword">var</span> uint8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer);   <span class="comment">// 创建一个 Uint8Array 来读取 ArrayBuffer</span></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;uint8arr.length; i++) &#123;</span><br><span class="line">        <span class="comment">// String.fromChatCode() 接收一个 Unicode 值，返回对应的字符</span></span><br><span class="line">        str += <span class="built_in">String</span>.fromCharCode(uint8arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们了解了 ArrayBuffer 转字符串，接下来看看如何将字符串转换为 ArrayBuffer：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">StringToBuffer</span>(<span class="params">str</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> buffer = <span class="keyword">new</span> <span class="built_in">ArrayBuffer</span>(str.length);  <span class="comment">// 创建一个长度为字符串长度，值为0的 ArrayBuffer</span></span><br><span class="line">    <span class="keyword">var</span> uint8arr = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(buffer);     <span class="comment">// 创建一个 Uint8Array</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;str.length; i++) &#123;</span><br><span class="line">        <span class="comment">// charCodeAt(index) 方法接收一个下标，返回下标对应字符的 Unicode 值</span></span><br><span class="line">        uint8arr[i] = str.charCodeAt(i);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> buffer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> ArrayBuffer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js 实现文件下载</title>
      <link href="/2021/10/21/JS/js-%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
      <url>/2021/10/21/JS/js-%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>由于 js 无法对文件直接操作，所以通过 js 下载文件的原理是创建一个 <link> 标签，然后让其执行 click() 方法来进行下载。</p><p>具体代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 假设 data 为后台返回的 ArrayBuffer</span></span><br><span class="line"><span class="keyword">let</span> link = <span class="built_in">document</span>.createElement(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line">link.href = <span class="built_in">window</span>.URL.createObjectURL(<span class="keyword">new</span> Blob([data]));</span><br><span class="line">link.download = file.name;</span><br><span class="line">link.click();</span><br><span class="line"><span class="built_in">window</span>.URL.revokeObjectURL(str2ab(sm4_decrypt_str));</span><br></pre></td></tr></table></figure><p>我们这里用到了 <strong>Blob</strong> 类，接下来就来讲一下 Blob 的用法。</p><span id="more"></span><h5 id="Blob-介绍"><a href="#Blob-介绍" class="headerlink" title="Blob 介绍"></a>Blob 介绍</h5><p><strong>Blob</strong> 对象表示一个不可变、原始数据的类文件对象。它的数据可以按文本或二进制的格式进行读取。</p><p>要从其他非 blob 对象和数据构造一个 Blob，要使用 <code>Blob()</code>  构造函数。要创建一个 blob 数据的子集 blob，使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Blob/slice"><code>slice()</code></a> 方法。</p><p>其实，<strong>File</strong> 就是 Blob 的一个子类，File 对象也是一个 Blob 对象。</p><p>我们上传文件时文件就是一个 File 对象或者是一个 Blob 对象。</p><h5 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Blob(blobParts[, options])</span><br></pre></td></tr></table></figure><p>这里有两个参数：</p><ul><li>第一个参数是要被构建成 Blob 的数据，是一个数组，通常为 ArrayBuffer 或 二进制流</li><li>第二个参数是可选的选项，例如 <code>&#123; type: &#39;image/jpeg&#39; &#125;</code></li></ul><h5 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h5><p>Blob.size：对象中所包含数据的大小（字节）。</p><p>Blob.type：一个字符串，表明该 Blob 对象所包含数据的 MIME 类型。如果类型未知，则该值为空字符串。</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js 上传图片并预览</title>
      <link href="/2021/10/21/JS/js-%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%B9%B6%E9%A2%84%E8%A7%88/"/>
      <url>/2021/10/21/JS/js-%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%B9%B6%E9%A2%84%E8%A7%88/</url>
      
        <content type="html"><![CDATA[<p>选择图片（其他任何文件）其实就是点击 <code>type=file</code> 的 input 标签，然后在 js 中获取。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;.jpg,.docx,.pdf&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><code>multiple</code> 属性允许同时选择多个文件，但只能一次性选择，再次点击按钮会覆盖掉之前选择的文件。</p><p><code>accept</code> 属性声明了可选择文件的类型。</p><h3 id="图片预览"><a href="#图片预览" class="headerlink" title="图片预览"></a>图片预览</h3><p>本地预览图片就是为获得的图片创建一个 url，然后通过 img 标签将其显示出来。</p><p>具体代码如下：</p><span id="more"></span><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file_input&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;submit()&quot;</span>&gt;</span>选择文件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">submit</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> input = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;file_input&#x27;</span>);</span></span><br><span class="line"><span class="javascript">        input.click();</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">        <span class="comment">// 监听 input 值的变化</span></span></span><br><span class="line"><span class="javascript">        input.onchange = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> file = event.currentTarget.files[<span class="number">0</span>];  <span class="comment">// 获取文件</span></span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// file 的属性</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> name = file.name;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> type = file.type;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> size = file.size;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 创建 &lt;img&gt; 标签</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">let</span> image = <span class="built_in">document</span>.createElement(<span class="string">&#x27;img&#x27;</span>); <span class="comment">// 也可以写为：let image = new Image()</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 图片加载成功执行</span></span></span><br><span class="line"><span class="javascript">            image.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">console</span>.log(<span class="string">&#x27;success&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 为 img 标签设置样式</span></span></span><br><span class="line"><span class="javascript">            image.src = <span class="built_in">window</span>.URL.createObjectURL(file);</span></span><br><span class="line"><span class="javascript">            image.width = <span class="number">100</span>;</span></span><br><span class="line"><span class="javascript">            image.height = <span class="number">100</span>;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 添加到 body 中，不然显示不出来</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.body.appendChild(image);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h3><h5 id="使用原生组件上传"><a href="#使用原生组件上传" class="headerlink" title="使用原生组件上传"></a>使用原生组件上传</h5><p>向后端发送文件时一般使用 <code>application/form-data</code> 的形式，如果我们不想用表单发送，可以通过 <code>FormData</code> 类对数据进行包裹，以达到和表单发送一样的效果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">multiple</span>=<span class="string">&quot;multiple&quot;</span> <span class="attr">accept</span>=<span class="string">&quot;.jpg,.png&quot;</span> @<span class="attr">change</span>=<span class="string">&quot;change&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">change</span>(<span class="params">event</span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 原生js获取的DOM集合是一个类数组对象，所以不能直接利用数组的方法，需转换</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> files = <span class="built_in">Array</span>.from(event.currentTarget.files);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">        files.forEach(<span class="keyword">async</span> file =&gt; &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData();</span></span><br><span class="line"><span class="javascript">            formData.append(<span class="string">&#x27;file&#x27;</span>, file, file.name);</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> &#123;data&#125; = <span class="keyword">await</span> axios.post(<span class="string">&#x27;http://127.0.0.1:5000/request&#x27;</span>, formData);</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(data);</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="使用-el-upload-上传"><a href="#使用-el-upload-上传" class="headerlink" title="使用 el-upload 上传"></a>使用 el-upload 上传</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">el-button</span> @<span class="attr">click</span>=<span class="string">&quot;submit&quot;</span>&gt;</span>上传<span class="tag">&lt;/<span class="name">el-button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">el-upload</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">ref</span>=<span class="string">&quot;upload&quot;</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">action</span>=<span class="string">&quot;&quot;</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">:auto-upload</span>=<span class="string">&quot;false&quot;</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">drag</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">:file-list</span>=<span class="string">&quot;fileList&quot;</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">multiple</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">:http-request</span>=<span class="string">&quot;upload&quot;</span> </span></span><br><span class="line"><span class="tag">           <span class="attr">list-type</span>=<span class="string">&quot;picture&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;el-icon-upload&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;el-upload__text&quot;</span>&gt;</span>将文件拖到此处，或<span class="tag">&lt;<span class="name">em</span>&gt;</span>点击上传<span class="tag">&lt;/<span class="name">em</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">el-upload</span>&gt;</span></span><br></pre></td></tr></table></figure><p>el-upload 默认自动向 action 的 url 发送请求，如果想手动发送文件，可以进行如上的配置。</p><p>需要注意的是， <code>this.$refs.upload.submit()</code> 方法会自动触发 <code>:http-request</code> 绑定的函数。</p><p>js 代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">submit</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$refs.upload.submit();</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="title">upload</span>(<span class="params">data</span>)</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line">  formData.append(<span class="string">&#x27;file&#x27;</span>, data.file);</span><br><span class="line">  <span class="keyword">const</span> res = <span class="keyword">await</span> axios.post(<span class="string">&#x27;http://192.168.31.196:5000/request&#x27;</span>, formData);</span><br><span class="line">  <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>jQuery Ajax 请求报错“Illegal invocation”</title>
      <link href="/2021/10/21/JS/jQuery-Ajax-%E8%AF%B7%E6%B1%82%E6%8A%A5%E9%94%99%E2%80%9CIllegal-invocation%E2%80%9D/"/>
      <url>/2021/10/21/JS/jQuery-Ajax-%E8%AF%B7%E6%B1%82%E6%8A%A5%E9%94%99%E2%80%9CIllegal-invocation%E2%80%9D/</url>
      
        <content type="html"><![CDATA[<h5 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h5><p>在使用 jQuery 封装的 ajax 请求发送图片等一系列文件时，使用 <code>FormData</code> 传入数据作为 <code>data</code> 的属性值，会出现这个错误。</p><h5 id="报错原因"><a href="#报错原因" class="headerlink" title="报错原因"></a>报错原因</h5><p>jQuery 封装的 ajax 里面的 Content-Type 属性默认为 true，它会设置请求头中 <code>Content-Type= &quot;application/x-www-form-urlencoded&quot;</code>。而使用 FormData 传输数据时默认的 Content-Type 为 <code>MultiPart/form-data</code>，二者相互矛盾，所以报错。</p><span id="more"></span><h5 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h5><p>很简单，只需要的 ajax 请求中加入两行代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">contentType: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// 告诉jQuery不要去设置Content-Type请求头</span></span><br><span class="line"><span class="attr">processData</span>: <span class="literal">false</span>,</span><br><span class="line"><span class="comment">// 告诉jQuery不要去处理发送的数据</span></span><br></pre></td></tr></table></figure><p>processData 是另外一个属性，规定通过请求发送的数据是否转换为查询字符串。默认为 true，表示通过 data 选项传递进来的数据，如果是一个对象（技术上讲只要不是字符串），都会处理转化成一个查询字符串，以配合默认内容类型<code>&quot;application/x-www-form-urlencoded&quot;</code>。</p><p>我们并不希望它转换我们的数据为字符串，所以也要将它设置为 false。</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> jquery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ajax 请求</title>
      <link href="/2021/10/21/JS/Ajax-%E8%AF%B7%E6%B1%82/"/>
      <url>/2021/10/21/JS/Ajax-%E8%AF%B7%E6%B1%82/</url>
      
        <content type="html"><![CDATA[<p>我们来看一下 jquery 实现的 Ajax 请求：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = &#123;<span class="string">&#x27;data&#x27;</span>: <span class="string">&#x27;silence&#x27;</span>&#125;;</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">    <span class="attr">url</span>: <span class="string">&#x27;http://127.0.0.1:8000/hello&#x27;</span>,</span><br><span class="line">    <span class="attr">async</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;post&#x27;</span>,</span><br><span class="line">    <span class="attr">head</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;accept&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="attr">data</span>: <span class="built_in">JSON</span>.stringify(data),</span><br><span class="line">    <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">error</span>: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.responseText);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>js 发送 json 数据时，发送的是 json 字符串而不是 json 对象。比如 <code>&#123;&#39;data&#39;: &#39;silence&#39;&#125;</code> 是 json 对象，发送时会报解析 json 失败的错误。应该发送的是 <code>&quot;&#123;&#39;data&#39;: &#39;silence&#39;&#125;&quot;</code>，json 对象转换为 json 字符串可以使用 <code>JSON.stringify()</code>。</p><p>json 字符串转换为 json 对象可以使用 <code>JSON.parse()</code>。</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>js 的 format 方法实现</title>
      <link href="/2021/10/21/JS/js-%E7%9A%84-format-%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
      <url>/2021/10/21/JS/js-%E7%9A%84-format-%E6%96%B9%E6%B3%95%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>js 自身并没有字符串格式匹配功能，但是我们可以基于 replace 方法实现一个 format 方法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 字符串格式化函数</span></span><br><span class="line"><span class="built_in">String</span>.prototype.format = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="comment">// 数据长度为空，则直接返回</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">arguments</span>.length == <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 使用正则表达式，循环替换占位符数据</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> result = <span class="built_in">this</span>, i = <span class="number">0</span>; i &lt; <span class="built_in">arguments</span>.length; i++)&#123;</span><br><span class="line">    result = result.replace(<span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">&quot;\\&#123;&quot;</span> + i + <span class="string">&quot;\\&#125;&quot;</span>, <span class="string">&quot;g&quot;</span>), <span class="built_in">arguments</span>[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后我们就可以使用它：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;my name is &#123;0&#125;, my age is &#123;1&#125;&quot;</span>.format(<span class="string">&#x27;silence&#x27;</span>, <span class="string">&#x27;23&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 输出：my name is silence, my age is 23</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>XMLHttpRequest 详解</title>
      <link href="/2021/10/19/JS/XMLHttpRequest%E8%AF%A6%E8%A7%A3/"/>
      <url>/2021/10/19/JS/XMLHttpRequest%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>XMLHttpRequest（XHR）对象用于与服务器交互。通过 XMLHttpRequest 可以在不刷新页面的情况下请求特定 URL，获取数据。这允许网页在不影响用户操作的情况下，更新页面的局部内容。XMLHttpRequest 在 ajax 编程中被大量使用。</p><h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><h5 id="XMLHttpRequest-open"><a href="#XMLHttpRequest-open" class="headerlink" title="XMLHttpRequest.open()"></a>XMLHttpRequest.open()</h5><p>初始化一个请求，其有三个参数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">XMLHttpRequest.open(method, url, <span class="keyword">async</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// method：请求方法，如 post get delete 等</span></span><br><span class="line"><span class="comment">// url：请求路径</span></span><br><span class="line"><span class="comment">// async：是否异步，默认为 true</span></span><br></pre></td></tr></table></figure><span id="more"></span><h5 id="XMLHttpRequest-send"><a href="#XMLHttpRequest-send" class="headerlink" title="XMLHttpRequest.send()"></a>XMLHttpRequest.send()</h5><p>发送数据，数据格式为 json 或者 FormData 对象。如果请求是异步的，那么该方法将在请求发送后立即返回。</p><h5 id="XMLHttpRequest-setRequestHeader"><a href="#XMLHttpRequest-setRequestHeader" class="headerlink" title="XMLHttpRequest.setRequestHeader()"></a>XMLHttpRequest.setRequestHeader()</h5><p>设置 HTTP 请求头的值，每次调用只能添加一个请求头，可以多次调用。必须在 open() 方法之后、send() 方法之前调用。</p><p>其有两个参数，第一个为键，第二个为值。</p><hr><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h5 id="XMLHttpRequest-readyState"><a href="#XMLHttpRequest-readyState" class="headerlink" title="XMLHttpRequest.readyState"></a>XMLHttpRequest.readyState</h5><p>返回 一个数字，范围是 0-4，代表请求的状态码。</p><ul><li>0：XMLHttpRequest 对象创建之后，open() 方法调用之前</li><li>1：open() 方法调用之后，send() 方法调用之前</li><li>2：send() 方法被调用，并且头部和状态已经可获得</li><li>3：下载中； <code>responseText</code> 属性已经包含部分数据。</li><li>4：请求操作已完成。</li></ul><h5 id="XMLHttpRequest-response"><a href="#XMLHttpRequest-response" class="headerlink" title="XMLHttpRequest.response"></a>XMLHttpRequest.response</h5><p>包含整个响应实体。</p><h5 id="XMLHttpRequest-responseText"><a href="#XMLHttpRequest-responseText" class="headerlink" title="XMLHttpRequest.responseText"></a>XMLHttpRequest.responseText</h5><p>服务端返回的数据。</p><h5 id="XMLHttpRequest-responseURL"><a href="#XMLHttpRequest-responseURL" class="headerlink" title="XMLHttpRequest.responseURL"></a>XMLHttpRequest.responseURL</h5><p>返回经过序列化的响应 URL，如果该 URL 为空，则返回空字符串。</p><h5 id="XMLHttpRequest-status"><a href="#XMLHttpRequest-status" class="headerlink" title="XMLHttpRequest.status"></a>XMLHttpRequest.status</h5><p>返回请求的响应状态，如 200 400 500 等。</p><h5 id="XMLHttpRequest-onreadyStatechange"><a href="#XMLHttpRequest-onreadyStatechange" class="headerlink" title="XMLHttpRequest.onreadyStatechange"></a>XMLHttpRequest.onreadyStatechange</h5><p>该属性是一个函数，当 readyState 属性发生变化时调用，定义在 open() 方法之前。</p><hr><h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><h5 id="XMLHttpRequest-onloadstart"><a href="#XMLHttpRequest-onloadstart" class="headerlink" title="XMLHttpRequest.onloadstart"></a>XMLHttpRequest.onloadstart</h5><p>请求刚开始时触发。</p><h5 id="XMLHttpRequest-onprogress"><a href="#XMLHttpRequest-onprogress" class="headerlink" title="XMLHttpRequest.onprogress"></a>XMLHttpRequest.onprogress</h5><p>数据传输进行时触发。</p><h5 id="XMLHttpRequest-onabort"><a href="#XMLHttpRequest-onabort" class="headerlink" title="XMLHttpRequest.onabort"></a>XMLHttpRequest.onabort</h5><p>上传操作终止时触发。</p><h5 id="XMLHttpRequest-onerror"><a href="#XMLHttpRequest-onerror" class="headerlink" title="XMLHttpRequest.onerror"></a>XMLHttpRequest.onerror</h5><p>上传失败时触发。</p><h5 id="XMLHttpRequest-onload"><a href="#XMLHttpRequest-onload" class="headerlink" title="XMLHttpRequest.onload"></a>XMLHttpRequest.onload</h5><p>上传成功时触发。</p><h5 id="XMLHttpRequest-onloadend"><a href="#XMLHttpRequest-onloadend" class="headerlink" title="XMLHttpRequest.onloadend"></a>XMLHttpRequest.onloadend</h5><p>上传完成时触发。</p><hr><h3 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h3><p>上传文件并显示进度以及上传速度，代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span> <span class="attr">id</span>=<span class="string">&quot;fileInput&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;uploadFiles()&quot;</span>&gt;</span>点击上传<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;filename&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;loading&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span>上传中...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;progress&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;speed&quot;</span> <span class="attr">style</span>=<span class="string">&quot;display: none;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">uploadFiles</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;fileInput&quot;</span>).click();</span></span><br><span class="line"><span class="javascript">            <span class="built_in">document</span>.getElementById(<span class="string">&quot;fileInput&quot;</span>).addEventListener(<span class="string">&#x27;change&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> file = event.currentTarget.files[<span class="number">0</span>];</span></span><br><span class="line"><span class="javascript">                <span class="keyword">const</span> file_name = file.name;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="built_in">document</span>.getElementById(<span class="string">&#x27;filename&#x27;</span>).innerHTML = file_name;</span></span><br><span class="line"><span class="javascript">                formData.append(<span class="string">&quot;file&quot;</span>, file);</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> currentLoaded;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">var</span> startTime;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                xhr.onreadystatechange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(<span class="built_in">this</span>.readyState == <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;loading&#x27;</span>).style.display = <span class="string">&#x27;inline-block&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;progress&#x27;</span>).style.display = <span class="string">&#x27;inline-block&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(<span class="built_in">this</span>.readyState == <span class="number">2</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;loading&#x27;</span>).innerHTML = <span class="string">&#x27;上传成功&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;progress&#x27;</span>).style.display = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;speed&#x27;</span>).style.display = <span class="string">&#x27;none&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span>(<span class="built_in">this</span>.readyState == <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">console</span>.log(<span class="built_in">this</span>.responseText);</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 上传刚开始时调用</span></span></span><br><span class="line"><span class="javascript">                xhr.onloadstart = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    startTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line"><span class="javascript">                    currentLoaded = <span class="number">0</span>;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                <span class="comment">// 监听上传过程</span></span></span><br><span class="line"><span class="javascript">                xhr.onprogress = <span class="function"><span class="keyword">function</span>(<span class="params">ev</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (ev.lengthComputable) &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 计算进度</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> percent = <span class="built_in">Math</span>.round(ev.loaded * <span class="number">100</span> / ev.total);</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;progress&#x27;</span>).innerHTML = percent + <span class="string">&#x27;%&#x27;</span>;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> endTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> dtime = (endTime - startTime) / <span class="number">1000</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> dloaded = ev.loaded - currentLoaded;</span></span><br><span class="line"><span class="javascript">                        startTime = <span class="keyword">new</span> <span class="built_in">Date</span>().getTime();</span></span><br><span class="line"><span class="javascript">                        currentLoaded = ev.loaded;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> speed = dloaded / dtime;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> unit = <span class="string">&#x27;b/s&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span>(speed/<span class="number">1024</span> &gt; <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">                            unit = <span class="string">&#x27;Kb/s&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                            speed /= <span class="number">1024</span>;</span></span><br><span class="line"><span class="javascript">                            <span class="keyword">if</span>(speed/<span class="number">1024</span> &gt; <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="javascript">                                unit = <span class="string">&#x27;Mb/s&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                                speed /= <span class="number">1024</span>;</span></span><br><span class="line"><span class="javascript">                            &#125;</span></span><br><span class="line"><span class="javascript">                        &#125;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;speed&#x27;</span>).style.display = <span class="string">&#x27;inline-block&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;speed&#x27;</span>).innerHTML = speed.toFixed(<span class="number">2</span>) + <span class="string">&#x27; &#x27;</span> + unit;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="built_in">document</span>.getElementById(<span class="string">&#x27;progress&#x27;</span>).innerHTML = <span class="string">&#x27;无法计算&#x27;</span>;</span></span><br><span class="line"><span class="javascript">                    &#125;</span></span><br><span class="line"><span class="javascript">                &#125;</span></span><br><span class="line"><span class="javascript">                xhr.open(<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;xxxxxxx&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                xhr.setRequestHeader(<span class="string">&#x27;accept&#x27;</span>, <span class="string">&#x27;application/json&#x27;</span>);</span></span><br><span class="line"><span class="javascript">                xhr.send(formData);</span></span><br><span class="line"><span class="javascript">            &#125;)</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> js </tag>
            
            <tag> ajax </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue3 项目搭建</title>
      <link href="/2021/10/16/Vue3/Vue3/"/>
      <url>/2021/10/16/Vue3/Vue3/</url>
      
        <content type="html"><![CDATA[<h3 id="安装全局-vue-cli"><a href="#安装全局-vue-cli" class="headerlink" title="安装全局 @vue/cli"></a>安装全局 @vue/cli</h3><p>Vue3 与 Vue2 的脚手架安装方式稍有不同，Vue2 安装的是 <code>vue-cli</code>，Vue3 安装的是 <code>@vue/cli</code>。如果之前已经安装过 Vue2 的 vue-cli，那么要先将其卸载，再安装 Vue3 的 @vue/cli。而且 @vue/cli 仍可以创建 Vue2 项目，所以可放心卸载。</p><p>安装 @vue/cli 的命令如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install @vue/cli -g</span><br></pre></td></tr></table></figure><br/><h3 id="创建-Vue-项目"><a href="#创建-Vue-项目" class="headerlink" title="创建 Vue 项目"></a>创建 Vue 项目</h3><p>创建项目的方式也与 Vue2 不同，执行如命令：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create projectname</span><br></pre></td></tr></table></figure><p>回车之后会出现三个选项，分别表示：</p><ul><li>创建默认的 Vue2 项目</li><li>创建默认的 Vue3 项目</li><li>自定义创建项目</li></ul><p>我们一般选择第三项，确认之后又出现一串选项，并提示“按空格键选择，按 a 全选，按 i 反选”。</p><p>我们一般在原有基础上再选择：</p><ul><li>Router</li><li>CSS Pre-processors</li><li>vuex</li></ul><p>如果不想使用 ESLint，可以取消选项 “Linter / Formatter”。</p><p>然后按回车进行具体配置，步骤如下：</p><ol><li>选择 Vue 的版本，根据自己需要选择，这里选择 “3.x”</li><li>是否使用历史模板，选择 “n”</li><li>CSS 预处理器，根据需要选择，这里选择 “Less”</li><li>选择一个 linter / formatter 的配置，选择第一个</li><li>选择另一个 lint 的特点，我们选择第一个</li><li>Babel，ESLint 的配置项存放地址，选择 “In package.json”</li><li>是否将此项目的配置用于之后的项目，选择 “N”</li></ol><p>回车之后项目就开始创建了，到此，Vue3 项目创建完成。</p><br/><h3 id="ref-与-reactive-区别"><a href="#ref-与-reactive-区别" class="headerlink" title="ref 与 reactive 区别"></a>ref 与 reactive 区别</h3><p>ref 与 reactive 都是用来定义响应式变量的，区别是：</p><ol><li>ref 用来定义基本的数据类型（string，number，boolean，null，undefined，symbol），reactive 用来定义复杂的数据类型（对象）</li><li>访问 ref 对象中的值需要用 <code>.value</code> 或 <code>unref()</code>，而 reactive 中的值可以直接访问</li><li>本身具有响应性的对象（props，reactive 对象）不能直接用 es6 解构，否则会失去响应性，要先用 <code>toRef()</code> 将其转换为 ref 对象再解构。</li></ol><br/><h3 id="ref-引用模板或子组件"><a href="#ref-引用模板或子组件" class="headerlink" title="ref 引用模板或子组件"></a>ref 引用模板或子组件</h3><p>在 setup 方法中，没有 $refs 这个属性，我们可以这样写：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">templat</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">&#x27;input&#x27;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;ref, onMounted&#125; <span class="keyword">from</span> <span class="string">&quot;vue&quot;</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 此变量值须与模板中 ref 值一样</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> input = ref();</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 只有在 mounted 中 ref 才能被访问</span></span></span><br><span class="line"><span class="javascript">        onMounted(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">            input.value.focus();</span></span><br><span class="line"><span class="javascript">        &#125;);</span></span><br><span class="line"><span class="javascript">        </span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 必须将其暴露给模板</span></span></span><br><span class="line"><span class="javascript">            input</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>引用子组件中的变量或方法同上。</p><br/><h3 id="vue3-路由跳转"><a href="#vue3-路由跳转" class="headerlink" title="vue3 路由跳转"></a>vue3 路由跳转</h3><p>由于没有了 $router、$route， 实现路由跳转的方式也发生了变化：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> &#123;useRouter, useRoute&#125; <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span></span><br><span class="line"><span class="javascript">    </span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">const</span> router = useRouter();</span></span><br><span class="line"><span class="javascript">            <span class="function"><span class="keyword">function</span> <span class="title">click</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                router.push(<span class="string">&#x27;/&#x27;</span>);</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：useRouter 和 useRoute 只能用于 setup 方法中，其作用相当于 <code>this.$router</code>、<code>this.$route</code>。</p><br/><h3 id="Vue3-使用-element-ui"><a href="#Vue3-使用-element-ui" class="headerlink" title="Vue3 使用 element-ui"></a>Vue3 使用 element-ui</h3><p>Vue3 不能安装 ‘element-ui’，而是应该安装 ‘element-plus’，全局引入方式如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import Element from &#x27;element-plus&#x27;</span><br><span class="line">import &#x27;element-plus/theme-chalk/index.css&#x27;</span><br><span class="line"></span><br><span class="line">app.use(Element)</span><br></pre></td></tr></table></figure><p>关于更多 element-plus 的用法参考 <a href="">https://element-plus.gitee.io/zh-CN/</a>。</p><br/><h3 id="Vue3-deep-穿透"><a href="#Vue3-deep-穿透" class="headerlink" title="Vue3 deep 穿透"></a>Vue3 deep 穿透</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">::v-deep .head &#123;...&#125;</span><br></pre></td></tr></table></figure><br/><h3 id="Vue3-使用-emit"><a href="#Vue3-使用-emit" class="headerlink" title="Vue3 使用 emit"></a>Vue3 使用 emit</h3><p>父组件：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">children</span> @<span class="attr">change-title</span>=<span class="string">&quot;changeTitle&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">setup</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">changeTitle</span>(<span class="params">val</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(val);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>子组件：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">emits: [<span class="string">&quot;changeTitle&quot;</span>],</span><br><span class="line"><span class="function"><span class="title">setup</span>(<span class="params">props, &#123;emit&#125;</span>)</span> &#123;</span><br><span class="line">    emit(<span class="string">&quot;changeTitle&quot;</span>, <span class="string">&quot;hello world&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python虚拟环境</title>
      <link href="/2021/09/26/python%E5%9F%BA%E7%A1%80/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
      <url>/2021/09/26/python%E5%9F%BA%E7%A1%80/python%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h3 id="pycharm-创建-python-虚拟环境"><a href="#pycharm-创建-python-虚拟环境" class="headerlink" title="pycharm 创建 python 虚拟环境"></a>pycharm 创建 python 虚拟环境</h3><p>打开 pycharm，点击 <strong>File -&gt; settings -&gt; Project -&gt; Python Interpreter</strong>，然后点击右上角的<strong>设置图标 -&gt; Add</strong>，弹出一个界面，其中 <strong>Location</strong> 表示存放将要创建的虚拟环境的位置，<strong>Base interpreter</strong> 表示这个虚拟环境是基于哪个 python 来创建的，此处为系统中 python 文件夹所在的路径。然后点击 OK 创建成功。</p><p>创建成功后，我们需要进入虚拟环境，这样通过 pip 安装的包才能安装到虚拟环境中。进入虚拟环境的方式因操作系统的不同而有所差别：</p><span id="more"></span><h5 id="Windows-系统："><a href="#Windows-系统：" class="headerlink" title="Windows 系统："></a>Windows 系统：</h5><p>打开 cmd，cd 到安装的虚拟环境的 <strong>Scripts</strong> 目录下，然后执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">activate</span><br></pre></td></tr></table></figure><p>成功进入虚拟环境，然后可以随意安装包而不会污染系统中的 python。</p></br><h5 id="Linux-系统"><a href="#Linux-系统" class="headerlink" title="Linux 系统"></a>Linux 系统</h5><p>打开终端，cd 到虚拟环境的 <strong>bin</strong> 目录下，然后执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source activate</span><br></pre></td></tr></table></figure><p>成功进入虚拟环境。</p><p>退出虚拟环境可执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deactivate</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PIL和Opencv读取图片的区别</title>
      <link href="/2021/09/11/Opencv/PIL%E5%92%8COpencv%E8%AF%BB%E5%8F%96%E5%9B%BE%E7%89%87%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
      <url>/2021/09/11/Opencv/PIL%E5%92%8COpencv%E8%AF%BB%E5%8F%96%E5%9B%BE%E7%89%87%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      
        <content type="html"><![CDATA[<h5 id="opencv读取图片"><a href="#opencv读取图片" class="headerlink" title="opencv读取图片"></a>opencv读取图片</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img_cv2 = cv2.imread(path)</span><br><span class="line"><span class="comment"># 图片路径含有中文</span></span><br><span class="line">img_cv2 = cv2.imdecode(np.fromfile(path, dtype=np.uint8), -<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(img_cv2.shape)</span><br><span class="line"><span class="comment"># 输出：(24, 94, 3)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(img_cv2))</span><br><span class="line"><span class="comment"># 输出：&lt;class &#x27;numpy.ndarray&#x27;&gt;</span></span><br></pre></td></tr></table></figure><span id="more"></span></br><h5 id="PIL读取图片"><a href="#PIL读取图片" class="headerlink" title="PIL读取图片"></a>PIL读取图片</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">img_pil = Image.<span class="built_in">open</span>(path)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(img_pil.size)</span><br><span class="line"><span class="comment"># 输出：(94, 24)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">type</span>(img_pil))</span><br><span class="line"><span class="comment"># 输出：&lt;class &#x27;PIL.JpegImagePlugin.JpegImageFile&#x27;&gt;</span></span><br></pre></td></tr></table></figure></br><h5 id="两者区别"><a href="#两者区别" class="headerlink" title="两者区别"></a>两者区别</h5><p>从以上两个程序的输出结果可以看出如下不同：</p><ul><li><p>opencv读取图片后的数据类型为numpy.ndarry，而PIL为PIL.JpegImagePlugin.JpegImageFile</p></li><li><p>opencv读取图片后，查看图片尺寸用img.shape，是一个三维数组，且第一维是图片的高（height），第二维是图片的宽（width）。而PIL读取图片后通过img.size查看尺寸，是一个二维数组，第一维是宽，第二维是高</p></li></ul><p>既然二者读取图片后的数据类型不同，那是否可以相互转换呢？我们可以发现，opencv读取出来后的数据类型为numpy，且多维数组类型的数据转numpy都很方便，所以我们尝试将PIL读取出来的数据转为numpy，结果如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">img = np.array(img_pil, dtype=np.uint8)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(img.shape)</span><br><span class="line"><span class="comment"># 输出：(24, 94, 3)</span></span><br></pre></td></tr></table></figure><p>会发现，现在二者输出的图片尺寸是一样的了，那是不是转换成功了，我们来测试一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(img == img_cv2)</span><br><span class="line"><span class="comment"># 输出：[[[False], [False]...]...]</span></span><br></pre></td></tr></table></figure><p>全都是False，很明显是不对的。既然二者的数据大小都相同了，那为什么不相等呢，我print出了它们的数组，发现在第三维上二者数据的顺序恰好是相反的。</p><p>经过查询后得知，<strong>opencv读取的是图片的BGR格式，而PIL读取的是RGB格式</strong>，这也就解释了数据顺序相反的原因。</p><p>既然如此，我们将RGB转为BGR：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">img = img[:,:,::-<span class="number">1</span>].copy()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(img == img_cv2)</span><br><span class="line"><span class="comment"># 输出结果全为 True</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> opencv </tag>
            
            <tag> Pillow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux系统下各种问题集合</title>
      <link href="/2021/09/07/Linux/linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/"/>
      <url>/2021/09/07/Linux/linux%E7%B3%BB%E7%BB%9F%E4%B8%8B%E5%90%84%E7%A7%8D%E9%97%AE%E9%A2%98%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h3 id="linux-添加环境变量"><a href="#linux-添加环境变量" class="headerlink" title="linux 添加环境变量"></a>linux 添加环境变量</h3><p>打开终端执行以下命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=path:$PATH</span><br></pre></td></tr></table></figure><p>其中，path为要添加的路径。</p><p>查看是否添加成功：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eoch $PATH</span><br></pre></td></tr></table></figure><p>如果输出中有刚刚添加的路径，则添加环境变量成功。</p><span id="more"></span><hr><h3 id="deepin安装deb软件包"><a href="#deepin安装deb软件包" class="headerlink" title="deepin安装deb软件包"></a>deepin安装deb软件包</h3><p>打开终端，cd到指定目录，执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i filename</span><br></pre></td></tr></table></figure><p>可能会报依赖关系的错误，这时执行以下命令来修复安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install -f</span><br></pre></td></tr></table></figure><p> 安装成功。</p><p>通过<code> sudo dpkg -l</code> 查看已安装的软件</p><p>通过<code>sudo dpkg -r</code>软件名 进行卸载</p><hr><h3 id="deepin-安装-tar-gz-软件包"><a href="#deepin-安装-tar-gz-软件包" class="headerlink" title="deepin 安装 tar.gz 软件包"></a>deepin 安装 tar.gz 软件包</h3><p>cd 到指定目录下，执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo tar -zvxf ***.tar.gz</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> deepin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>git操作</title>
      <link href="/2021/09/07/git/git%E6%93%8D%E4%BD%9C/"/>
      <url>/2021/09/07/git/git%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h3 id="新建仓库"><a href="#新建仓库" class="headerlink" title="新建仓库"></a>新建仓库</h3><p>1、在GitLab上新建一个仓库，假设名为practice.git</p><p>2、配置用户名和邮箱</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name &quot;Silence&quot;</span><br><span class="line">git config --global user.email &quot;XXXXXXXXX@qq.com&quot;</span><br></pre></td></tr></table></figure><span id="more"></span><p>3、向仓库push本地的代码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd existing_folder</span><br><span class="line">git init</span><br><span class="line">git remote add origin https://gitee.com/ilenceszd/practice.git</span><br><span class="line">git add .</span><br><span class="line">git commit -m &quot;Initial commit&quot;</span><br><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><hr><h3 id="Clone仓库"><a href="#Clone仓库" class="headerlink" title="Clone仓库"></a>Clone仓库</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd folder</span><br><span class="line">git clone https://gitee.com/ilenceszd/practice.git</span><br></pre></td></tr></table></figure><hr><h3 id="对已有仓库进行操作"><a href="#对已有仓库进行操作" class="headerlink" title="对已有仓库进行操作"></a>对已有仓库进行操作</h3><h5 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h5><p>（1）创建分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch branch_name # 如 git branch &#x27;szd&#x27;</span><br></pre></td></tr></table></figure><p>（2）查看所有分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch </span><br></pre></td></tr></table></figure><p>（3）切换分支</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 切换为szd分支：</span></span><br><span class="line">git checkout szd</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 切换为主分支：</span></span><br><span class="line">git checkout master</span><br></pre></td></tr></table></figure><h5 id="修改仓库后将内容同步到GitLab"><a href="#修改仓库后将内容同步到GitLab" class="headerlink" title="修改仓库后将内容同步到GitLab"></a>修改仓库后将内容同步到GitLab</h5><p>（1）提交内容前先切换到对应的分支</p><p>（2）添加所有的文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add . </span><br></pre></td></tr></table></figure><p>或者添加单个文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add &lt;filename&gt; </span><br></pre></td></tr></table></figure><p>（3）提交修改</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m &quot;这里是提交的描述内容&quot;</span><br></pre></td></tr></table></figure><p>（4）push</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master(或者 szd)</span><br></pre></td></tr></table></figure><h5 id="合并分支"><a href="#合并分支" class="headerlink" title="合并分支"></a>合并分支</h5><p>合并分支前将分支切换到 master，然后执行以下操作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git merge szd</span><br><span class="line"></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><h5 id="同步代码到本地"><a href="#同步代码到本地" class="headerlink" title="同步代码到本地"></a>同步代码到本地</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><hr><h3 id="git上传大文件"><a href="#git上传大文件" class="headerlink" title="git上传大文件"></a>git上传大文件</h3><p>当执行<code>git push</code>报如下错误时，说明上传的文件中包含大文件。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">remote: error: inflate: data stream </span><br><span class="line">error (incorrect data check) </span><br><span class="line"></span><br><span class="line">remote: error: inflate returned -5 </span><br><span class="line">error: remote unpack failed: unpack-objects abnormal exit</span><br></pre></td></tr></table></figure><p>解决方法：通过<strong>lfs</strong>上传大文件。</p><p>1、安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git lfs install</span><br></pre></td></tr></table></figure><p>2、使用 git lfs 追踪（track）大文件（*指代所有），执行之后，在文件根目录会出现<code>.gitattributes</code> 文件，内容即为追踪的大文件类型。如</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git lfs track &quot;*.zip&quot;</span><br><span class="line">git lfs track &quot;*.jpg&quot;</span><br><span class="line">git lfs track &quot;*.dat&quot;</span><br></pre></td></tr></table></figure><p>3、确保 .gitattributes 被Git跟踪，否则 Git LFS 对于克隆项目的人无法正常工作：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .gitattributes</span><br></pre></td></tr></table></figure><p>之后，就可以正常add, commit, push 文件了。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python解析xml文件</title>
      <link href="/2021/09/04/python%E5%9F%BA%E7%A1%80/python%E8%A7%A3%E6%9E%90xml%E6%96%87%E4%BB%B6/"/>
      <url>/2021/09/04/python%E5%9F%BA%E7%A1%80/python%E8%A7%A3%E6%9E%90xml%E6%96%87%E4%BB%B6/</url>
      
        <content type="html"><![CDATA[<h3 id="XML文件"><a href="#XML文件" class="headerlink" title="XML文件"></a>XML文件</h3><p>xml:即可扩展标记语言，xml是互联网数据传输的重要工具，它可以跨越互联网任何的平台，不受编程语言和操作系统的限制，可以说它是一个拥有互联网最高级别通行证的数据携带者。xml是当前处理结构化文档信息中相当给力的技术，xml有助于在服务器之间穿梭结构化数据，这使得开发人员更加得心应手的控制数据的存储和传输。</p><p>Xml用于标记电子文件使其具有结构性的标记语言，可以用来标记数据、定义数据类型，是一种允许用户对自己的标记语言进行定义的源语言。Xml是标准通用标记语言（SGML）的子集，非常适合Web传输。XML提供统一的方法来描述和交换独立于应用程序或供应商的结构化数据。</p><span id="more"></span><p>其内容形式如下图所示（这是一个图片的xml文件）：</p><p><a href="https://imgtu.com/i/hgXK5F"><img src="https://z3.ax1x.com/2021/09/04/hgXK5F.png" alt="hgXK5F.png"></a></p><hr><h3 id="python解析XML文件"><a href="#python解析XML文件" class="headerlink" title="python解析XML文件"></a>python解析XML文件</h3><p>我们以上图所示XML文件对其进行解析。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入相关包</span></span><br><span class="line"><span class="keyword">import</span> xml.etree.ElementTree <span class="keyword">as</span> ET</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开XML文件</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;wallhaven-12.xml&#x27;</span>, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line"><span class="comment"># 获得节点树</span></span><br><span class="line">tree = ET.parse(file)</span><br><span class="line"><span class="comment"># 得到根节点</span></span><br><span class="line">root = tree.getroot()</span><br><span class="line"><span class="comment"># 根据TagName定位元素</span></span><br><span class="line">size = root.find(<span class="string">&#x27;size&#x27;</span>)</span><br><span class="line">obj = root.find(<span class="string">&#x27;object&#x27;</span>)</span><br><span class="line"><span class="comment"># 得到标签对应内容</span></span><br><span class="line"><span class="built_in">print</span>(size.find(<span class="string">&#x27;width&#x27;</span>).text)          <span class="comment"># 4000</span></span><br><span class="line"><span class="built_in">print</span>(obj.find(<span class="string">&#x27;name&#x27;</span>).text)            <span class="comment"># face</span></span><br><span class="line"><span class="comment"># 等价于</span></span><br><span class="line"><span class="built_in">print</span>(size.findtext(<span class="string">&#x27;width&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(obj.findtext(<span class="string">&#x27;name&#x27;</span>))</span><br></pre></td></tr></table></figure><p>其它方法：</p><ul><li>get：获取标签的属性</li><li>findall()：获取标签名相同的全部对象</li></ul>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> xml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>isinstance和hasattr的用法</title>
      <link href="/2021/09/04/python%E5%9F%BA%E7%A1%80/isinstance%E5%92%8Chasattr%E7%94%A8%E6%B3%95/"/>
      <url>/2021/09/04/python%E5%9F%BA%E7%A1%80/isinstance%E5%92%8Chasattr%E7%94%A8%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h3 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance"></a>isinstance</h3><h5 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h5><p>isinstance() 函数来判断一个对象是否是一个已知的类型，类似 type()。</p><blockquote><p>isinstance() 与 type() 区别：</p><ul><li>type() 不会认为子类是一种父类类型，不考虑继承关系。</li><li>isinstance() 会认为子类是一种父类类型，考虑继承关系。</li></ul><p>如果要判断两个类型是否相同推荐使用 isinstance()。</p></blockquote><h5 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h5><p>以下是 isinstance() 方法的语法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">isinstance(object, classinfo)</span><br></pre></td></tr></table></figure><span id="more"></span><h5 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h5><ul><li>object – 实例对象。</li><li>classinfo – 可以是直接或间接类名、基本类型或者由它们组成的元组。</li></ul><h5 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h5><p>如果对象的类型与参数二的类型（classinfo）相同则返回 True，否则返回 False。。</p><hr><h5 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h5><p>以下展示了使用 isinstance 函数的实例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="number">2</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span> (a,<span class="built_in">int</span>) <span class="literal">True</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span> (a,<span class="built_in">str</span>) <span class="literal">False</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">isinstance</span> (a,(<span class="built_in">str</span>,<span class="built_in">int</span>,<span class="built_in">list</span>))    <span class="comment"># 是元组中的一个返回 True True</span></span><br></pre></td></tr></table></figure><h6 id="type-与-isinstance-区别："><a href="#type-与-isinstance-区别：" class="headerlink" title="type() 与 isinstance()区别："></a>type() 与 isinstance()区别：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span>   </span><br><span class="line"><span class="keyword">pass</span>  </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>(<span class="params">A</span>):</span>    </span><br><span class="line"><span class="keyword">pass</span>  </span><br><span class="line"><span class="built_in">isinstance</span>(A(), A)    <span class="comment"># returns True </span></span><br><span class="line"><span class="built_in">type</span>(A()) == A        <span class="comment"># returns True </span></span><br><span class="line"><span class="built_in">isinstance</span>(B(), A)    <span class="comment"># returns True </span></span><br><span class="line"><span class="built_in">type</span>(B()) == A        <span class="comment"># returns False</span></span><br></pre></td></tr></table></figure><hr><h3 id="hasattr"><a href="#hasattr" class="headerlink" title="hasattr"></a>hasattr</h3><p>hasattr() 函数用于判断对象是否包含对应的属性。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">hasattr(object, name)</span><br><span class="line">object --对象</span><br><span class="line">name -- 字符串，属性名</span><br><span class="line">return</span><br><span class="line">如果对象有该属性返回True，否则返回</span><br></pre></td></tr></table></figure><p>实例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">variable</span>:</span></span><br><span class="line">    x = <span class="number">1</span></span><br><span class="line">    y = <span class="string">&#x27;a&#x27;</span></span><br><span class="line">    z = <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">dd = variable()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(dd, <span class="string">&#x27;x&#x27;</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(dd, <span class="string">&#x27;y&#x27;</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(dd, <span class="string">&#x27;z&#x27;</span>))  <span class="comment"># True</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hasattr</span>(dd, <span class="string">&#x27;no&#x27;</span>)) <span class="comment"># False</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>yaml文件与pyyaml用法讲解</title>
      <link href="/2021/09/04/python%E5%9F%BA%E7%A1%80/yaml%E6%96%87%E4%BB%B6%E4%B8%8Epyyaml%E7%94%A8%E6%B3%95%E8%AE%B2%E8%A7%A3/"/>
      <url>/2021/09/04/python%E5%9F%BA%E7%A1%80/yaml%E6%96%87%E4%BB%B6%E4%B8%8Epyyaml%E7%94%A8%E6%B3%95%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="YAML介绍"><a href="#YAML介绍" class="headerlink" title="YAML介绍"></a>YAML介绍</h3><h4 id="yaml是什么"><a href="#yaml是什么" class="headerlink" title="yaml是什么"></a>yaml是什么</h4><p>YAML是专门用来写<strong>配置文件</strong>的语言，远比JSON格式方便。</p><p>YAML语言的设计目标，就是方便人类读写。</p><p>YAML是一种比XML和JSON更轻的文件格式，也更简单更强大，它可以通过缩进来表示结构。</p><p>YAML 的配置文件后缀为 <strong>.yml</strong>。</p><span id="more"></span><h4 id="yaml语法规则"><a href="#yaml语法规则" class="headerlink" title="yaml语法规则"></a>yaml语法规则</h4><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进时不允许使用Tab键，只允许使用空格。</li><li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li><li><code>#</code> 表示注释，从这个字符一直到行尾，都会被解析器忽略，这个和python的注释一样</li><li>列表里的项用<code>-</code>来代表，字典里的键值对用<code>:</code>分隔</li></ul><h4 id="yaml数据结构"><a href="#yaml数据结构" class="headerlink" title="yaml数据结构"></a>yaml数据结构</h4><p>YAML 支持以下几种数据类型：</p><ul><li>对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）</li><li>数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）</li><li>纯量（scalars）：单个的、不可再分的值</li></ul><h6 id="YAML-对象"><a href="#YAML-对象" class="headerlink" title="YAML 对象"></a>YAML 对象</h6><p>对象键值对使用冒号结构表示 <strong>key: value</strong>，冒号后面要加一个空格。</p><p>也可以使用 **key:{key1: value1, key2: value2, …}**。</p><p>还可以使用缩进表示层级关系；</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">key:</span> </span><br><span class="line">    <span class="attr">child-key:</span> <span class="string">value</span></span><br><span class="line">    <span class="attr">child-key2:</span> <span class="string">value2</span></span><br></pre></td></tr></table></figure><p>较为复杂的对象格式，可以使用问号加一个空格代表一个复杂的 key，配合一个冒号加一个空格代表一个 value：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">?</span>  </span><br><span class="line">    <span class="bullet">-</span> <span class="string">complexkey1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">complexkey2</span></span><br><span class="line"><span class="string">:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">complexvalue1</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">complexvalue2</span></span><br></pre></td></tr></table></figure><p>意思即对象的属性是一个数组 [complexkey1,complexkey2]，对应的值也是一个数组 [complexvalue1,complexvalue2]</p><h6 id="YAML-数组"><a href="#YAML-数组" class="headerlink" title="YAML 数组"></a>YAML 数组</h6><p>以 <strong>-</strong> 开头的行表示构成一个数组：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">A</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">B</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">C</span></span><br></pre></td></tr></table></figure><p>YAML 支持多维数组，可以使用行内表示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">key:</span> [<span class="string">value1</span>, <span class="string">value2</span>, <span class="string">...</span>]</span><br></pre></td></tr></table></figure><p>数据结构的子成员是一个数组，则可以在该项下面缩进一个空格。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">-</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">A</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">B</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">C</span></span><br></pre></td></tr></table></figure><p>一个相对复杂的例子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">companies:</span></span><br><span class="line">    <span class="bullet">-</span></span><br><span class="line">        <span class="attr">id:</span> <span class="number">1</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">company1</span></span><br><span class="line">        <span class="attr">price:</span> <span class="string">200W</span></span><br><span class="line">    <span class="bullet">-</span></span><br><span class="line">        <span class="attr">id:</span> <span class="number">2</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">company2</span></span><br><span class="line">        <span class="attr">price:</span> <span class="string">500W</span></span><br></pre></td></tr></table></figure><p>意思是 companies 属性是一个数组，每一个数组元素又是由 id、name、price 三个属性构成。</p><p>数组也可以使用流式(flow)的方式表示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">companies:</span> [&#123;<span class="attr">id:</span> <span class="number">1</span>,<span class="attr">name:</span> <span class="string">company1</span>,<span class="attr">price:</span> <span class="string">200W</span>&#125;,&#123;<span class="attr">id:</span> <span class="number">2</span>,<span class="attr">name:</span> <span class="string">company2</span>,<span class="attr">price:</span> <span class="string">500W</span>&#125;]</span><br></pre></td></tr></table></figure><h6 id="复合结构"><a href="#复合结构" class="headerlink" title="复合结构"></a>复合结构</h6><p>数组和对象可以构成复合结构，例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">languages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Ruby</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Perl</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">Python</span> </span><br><span class="line"><span class="attr">websites:</span></span><br><span class="line">  <span class="attr">YAML:</span> <span class="string">yaml.org</span> </span><br><span class="line">  <span class="attr">Ruby:</span> <span class="string">ruby-lang.org</span> </span><br><span class="line">  <span class="attr">Python:</span> <span class="string">python.org</span> </span><br><span class="line">  <span class="attr">Perl:</span> <span class="string">use.perl.org</span></span><br></pre></td></tr></table></figure><p>转换为 json 为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  languages: [ &#x27;Ruby&#x27;, &#x27;Perl&#x27;, &#x27;Python&#x27;],</span><br><span class="line">  websites: &#123;</span><br><span class="line">    YAML: &#x27;yaml.org&#x27;,</span><br><span class="line">    Ruby: &#x27;ruby-lang.org&#x27;,</span><br><span class="line">    Python: &#x27;python.org&#x27;,</span><br><span class="line">    Perl: &#x27;use.perl.org&#x27; </span><br><span class="line">  &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="纯量"><a href="#纯量" class="headerlink" title="纯量"></a>纯量</h6><p>纯量是最基本的，不可再分的值，包括：</p><ul><li>字符串</li><li>布尔值</li><li>整数</li><li>浮点数</li><li>Null</li><li>时间</li><li>日期</li></ul><p>使用一个例子来快速了解纯量的基本使用：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">boolean:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="literal">TRUE</span>  <span class="comment">#true,True都可以</span></span><br><span class="line">    <span class="bullet">-</span> <span class="literal">FALSE</span>  <span class="comment">#false，False都可以</span></span><br><span class="line"><span class="attr">float:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">3.14</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">6.8523015e+5</span>  <span class="comment">#可以使用科学计数法</span></span><br><span class="line"><span class="attr">int:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">123</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">0b1010_0111_0100_1010_1110</span>    <span class="comment">#二进制表示</span></span><br><span class="line"><span class="attr">null:</span></span><br><span class="line">    <span class="attr">nodeName:</span> <span class="string">&#x27;node&#x27;</span></span><br><span class="line">    <span class="attr">parent:</span> <span class="string">~</span>  <span class="comment">#使用~表示null</span></span><br><span class="line"><span class="attr">string:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">哈哈</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;Hello world&#x27;</span>  <span class="comment">#可以使用双引号或者单引号包裹特殊字符</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">newline</span></span><br><span class="line">      <span class="string">newline2</span>    <span class="comment">#字符串可以拆成多行，每一行会被转化成一个空格</span></span><br><span class="line"><span class="attr">date:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="number">2018-02-17</span>    <span class="comment">#日期必须使用ISO 8601格式，即yyyy-MM-dd</span></span><br><span class="line"><span class="attr">datetime:</span> </span><br><span class="line">    <span class="bullet">-</span>  <span class="number">2018-02-17T15:02:31+08:00</span>    <span class="comment">#时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区</span></span><br></pre></td></tr></table></figure><h6 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h6><p><strong>&amp;</strong> 锚点和 ***** 别名，可以用来引用:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">defaults:</span> <span class="meta">&amp;defaults</span></span><br><span class="line">  <span class="attr">adapter:</span>  <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span>     <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">development:</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_development</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_test</span></span><br><span class="line">  <span class="string">&lt;&lt;:</span> <span class="meta">*defaults</span></span><br></pre></td></tr></table></figure><p>相当于:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">defaults:</span></span><br><span class="line">  <span class="attr">adapter:</span>  <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span>     <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">development:</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_development</span></span><br><span class="line">  <span class="attr">adapter:</span>  <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span>     <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_test</span></span><br><span class="line">  <span class="attr">adapter:</span>  <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span>     <span class="string">localhost</span></span><br></pre></td></tr></table></figure><p><strong>&amp;</strong> 用来建立锚点（defaults），**&lt;&lt;** 表示合并到当前数据，***** 用来引用锚点。</p><h6 id="分段"><a href="#分段" class="headerlink" title="分段"></a>分段</h6><p>在同一个yaml文件中，可以用<code>---</code>来分段，这样可以将多个文档写在一个文件中。如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">development:</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_development</span></span><br><span class="line">  <span class="attr">adapter:</span>  <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span>     <span class="string">localhost</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">test:</span></span><br><span class="line">  <span class="attr">database:</span> <span class="string">myapp_test</span></span><br><span class="line">  <span class="attr">adapter:</span>  <span class="string">postgres</span></span><br><span class="line">  <span class="attr">host:</span>     <span class="string">localhost</span></span><br></pre></td></tr></table></figure><p>通过python读取出来的数据格式为：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;development&#x27;: &#123;&#x27;database&#x27;:&#x27;myapp_development&#x27;, &#x27;adapter&#x27;:&#x27;postgres&#x27;, &#x27;host&#x27;:&#x27;localhost&#x27;&#125;&#125;</span><br><span class="line">&#123;&#x27;test&#x27;: &#123;&#x27;database&#x27;:&#x27;test&#x27;, &#x27;adapter&#x27;:&#x27;postgres&#x27;, &#x27;host&#x27;:&#x27;localhost&#x27;&#125;&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="二、PyYaml的简单使用"><a href="#二、PyYaml的简单使用" class="headerlink" title="二、PyYaml的简单使用"></a>二、PyYaml的简单使用</h3><p>PyYaml是Python的一个专门针对YAML文件操作的模块，使用起来非常简单</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyyaml   <span class="comment"># 如果是py2，使用 pip install yaml</span></span><br></pre></td></tr></table></figure><p>使用起来非常简单，就像json、pickle一样，load、dump就足够我们使用了。</p><h6 id="load"><a href="#load" class="headerlink" title="load()"></a>load()</h6><p>返回一个对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line">yaml_str = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">name: 一条大河</span></span><br><span class="line"><span class="string">age: 1956</span></span><br><span class="line"><span class="string">job: Singer</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">y = yaml.load(yaml_str, Loader=yaml.SafeLoader)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;name&#x27;: &#x27;一条大河&#x27;, &#x27;age&#x27;: <span class="number">1956</span>, &#x27;job&#x27;: &#x27;Singer&#x27;&#125;</span><br></pre></td></tr></table></figure><h6 id="load-all"><a href="#load-all" class="headerlink" title="load_all()"></a>load_all()</h6><p>生成一个迭代器</p><p>如果string或文件包含几块yaml文档，可以使用yaml.load_all来解析全部的文档。</p><p>yaml_test.yaml文件内容：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">qiyu</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">20</span><span class="string">岁</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">qingqing</span></span><br><span class="line"><span class="attr">age:</span> <span class="number">19</span><span class="string">岁</span></span><br></pre></td></tr></table></figure><p>操作yaml文件的test.py文件如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;./yaml_test&quot;</span>, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> ymlfile:</span><br><span class="line">    cfg = yaml.load_all(ymlfile, Loader=yaml.SafeLoader)</span><br><span class="line">    <span class="keyword">for</span> data <span class="keyword">in</span> cfg:</span><br><span class="line">        <span class="built_in">print</span>(data)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;name&#x27;: &#x27;qiyu&#x27;, &#x27;age&#x27;: &#x27;<span class="number">20</span>岁&#x27;&#125;</span><br><span class="line">&#123;&#x27;name&#x27;: &#x27;qingqing&#x27;, &#x27;age&#x27;: &#x27;<span class="number">19</span>岁&#x27;&#125;</span><br></pre></td></tr></table></figure><h6 id="dump"><a href="#dump" class="headerlink" title="dump()"></a>dump()</h6><p>将一个python对象生成为yaml文档</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line">json_data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;一条大河&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;age&#x27;</span>: <span class="number">1956</span>,</span><br><span class="line">             <span class="string">&#x27;job&#x27;</span>: [<span class="string">&#x27;Singer&#x27;</span>,<span class="string">&#x27;Dancer&#x27;</span>]&#125;</span><br><span class="line"></span><br><span class="line">y = yaml.dump(json_data, default_flow_style=<span class="literal">False</span>).encode(<span class="string">&#x27;utf-8&#x27;</span>).decode(<span class="string">&#x27;unicode_escape&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><p>运行结果：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">age:</span> <span class="number">1956</span></span><br><span class="line"><span class="attr">job:</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">Singer</span></span><br><span class="line"> <span class="bullet">-</span> <span class="string">Dancer</span></span><br><span class="line"><span class="attr">name:</span> <span class="string">&quot;一条大河&quot;</span></span><br></pre></td></tr></table></figure><p>使用dump()传入参数，可以直接把内容写入到yaml文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line">json_data = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;一条大河&#x27;</span>,</span><br><span class="line">             <span class="string">&#x27;age&#x27;</span>: <span class="number">1956</span>,</span><br><span class="line">             <span class="string">&#x27;job&#x27;</span>: [<span class="string">&#x27;Singer&#x27;</span>, <span class="string">&#x27;Dancer&#x27;</span>]&#125;</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./yaml_write.yaml&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    y = yaml.dump(json_data, f)</span><br><span class="line">    <span class="built_in">print</span>(y)</span><br></pre></td></tr></table></figure><p>写入内容后的yaml_write.yaml：</p><p><img src="https://img2018.cnblogs.com/blog/907091/201911/907091-20191120145807326-1016307144.png" alt="img"></p><h6 id="yaml-dump-all"><a href="#yaml-dump-all" class="headerlink" title="yaml.dump_all()"></a>yaml.dump_all()</h6><p>将多个段输出到一个文件中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"></span><br><span class="line">obj1 = &#123;<span class="string">&quot;name&quot;</span>: <span class="string">&quot;river&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">2019</span>&#125;</span><br><span class="line">obj2 = [<span class="string">&quot;Lily&quot;</span>, <span class="number">1956</span>]</span><br><span class="line">obj3 = &#123;<span class="string">&quot;gang&quot;</span>: <span class="string">&quot;ben&quot;</span>, <span class="string">&quot;age&quot;</span>: <span class="number">1963</span>&#125;</span><br><span class="line">obj4 = [<span class="string">&quot;Zhuqiyu&quot;</span>, <span class="number">1994</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./yaml_write_all.yaml&#x27;</span>, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    y = yaml.dump([obj1, obj2, obj3, obj4], f)</span><br><span class="line">    <span class="built_in">print</span>(y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;./yaml_write_all.yaml&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> r:</span><br><span class="line">    y1 = yaml.load(r, Loader=yaml.SafeLoader)</span><br><span class="line">    <span class="built_in">print</span>(y1)</span><br></pre></td></tr></table></figure><p>写入内容后的yaml_write_all.yaml：</p><p><img src="https://img2018.cnblogs.com/blog/907091/201911/907091-20191120151026762-2090142303.png" alt="img"></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> yaml </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>deepin中安装和卸载python</title>
      <link href="/2021/09/04/Linux/deepin%E4%B8%AD%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BDpython/"/>
      <url>/2021/09/04/Linux/deepin%E4%B8%AD%E5%AE%89%E8%A3%85%E5%92%8C%E5%8D%B8%E8%BD%BDpython/</url>
      
        <content type="html"><![CDATA[<h3 id="python卸载"><a href="#python卸载" class="headerlink" title="python卸载"></a>python卸载</h3><p>deepin系统会自带两个版本的python，分别为python2和python3，以deepin20.2.3为例，系统自带的python版本为python2.7.6和python3.7.3。有时我么们想把它们卸载然后安装自己喜欢版本，可参考以下方法。</p><p>首先，我们要确定不同版本python对应的应用程序名称，按ctrl+alt+T打开终端，输入python，会发现进入了python2.7.6，然后退出输入python3，进入了python3.7.3。</p><p>由此，我们开始卸载python：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove python</span><br><span class="line">sudo apt-get purge python</span><br><span class="line">sudo apt autoremove</span><br></pre></td></tr></table></figure><span id="more"></span><p>python2.7.6卸载成功，接下来卸载python3.7.3。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove python3</span><br><span class="line">sudo apt-get purge python3</span><br><span class="line">sudo apt autoremove</span><br></pre></td></tr></table></figure><p>python3.7.3卸载成功。<strong>但是</strong>，此刻你会发现（或者重启之后），桌面消失了，文件管理器也不在了。经过一番试验之后得出结论：</p><ul><li>卸载python2.7.6会导致桌面黑屏</li><li>卸载python3.7.3会导致文件管理器消失</li></ul><p>此刻，也无需担心，只需要执行以下指令即可恢复：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install dde                # 下载桌面</span><br><span class="line">sudo apt-get install dde-file-manager   # 下载文件管理器</span><br></pre></td></tr></table></figure><p>下载之后重启系统，问题解决。</p><p>此时你会发现python2.7.6和python3.7.3又全都安装回来了，所以，我们还是不要动系统自带的python。如果不想用它的python，也可以自行下载。</p><hr><h3 id="python下载"><a href="#python下载" class="headerlink" title="python下载"></a>python下载</h3><p>这里以下载python3.7.0为例。</p><h6 id="更新apt，安装编译需要的组件"><a href="#更新apt，安装编译需要的组件" class="headerlink" title="更新apt，安装编译需要的组件"></a>更新apt，安装编译需要的组件</h6><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line">sudo apt install make build-essential libssl-dev zlib1g-dev liblzma-dev</span><br><span class="line"></span><br><span class="line">sudo apt install libbz2-dev libreadline-dev libsqlite3-dev llvm</span><br><span class="line"></span><br><span class="line">sudo apt install libncurses5-dev libncursesw5-dev xz-utils tk-dev</span><br></pre></td></tr></table></figure><h6 id="下载python3-7-0"><a href="#下载python3-7-0" class="headerlink" title="下载python3.7.0"></a>下载python3.7.0</h6><p>从<a href="https://www.python.org/downloads/">官网</a>下载压缩包，然后cd到指定目录进行解压。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf Python-3.7.0.tgz</span><br></pre></td></tr></table></figure><p>切换到解压后的Python-3.7.0目录，执行configure配置构建文件，注意要指定–with-ssl，否则安装完后使用pip install的时候可能会报错。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --enable-optimizations --with-ssl</span><br></pre></td></tr></table></figure><p>然后编译，可能要花不少时间。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make -j8</span><br></pre></td></tr></table></figure><p>在编译期间，可能会报错说ssl连接太弱，到现在也不知道是什么原因。只要中断就再执行，总会成功的。</p><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo make altinstall</span><br></pre></td></tr></table></figure><p>安装完成后执行清理：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo make clean</span><br><span class="line"></span><br><span class="line">sudo apt autoremove</span><br></pre></td></tr></table></figure><p>然后，输入python3.7，如果能进入shell就成功了。</p><p><strong>注意：</strong>当系统中存在多个python版本的时候，包的管理可能会发生混乱，可以通过python的虚拟环境来解决这个问题。</p><hr><h3 id="pip下载"><a href="#pip下载" class="headerlink" title="pip下载"></a>pip下载</h3><p>当系统上同时存在python2和python3时，pip默认为python2的包管理工具，pip3默认为python3的包管理工具。</p><p>下载pip：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-pip</span><br></pre></td></tr></table></figure><p>下载pip3：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python3-pip</span><br></pre></td></tr></table></figure><h6 id="更换pip的下载源"><a href="#更换pip的下载源" class="headerlink" title="更换pip的下载源"></a>更换pip的下载源</h6><p>新建配置文件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/pip.conf</span><br></pre></td></tr></table></figure><p>添加如下内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line"></span><br><span class="line">index-url=https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure><p>然后:wq保存并退出。</p><h6 id="pip安装包时遇到的问题"><a href="#pip安装包时遇到的问题" class="headerlink" title="pip安装包时遇到的问题"></a>pip安装包时遇到的问题</h6><p>1、pip安装Pillow报错：<code>The headers or library files could not be found for jpeg, a required dependency when compiling Pillow from source.</code></p><p>报错原因是缺少Pillow的依赖，执行以下命令即可解决：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install libjpeg-dev zlib1g-dev</span><br></pre></td></tr></table></figure></br><p>2、安装某些库（dlib,onnxruntime）时会出现cmake报错，原因是系统没有安装cmake：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install cmake</span><br></pre></td></tr></table></figure><p>问题解决</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> linux </tag>
            
            <tag> deepin </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pathlib模块详解</title>
      <link href="/2021/09/01/python%E5%9F%BA%E7%A1%80/pathlib%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/"/>
      <url>/2021/09/01/python%E5%9F%BA%E7%A1%80/pathlib%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>在编程中处理文件的读写操作时免不了要和文件路径打交道，甚至有时候为了完成某些场景功能会变的有些繁琐，以前在Python中操作文件路径，我们更多的时候是使用os模块。</p><p>而到了Python3时代后，Python3的系统标准库pathlib模块的 Path 对路径的操作会更简单。甚至可以说pathlib已经可以完全替代os.path，它完全采用面向对象的编程方式，因为Python 文档给它的定义是 Object-oriented filesystem paths（面向对象的文件系统路径），其语义适用于不同的操作系统，它继承纯路径但也提供I/O化操作，在处理配置路径方面十分简单。</p><span id="more"></span><h3 id="基础用法"><a href="#基础用法" class="headerlink" title="基础用法"></a>基础用法</h3><p>在过去，文件的路径是纯字符串，现在它会是一个<code>pathlib.Path</code>对象:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">In : <span class="keyword">from</span> pathlib <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">In : p = Path(<span class="string">&#x27;/home/ubuntu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In : p</span><br><span class="line">Out: PosixPath(<span class="string">&#x27;/home/ubuntu&#x27;</span>)</span><br><span class="line"></span><br><span class="line">In : <span class="built_in">str</span>(p)</span><br><span class="line">Out: <span class="string">&#x27;/home/ubuntu&#x27;</span></span><br></pre></td></tr></table></figure><p>使用str函数可以把一个Path对象转化成字符串。</p><hr><h6 id="返回当前工作目录路径和Home路径"><a href="#返回当前工作目录路径和Home路径" class="headerlink" title="返回当前工作目录路径和Home路径"></a>返回当前工作目录路径和Home路径</h6><p>在pathlib里一切都是面向对象的，只需要调用指定的方法就可以了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib2 <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前目录</span></span><br><span class="line">current_path = Path.cwd()</span><br><span class="line"><span class="built_in">print</span>(current_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下：</span></span><br><span class="line"><span class="comment"># /Users/Anders/Documents/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#获取Home目录</span></span><br><span class="line">home_path = Path.home()</span><br><span class="line"><span class="built_in">print</span>(home_path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下：</span></span><br><span class="line"><span class="comment"># /Users/Anders</span></span><br></pre></td></tr></table></figure><hr><h6 id="父目录操作"><a href="#父目录操作" class="headerlink" title="父目录操作"></a>父目录操作</h6><p>你可以看到想要获取一个路径下上级的父目录可以非常方便的直接使用面向对象的方式**.parent**就行了，如果还想上一级就继续以子对象继续操作parent属性就可以了，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib2 <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前目录</span></span><br><span class="line">current_path = Path.cwd()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取上级父目录</span></span><br><span class="line"><span class="built_in">print</span>(current_path.parent)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取上上级父目录</span></span><br><span class="line"><span class="built_in">print</span>(current_path.parent.parent)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取上上上级父目录</span></span><br><span class="line"><span class="built_in">print</span>(current_path.parent.parent.parent)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取上上上上级父目录</span></span><br><span class="line"><span class="built_in">print</span>(current_path.parent.parent.parent.parent)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取上上上上级父目录</span></span><br><span class="line"><span class="built_in">print</span>(current_path.parent.parent.parent.parent.parent)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下：</span></span><br><span class="line"><span class="comment"># /Users/Anders/Documents/Jupyter</span></span><br><span class="line"><span class="comment"># /Users/Anders/Documents</span></span><br><span class="line"><span class="comment"># /Users/Anders</span></span><br><span class="line"><span class="comment"># /Users</span></span><br><span class="line"><span class="comment"># /</span></span><br></pre></td></tr></table></figure><p>当然路径是十分长的，而且在特定的场合我如果想获得每一级的父目录呢，贴心的pathlib已经帮我们想到了，使用parents属性就可以遍历整个父目录了，如下例子的效果和上面的例子是完全一样的，但是就变的非常简便。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取当前目录</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pathlib2 <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">current_path = Path.cwd()</span><br><span class="line"><span class="keyword">for</span> p <span class="keyword">in</span> current_path.parents:</span><br><span class="line">    <span class="built_in">print</span>(p)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下：</span></span><br><span class="line"><span class="comment"># /Users/Anders/Documents/Jupyter</span></span><br><span class="line"><span class="comment"># /Users/Anders/Documents</span></span><br><span class="line"><span class="comment"># /Users/Anders</span></span><br><span class="line"><span class="comment"># /Users</span></span><br><span class="line"><span class="comment"># /</span></span><br></pre></td></tr></table></figure><hr><h6 id="文件名操作"><a href="#文件名操作" class="headerlink" title="文件名操作"></a>文件名操作</h6><p>常用的文件名操作属性如下：</p><ul><li><strong>name</strong> 目录的最后一个部分</li><li><strong>suffix</strong> 目录中最后一个部分的扩展名</li><li><strong>suffixes</strong> 返回多个扩展名列表</li><li><strong>stem</strong> 目录最后一个部分，没有后缀</li><li><strong>with_name(name)</strong> 替换目录最后一个部分并返回一个新的路径</li><li><strong>with_suffix(suffix)</strong> 替换扩展名，返回新的路径，扩展名存在则不变</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib2 <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回目录中最后一个部分的扩展名</span></span><br><span class="line">example_path = Path(<span class="string">&#x27;/Users/Anders/Documents/abc.gif&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(example_path.suffix)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下：</span></span><br><span class="line"><span class="comment"># .gif</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回目录中多个扩展名列表</span></span><br><span class="line">example_paths = Path(<span class="string">&#x27;/Users/Anders/Documents/abc.tar.gz&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(example_paths.suffixes)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下：</span></span><br><span class="line"><span class="comment"># [&#x27;.tar&#x27;, &#x27;.gz&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回目录中最后一个部分的文件名（但是不包含后缀）</span></span><br><span class="line">example_path = Path(<span class="string">&#x27;/Users/Anders/Documents/abc.gif&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(example_path.stem)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下：</span></span><br><span class="line"><span class="comment"># abc</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回目录中最后一个部分的文件名</span></span><br><span class="line">example_path = Path(<span class="string">&#x27;/Users/Anders/Documents/abc.gif&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(example_path.name)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下：</span></span><br><span class="line"><span class="comment"># abc.gif</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换目录最后一个部分的文件名并返回一个新的路径</span></span><br><span class="line">new_path1 = example_path.with_name(<span class="string">&#x27;def.gif&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(new_path1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下：</span></span><br><span class="line"><span class="comment"># /Users/Anders/Documents/def.gif</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换目录最后一个部分的文件名并返回一个新的路径</span></span><br><span class="line">new_path2 = example_path.with_suffix(<span class="string">&#x27;.txt&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(new_path2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下：</span></span><br><span class="line"><span class="comment"># /Users/Anders/Documents/abc.txt</span></span><br></pre></td></tr></table></figure><hr><h6 id="路径拼接和分解"><a href="#路径拼接和分解" class="headerlink" title="路径拼接和分解"></a>路径拼接和分解</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib2 <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="comment">#直接传进一个完整字符串</span></span><br><span class="line">example_path1 = Path(<span class="string">&#x27;/Users/Anders/Documents/powershell-2.jpg&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以传进多个字符串</span></span><br><span class="line">example_path2 = Path(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;Users&#x27;</span>, <span class="string">&#x27;dongh&#x27;</span>, <span class="string">&#x27;Documents&#x27;</span>, <span class="string">&#x27;python_learn&#x27;</span>, <span class="string">&#x27;pathlib_&#x27;</span>, <span class="string">&#x27;file1.txt&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#也可以利用Path.joinpath()</span></span><br><span class="line">example_path3 = Path(<span class="string">&#x27;/Users/Anders/Documents/&#x27;</span>).joinpath(<span class="string">&#x27;python_learn&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#利用 / 可以创建子路径</span></span><br><span class="line"></span><br><span class="line">example_path4 = Path(<span class="string">&#x27;/Users/Anders/Documents&#x27;</span>)</span><br><span class="line">example_path5 = example_path4 / <span class="string">&#x27;python_learn/pic-2.jpg&#x27;</span></span><br></pre></td></tr></table></figure><hr><h6 id="遍历文件夹"><a href="#遍历文件夹" class="headerlink" title="遍历文件夹"></a>遍历文件夹</h6><p>我们可以在路径对象后面直接使用**iterdir()**方法，该方法返回一个生成器，我们可以循环遍历出所有指定目录下的目录路径。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib2 <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回目录中最后一个部分的扩展名</span></span><br><span class="line">example_path = Path(<span class="string">&#x27;/Users/Anders/Documents&#x27;</span>)</span><br><span class="line">[path <span class="keyword">for</span> path <span class="keyword">in</span> example_path.iterdir()]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出如下：</span></span><br><span class="line"><span class="comment"># [PosixPath(&#x27;/Users/Anders/Documents/abc.jpg&#x27;),</span></span><br><span class="line"><span class="comment">#  PosixPath(&#x27;/Users/Anders/Documents/book-master&#x27;),</span></span><br><span class="line"><span class="comment">#  PosixPath(&#x27;/Users/Anders/Documents/Database&#x27;),</span></span><br><span class="line"><span class="comment">#  PosixPath(&#x27;/Users/Anders/Documents/Git&#x27;),</span></span><br><span class="line"><span class="comment">#  PosixPath(&#x27;/Users/Anders/Documents/AppProjects&#x27;)]</span></span><br></pre></td></tr></table></figure><hr><h6 id="创建文件夹和删除文件夹"><a href="#创建文件夹和删除文件夹" class="headerlink" title="创建文件夹和删除文件夹"></a>创建文件夹和删除文件夹</h6><p>关于这里的创建文件目录mkdir方法接收两个参数：</p><ul><li>parents：如果父目录不存在，是否创建父目录。</li><li>exist_ok：只有在目录不存在时创建目录，目录已存在时不会抛出异常。</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pathlib2 <span class="keyword">import</span> Path</span><br><span class="line"></span><br><span class="line">example_path = Path(<span class="string">&#x27;/Users/Anders/Documents/test1/test2/test3&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建文件目录，在这个例子中因为本身不存在test1,test2,test3，由于parents为True，所以都会被创建出来。</span></span><br><span class="line">example_path.mkdir(parents = <span class="literal">True</span>, exist_ok = <span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除路径对象目录，如果要删除的文件夹内包含文件就会报错</span></span><br><span class="line">example_path.rmdir()</span><br></pre></td></tr></table></figure><p>关于文件的判断还有很多相关属性，罗列如下：</p><ul><li><strong>is_dir()</strong> 是否是目录</li><li><strong>is_file()</strong> 是否是普通文件</li><li><strong>is_absolute()</strong> 是否是绝对路径</li><li><strong>resolve()</strong> 返回一个新的路径，这个新路径就是当前Path对象的绝对路径，如果是软链接则直接被解析</li><li><strong>absolute()</strong> 也可以获取绝对路径，但是推荐resolve()</li><li><strong>exists()</strong> 该路径是否指向现有的目录或文件：</li></ul><hr><p>如上，已经基本列举了路径处理中常用的各类操作，其实pathlib的方便和强大远不止于此，具体信息可以参见官方文档：<a href="https://docs.python.org/3.4/library/pathlib.html">https://docs.python.org/3.4/library/pathlib.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pathlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>argparse模块讲解</title>
      <link href="/2021/09/01/python%E5%9F%BA%E7%A1%80/argparse%E6%A8%A1%E5%9D%97%E8%AE%B2%E8%A7%A3/"/>
      <url>/2021/09/01/python%E5%9F%BA%E7%A1%80/argparse%E6%A8%A1%E5%9D%97%E8%AE%B2%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<p>argsparse是python的命令行解析的标准模块，内置于python，不需要安装。这个库可以让我们直接在命令行中就可以向程序中传入参数并让程序运行。</p><h3 id="传入一个参数"><a href="#传入一个参数" class="headerlink" title="传入一个参数"></a>传入一个参数</h3><p>我们先在桌面新建“arg学习”的文件夹，在该文件夹中新建demo.py文件，来看一个最简单的argsparse库的使用的例子。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;命令行中传入一个数字&#x27;</span>)</span><br><span class="line"><span class="comment">#type是要传入的参数的数据类型  help是该参数的提示信息</span></span><br><span class="line">parser.add_argument(<span class="string">&#x27;integers&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;传入的数字&#x27;</span>)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment">#获得传入的参数</span></span><br><span class="line"><span class="built_in">print</span>(args)</span><br></pre></td></tr></table></figure><span id="more"></span><p>在这个代码中，我们在命令行传入一个数字。使用方法是打开命令行，先将工作目录cd到<code>arg学习</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd desktop/arg学习</span><br></pre></td></tr></table></figure><p>然后再命令行中输入<code>python demo.py -h</code>或者<code>python demo.py --help</code>, 这里我输入的是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python demo.py -h</span><br></pre></td></tr></table></figure><p>在命令行中看到demo.py的运行结果如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">usage: demo.py [-h] integers</span><br><span class="line"></span><br><span class="line">命令行中传入数字</span><br><span class="line"></span><br><span class="line">positional arguments:</span><br><span class="line">  integers    传入的数字</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help  show this help message and exit</span><br></pre></td></tr></table></figure><p>现在我们在命令行中给demo.py 传入一个参数5，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python demo.py 5</span><br></pre></td></tr></table></figure><p>运行，得到的运行结果是</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Namespace(integers=&#x27;5&#x27;)</span><br></pre></td></tr></table></figure><hr><h3 id="操作args字典"><a href="#操作args字典" class="headerlink" title="操作args字典"></a>操作args字典</h3><p>其实得到的这个结果<code>Namespace(integers=&#39;5&#39;)</code>是一种类似于python字典的数据类型。</p><p>我们可以使用 <code>arg.参数名</code>来提取这个参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=&#x27;命令行中传入一个数字&#x27;)</span><br><span class="line">#type是要传入的参数的数据类型  help是该参数的提示信息</span><br><span class="line">parser.add_argument(&#x27;integers&#x27;, type=str, help=&#x27;传入的数字&#x27;)</span><br><span class="line"></span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">#获得integers参数</span><br><span class="line">print(args.integers)</span><br></pre></td></tr></table></figure><p>在命令行中运行 <code>python demo.py 5</code> , 运行结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">5</span><br></pre></td></tr></table></figure><hr><h3 id="传入多个参数"><a href="#传入多个参数" class="headerlink" title="传入多个参数"></a>传入多个参数</h3><p>现在在命令行中给demo.py 传入多个参数，例如传入1，2，3，4四个数字</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python demo.py 1 2 3 4</span><br></pre></td></tr></table></figure><p>运行报错</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">usage: demo.py [-h] integers </span><br><span class="line">demo.py: error: unrecognized arguments: 2 3 4</span><br></pre></td></tr></table></figure><p>不能识别2 3 4，看源代码我们知道integers这个参数是位置参数，说明第一个数<code>1</code>是能识别。这里我们需要重新更改demo.py代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=&#x27;命令行中传入一个数字&#x27;)</span><br><span class="line">parser.add_argument(&#x27;integers&#x27;, type=str, nargs=&#x27;+&#x27;,help=&#x27;传入的数字&#x27;)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line">print(args.integers)</span><br></pre></td></tr></table></figure><p><strong>nargs是用来说明传入的参数个数，’+’ 表示传入至少一个参数</strong>。这时候再重新在命令行中运行<code>python demo.py 1 2 3 4</code>得到</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;, &#x27;4&#x27;]</span><br></pre></td></tr></table></figure><hr><h3 id="改变数据类型"><a href="#改变数据类型" class="headerlink" title="改变数据类型"></a>改变数据类型</h3><p>add_argument中有type参数可以设置传入参数的数据类型。我们看到代码中有<strong>type</strong>这个关键词，该关键词可以传入list, str, tuple, set, dict等。例如我们把上面的type=str，改成type=int,这时候我们就可以进行四则运算。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;命令行中传入一个数字&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;integers&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, nargs=<span class="string">&#x27;+&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;传入的数字&#x27;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment">#对传入的数据进行加总</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">sum</span>(args.integers)</span><br></pre></td></tr></table></figure><p>在命令行中输入 <code>python demo.py 1 2 3 4</code>, 运行结果为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10</span><br></pre></td></tr></table></figure><hr><h3 id="位置参数"><a href="#位置参数" class="headerlink" title="位置参数"></a>位置参数</h3><p>在命令行中传入参数时候，传入的参数的先后顺序不同，运行结果往往会不同，这是因为采用了位置参数,例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;姓名&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;param1&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>,<span class="built_in">help</span>=<span class="string">&#x27;姓&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;param2&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>,<span class="built_in">help</span>=<span class="string">&#x27;名&#x27;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印姓名</span></span><br><span class="line"><span class="built_in">print</span>(args.param1+args.param2)</span><br></pre></td></tr></table></figure><p>在命令行中分别输入<code>python demo.py 张 三</code>和<code>python demo.py 三 张</code>，得到的 运行结果分别为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">张三</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">三张</span><br></pre></td></tr></table></figure><p>如果我们将代码<code>parser.add_argument(&#39;param1&#39;, type=str,help=&#39;姓&#39;)</code>和</p><p><code>parser.add_argument(&#39;param2&#39;, type=str,help=&#39;名&#39;)</code>互换位置，即第4行和第五行代码，再重新运行</p><p><code>python demo.py 张 三</code> 和 <code>python demo.py 三 张</code>，得到的 运行结果分别为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">三张</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">张三</span><br></pre></td></tr></table></figure><hr><h3 id="可选参数"><a href="#可选参数" class="headerlink" title="可选参数"></a>可选参数</h3><p>为了在命令行中避免上述位置参数的bug（容易忘了顺序），可以使用可选参数，这个有点像关键词传参，但是需要在关键词前面加<code>--</code>，例如</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;姓名&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--family&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>,<span class="built_in">help</span>=<span class="string">&#x27;姓&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--name&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>,<span class="built_in">help</span>=<span class="string">&#x27;名&#x27;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印姓名</span></span><br><span class="line"><span class="built_in">print</span>(args.family+args.name)</span><br></pre></td></tr></table></figure><p>在命令行中输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python demo.py --family=张 --name=三</span><br></pre></td></tr></table></figure><p>运行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">张三</span><br></pre></td></tr></table></figure><p>可选参数虽然写法比较繁琐，但是增加了命令行中的可读性，不容易因为参数传入顺序导致数据错乱。</p><hr><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>add_argument中有一个default参数。有的时候需要对某个参数设置默认值，即如果命令行中没有传入该参数的值，程序使用默认值。如果命令行传入该参数，则程序使用传入的值。具体请看下面的例子</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;姓名&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--family&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&#x27;张&#x27;</span>,<span class="built_in">help</span>=<span class="string">&#x27;姓&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--name&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&#x27;三&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;名&#x27;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印姓名</span></span><br><span class="line"><span class="built_in">print</span>(args.family+args.name)</span><br></pre></td></tr></table></figure><p>在命令行中分别输入 <code>python demo.py</code> 、 <code>python demo.py --family=李</code></p><p>运行结果分别为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">张三</span><br></pre></td></tr></table></figure><p>和</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">李三</span><br></pre></td></tr></table></figure><hr><h3 id="必需参数"><a href="#必需参数" class="headerlink" title="必需参数"></a>必需参数</h3><p>add_argument有一个required参数可以设置该参数是否必需。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser(description=<span class="string">&#x27;姓名&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--family&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">&#x27;姓&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;--name&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, required=<span class="literal">True</span>, default=<span class="string">&#x27;&#x27;</span>, <span class="built_in">help</span>=<span class="string">&#x27;名&#x27;</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="comment">#打印姓名</span></span><br><span class="line"><span class="built_in">print</span>(args.family+args.name)</span><br></pre></td></tr></table></figure><p>在命令行中输入 <code>python demo.py --family=张</code>，运行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">usage: demo.py [-h] [--family FAMILY] --name NAME</span><br><span class="line">demo.py: error: the following arguments are required: --name</span><br></pre></td></tr></table></figure><p>因为可选参数<code>name</code>的required=True，所以必须要传入。如果我们将其更改为False，程序运行结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">张</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> argparse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Falsk视图函数</title>
      <link href="/2021/08/28/Flask/%E5%B0%81%E8%A3%85Falsk%E6%8E%A5%E5%8F%A3/"/>
      <url>/2021/08/28/Flask/%E5%B0%81%E8%A3%85Falsk%E6%8E%A5%E5%8F%A3/</url>
      
        <content type="html"><![CDATA[<p>我们来看一个 flask 视图函数示例：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__) <span class="comment"># 注册一个app</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/test&#x27;</span>, methods=[<span class="string">&#x27;post&#x27;</span>, <span class="string">&#x27;get&#x27;</span>]</span>) </span><span class="comment"># &#x27;/test&#x27;是访问路径， methods指定了请求的方法</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test</span>():</span></span><br><span class="line">    data = request.get_json()[<span class="string">&#x27;data&#x27;</span>] <span class="comment"># 通过request获取传来的数据</span></span><br><span class="line">    <span class="keyword">return</span> data <span class="comment"># 对请求返回响应</span></span><br></pre></td></tr></table></figure><p><strong>注意：</strong>flask视图函数的返回值类型只能为：string, dict, tuple, Response instance, or WSGI callable。</p><p>我们用 requests 来向接口发起请求：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">r = requests.post(<span class="string">&#x27;127.0.0.1:8802/test&#x27;</span>, data=&#123;<span class="string">&#x27;data&#x27;</span>:<span class="string">&#x27;hello world&#x27;</span>&#125;)</span><br><span class="line"><span class="built_in">print</span>(r.text) <span class="comment"># 输出 hello world</span></span><br></pre></td></tr></table></figure><span id="more"></span><br/><p>接下来，我们看看flask接口接收数据都有哪些方法。</p><table><thead><tr><th>Tables</th><th align="center">Are</th><th align="center">结果</th></tr></thead><tbody><tr><td>request.form</td><td align="center">获取参数字典</td><td align="center"></td></tr><tr><td>request.form.get(键)</td><td align="center">获取字典中键的值</td><td align="center"></td></tr><tr><td>request.args.get(键)</td><td align="center">从 url 中获取参数</td><td align="center">request.args 是 ImmutableMultiDict 类型，它不能被改变。如果要改变其中的值，可以先将他转为 dict 类型：request.args.to_dict()</td></tr><tr><td>request.args.getlist(键)</td><td align="center">获取字典中键的值</td><td align="center"></td></tr><tr><td>request.files</td><td align="center">接收文件字典</td><td align="center"></td></tr><tr><td>request.files.get(键)</td><td align="center">获取文件字典中的内容</td><td align="center"></td></tr><tr><td>文件对象=request.files.get(键)  文件对象.save(保存路径)</td><td align="center">保存文件到本地，方式一</td><td align="center"></td></tr><tr><td>with open(路径，’wb’) as f:内容 = 文件对象.read()f.write(内容)</td><td align="center">保存文件到地址，方式二</td><td align="center"></td></tr><tr><td>文件对象.name  文件对象.content_length</td><td align="center">文件的名字与大小</td><td align="center"></td></tr><tr><td>flask.request.method</td><td align="center">请求方式</td><td align="center">GET/POST</td></tr><tr><td>flask.get_data()</td><td align="center">获取post参数</td><td align="center">注:如果是form表单提交的POST数据请使用request.form</td></tr><tr><td>args = request.get_json()</td><td align="center">获取postjson参数</td><td align="center">get_json()  会自动将json数据转换为字符串,还有POST请求需要设置请求头发送参数为application/json格式,才可以接收到。如果没有设置成json格式发送,请使用get_data接收参数</td></tr></tbody></table><hr><p><strong>实例1</strong></p><p>通过requests以numpy的ndarry形式向接口发送图片文件，接口接收文件并展示。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 接口文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> pywsgi</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/file&#x27;</span>, methods=[<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;post&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadFile</span>():</span></span><br><span class="line">    data = request.get_json()[<span class="string">&#x27;data&#x27;</span>]</span><br><span class="line">    picture = json.loads(data)[<span class="string">&#x27;picture&#x27;</span>]</span><br><span class="line">    file = np.array(picture, dtype=np.uint8) <span class="comment"># 对于图片，必须设置dtype为uint8</span></span><br><span class="line">    cv2.imshow(<span class="string">&#x27;xxx&#x27;</span>, file)</span><br><span class="line">    cv2.waitKey(<span class="number">5000</span>)</span><br><span class="line">    cv2.destroyAllWindows()</span><br><span class="line">    <span class="keyword">return</span> jsonify(&#123;<span class="string">&#x27;data&#x27;</span>:<span class="string">&#x27;success&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 通过wsgi开启服务</span></span><br><span class="line">    server = pywsgi.WSGIServer((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8802</span>), app)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">img = cv2.imread(<span class="string">&#x27;2.jpg&#x27;</span>)</span><br><span class="line">img_dict = &#123;<span class="string">&#x27;picture&#x27;</span>:img.tolist()&#125; <span class="comment"># 将ndarray数组转换为列表，加入字典中</span></span><br><span class="line">img_json = json.dumps(img_dict)  <span class="comment"># 将字典转换为json</span></span><br><span class="line">x = requests.post(<span class="string">&#x27;http://127.0.0.1:8802/file&#x27;</span>, json=&#123;<span class="string">&quot;data&quot;</span>:img_json&#125;) <span class="comment"># &#123;&#x27;data&#x27;: &#123;&#x27;picture&#x27;:&#x27;[...]&#x27;&#125;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(x.json()[<span class="string">&#x27;data&#x27;</span>]) <span class="comment"># 输出success</span></span><br></pre></td></tr></table></figure></br><p><strong>实例2</strong></p><p>通过requests以二进制的形式向接口发送图片文件，接口接收文件并保存。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 接口文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request</span><br><span class="line"><span class="keyword">from</span> gevent <span class="keyword">import</span> pywsgi</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/file&#x27;</span>, methods=[<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;post&#x27;</span>]</span>)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">loadFile</span>():</span></span><br><span class="line">    data = request.files</span><br><span class="line"><span class="keyword">for</span> name, file <span class="keyword">in</span> data.items():</span><br><span class="line">    file.save(name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># 通过wsgi开启服务</span></span><br><span class="line">    server = pywsgi.WSGIServer((<span class="string">&#x27;127.0.0.1&#x27;</span>, <span class="number">8802</span>), app)</span><br><span class="line">    server.serve_forever()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 请求文件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="comment"># （1）单张图片：</span></span><br><span class="line">requests.post(<span class="string">&#x27;http://127.0.0.1:8802/file&#x27;</span>, file=<span class="built_in">open</span>(<span class="string">&#x27;x.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)) <span class="comment"># 以二进制只读方式打开</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># （2）多张图片：</span></span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"><span class="comment"># 遍历文件夹</span></span><br><span class="line">dirs = os.listdirs(<span class="string">&#x27;data&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> dirs:</span><br><span class="line">    <span class="comment"># 拼接路径</span></span><br><span class="line">    path = <span class="string">&#x27;data&#x27;</span> + <span class="string">&#x27;/&#x27;</span> + <span class="built_in">dir</span></span><br><span class="line">    <span class="comment"># 构建字典,以图片名称作为键</span></span><br><span class="line">    dic[<span class="built_in">dir</span>] = <span class="built_in">open</span>(path, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">requests.post(url, file=dic)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Flask </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> flask </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Requests的介绍与使用</title>
      <link href="/2021/08/28/Python%E7%88%AC%E8%99%AB/Requests%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/08/28/Python%E7%88%AC%E8%99%AB/Requests%E7%9A%84%E4%BB%8B%E7%BB%8D%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="1、模块说明"><a href="#1、模块说明" class="headerlink" title="1、模块说明"></a>1、模块说明</h3><p>requests是使用Apache2 licensed 许可证的HTTP库。</p><p>用python编写。</p><p>比urllib2模块更简洁。</p><p>Request支持HTTP连接保持和连接池，支持使用cookie保持会话，支持文件上传，支持自动响应内容的编码，支持国际化的URL和POST数据自动编码。</p><p>在python内置模块的基础上进行了高度的封装，从而使得python进行网络请求时，变得人性化，使用Requests可以轻而易举的完成浏览器可有的任何操作。</p><span id="more"></span><hr><h3 id="2、基础入门"><a href="#2、基础入门" class="headerlink" title="2、基础入门"></a>2、基础入门</h3><h6 id="1）导入模块"><a href="#1）导入模块" class="headerlink" title="1）导入模块"></a>1）导入模块</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br></pre></td></tr></table></figure><h6 id="2）发送请求"><a href="#2）发送请求" class="headerlink" title="2）发送请求"></a>2）发送请求</h6><p>我们就可以使用该方式使用以下各种方法</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>   requests.get(url)                                          <span class="comment"># GET请求</span></span><br><span class="line"><span class="number">2</span>   requests.post(url)                                         <span class="comment"># POST请求</span></span><br><span class="line"><span class="number">3</span>   requests.put(url)                                          <span class="comment"># PUT请求</span></span><br><span class="line"><span class="number">4</span>   requests.delete(url)                                       <span class="comment"># DELETE请求</span></span><br><span class="line"><span class="number">5</span>   requests.head(url)                                         <span class="comment"># HEAD请求</span></span><br><span class="line"><span class="number">6</span>   requests.options(url )                                     <span class="comment"># OPTIONS请求</span></span><br></pre></td></tr></table></figure><h6 id="3）为url传递参数"><a href="#3）为url传递参数" class="headerlink" title="3）为url传递参数"></a>3）为url传递参数</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>url_params = &#123;<span class="string">&#x27;key&#x27;</span>:<span class="string">&#x27;value&#x27;</span>&#125;       <span class="comment">#    字典传递参数，如果值为None的键不会被添加到url中</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>r = requests.get(url, params=url_params)</span><br></pre></td></tr></table></figure><h6 id="4）响应的内容"><a href="#4）响应的内容" class="headerlink" title="4）响应的内容"></a>4）响应的内容</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">r.encoding                       <span class="comment">#获取当前的编码</span></span><br><span class="line">r.encoding = <span class="string">&#x27;utf-8&#x27;</span>             <span class="comment">#设置编码</span></span><br><span class="line">r.text                           <span class="comment">#以encoding解析返回内容。字符串方式的响应体，会自动根据响应头部的字符编码进行解码。</span></span><br><span class="line">r.content                        <span class="comment">#以字节形式（二进制）返回。字节方式的响应体，会自动为你解码 gzip 和 deflate 压缩。</span></span><br><span class="line"></span><br><span class="line">r.headers                        <span class="comment">#以字典对象存储服务器响应头，但是这个字典比较特殊，字典键不区分大小写，若键不存在则返回                                    #None</span></span><br><span class="line"></span><br><span class="line">r.status_code                     <span class="comment">#响应状态码</span></span><br><span class="line">r.raw                             <span class="comment">#返回原始响应体，也就是 urllib 的 response 对象，使用 r.raw.read()   </span></span><br><span class="line">r.ok                              <span class="comment"># 查看r.ok的布尔值便可以知道是否登陆成功</span></span><br><span class="line"> <span class="comment">#*特殊方法*#</span></span><br><span class="line">r.json()                         <span class="comment">#Requests中内置的JSON解码器，以json形式返回,前提返回的内容确保是json格式的，不然解析出错会抛异常</span></span><br><span class="line">r.raise_for_status()             <span class="comment">#失败请求(非200响应)抛出异常</span></span><br></pre></td></tr></table></figure><h6 id="5）定制头和cookie信息"><a href="#5）定制头和cookie信息" class="headerlink" title="5）定制头和cookie信息"></a>5）定制头和cookie信息</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">header = &#123;<span class="string">&#x27;user-agent&#x27;</span>: <span class="string">&#x27;my-app/0.0.1&#x27;</span><span class="string">&#x27;&#125;</span></span><br><span class="line"><span class="string">cookie = &#123;&#x27;</span>key<span class="string">&#x27;:&#x27;</span>value<span class="string">&#x27;&#125;</span></span><br><span class="line"><span class="string"> r = requests.get/post(&#x27;</span>your url<span class="string">&#x27;,headers=header,cookies=cookie) </span></span><br><span class="line"><span class="string">data = &#123;&#x27;</span>some<span class="string">&#x27;: &#x27;</span>data<span class="string">&#x27;&#125;</span></span><br><span class="line"><span class="string">headers = &#123;&#x27;</span>content-<span class="built_in">type</span><span class="string">&#x27;: &#x27;</span>application/json<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">           &#x27;</span>User-Agent<span class="string">&#x27;: &#x27;</span>Mozilla/<span class="number">5.0</span> (X11; Ubuntu; Linux x86_64; rv:<span class="number">22.0</span>) Gecko/<span class="number">20100101</span> Firefox/<span class="number">22.0</span><span class="string">&#x27;&#125;</span></span><br><span class="line"><span class="string"> </span></span><br><span class="line"><span class="string">r = requests.post(&#x27;</span>https://api.github.com/some/endpoint<span class="string">&#x27;, data=data, headers=headers)</span></span><br><span class="line"><span class="string">print(r.text)</span></span><br></pre></td></tr></table></figure><h6 id="6）响应状态码"><a href="#6）响应状态码" class="headerlink" title="6）响应状态码"></a>6）响应状态码</h6><p>使用requests方法后，会返回一个response对象，其存储了服务器响应的内容，如上实例中已经提到的 r.text、r.status_code……<br>获取文本方式的响应体实例：当你访问 r.text 之时，会使用其响应的文本编码进行解码，并且你可以修改其编码让 r.text 使用自定义的编码进行解码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> r = requests.get(<span class="string">&#x27;http://www.itwhy.org&#x27;</span>)</span><br><span class="line"><span class="number">2</span> <span class="built_in">print</span>(r.text, <span class="string">&#x27;\n&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;*&#x27;</span>*<span class="number">79</span>), r.encoding)</span><br><span class="line"><span class="number">3</span> r.encoding = <span class="string">&#x27;GBK&#x27;</span></span><br><span class="line"><span class="number">4</span> <span class="built_in">print</span>(r.text, <span class="string">&#x27;\n&#123;&#125;\n&#x27;</span>.<span class="built_in">format</span>(<span class="string">&#x27;*&#x27;</span>*<span class="number">79</span>), r.encoding)</span><br></pre></td></tr></table></figure><h6 id="7）响应"><a href="#7）响应" class="headerlink" title="7）响应"></a>7）响应</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">r.headers                                  #返回字典类型,头信息</span><br><span class="line">r.requests.headers                         #返回发送到服务器的头信息</span><br><span class="line">r.cookies                                  #返回cookie</span><br><span class="line">r.history                                  #返回重定向信息,当然可以在请求是加上allow_redirects = false 阻止重定向</span><br></pre></td></tr></table></figure><h6 id="8）超时"><a href="#8）超时" class="headerlink" title="8）超时"></a>8）超时</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">r = requests.get(<span class="string">&#x27;url&#x27;</span>,timeout=<span class="number">1</span>)           <span class="comment">#设置秒数超时，仅对于连接有效</span></span><br></pre></td></tr></table></figure><h6 id="9-会话对象，能够跨请求保持某些参数"><a href="#9-会话对象，能够跨请求保持某些参数" class="headerlink" title="9)会话对象，能够跨请求保持某些参数"></a>9)会话对象，能够跨请求保持某些参数</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = requests.Session()</span><br><span class="line">s.auth = (<span class="string">&#x27;auth&#x27;</span>,<span class="string">&#x27;passwd&#x27;</span>)</span><br><span class="line">s.headers = &#123;<span class="string">&#x27;key&#x27;</span>:<span class="string">&#x27;value&#x27;</span>&#125;</span><br><span class="line">r = s.get(<span class="string">&#x27;url&#x27;</span>)</span><br><span class="line">r1 = s.get(<span class="string">&#x27;url1&#x27;</span>) </span><br></pre></td></tr></table></figure><h6 id="10）代理"><a href="#10）代理" class="headerlink" title="10）代理"></a>10）代理</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">proxies = &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;ip1&#x27;</span>,<span class="string">&#x27;https&#x27;</span>:<span class="string">&#x27;ip2&#x27;</span> &#125;</span><br><span class="line">requests.get(<span class="string">&#x27;url&#x27;</span>,proxies=proxies)</span><br></pre></td></tr></table></figure><hr><h3 id="3、示例代码"><a href="#3、示例代码" class="headerlink" title="3、示例代码"></a>3、示例代码</h3><h4 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 1、无参数实例</span></span><br><span class="line">   </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">   </span><br><span class="line">ret = requests.get(url)</span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(ret.url)</span><br><span class="line"><span class="built_in">print</span>(ret.text)</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 2、有参数实例</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">payload = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line">ret = requests.get(url, params=payload)</span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(ret.url)</span><br><span class="line"><span class="built_in">print</span>(ret.text)</span><br></pre></td></tr></table></figure><h4 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1、基本POST实例</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">  </span><br><span class="line">payload = &#123;<span class="string">&#x27;key1&#x27;</span>: <span class="string">&#x27;value1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>: <span class="string">&#x27;value2&#x27;</span>&#125;</span><br><span class="line">ret = requests.post(url, data=payload)</span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(ret.text)</span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 2、发送请求头和数据实例</span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line">  </span><br><span class="line">payload = &#123;<span class="string">&#x27;some&#x27;</span>: <span class="string">&#x27;data&#x27;</span>&#125;</span><br><span class="line">headers = &#123;<span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>&#125;</span><br><span class="line">  </span><br><span class="line">ret = requests.post(url, data=json.dumps(payload), headers=headers)</span><br><span class="line">  </span><br><span class="line"><span class="built_in">print</span>(ret.text)</span><br><span class="line"><span class="built_in">print</span>(ret.cookies)</span><br></pre></td></tr></table></figure><h4 id="json请求："><a href="#json请求：" class="headerlink" title="json请求："></a>json请求：</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将 ndarray 数据转换为 json 格式</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">arr = np.random.randint(<span class="number">0</span>, <span class="number">10</span>, (<span class="number">3</span>, <span class="number">5</span>))</span><br><span class="line">arr_list = arr.tolist()</span><br><span class="line">dic = &#123;&#125;</span><br><span class="line">dic[<span class="string">&#x27;data&#x27;</span>] = arr_list</span><br><span class="line">arr_json = json.dumps(dic)</span><br><span class="line"></span><br><span class="line">r = requests.post(url, data=arr_json)</span><br><span class="line"><span class="built_in">print</span>(r.json()) <span class="comment"># 解析返回的json数据</span></span><br></pre></td></tr></table></figure><h4 id="状态异常处理"><a href="#状态异常处理" class="headerlink" title="状态异常处理"></a>状态异常处理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">URL = <span class="string">&#x27;http://ip.taobao.com/service/getIpInfo.php&#x27;</span>  <span class="comment"># 淘宝IP地址库API</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    r = requests.get(URL, params=&#123;<span class="string">&#x27;ip&#x27;</span>: <span class="string">&#x27;8.8.8.8&#x27;</span>&#125;, timeout=<span class="number">1</span>)</span><br><span class="line">    r.raise_for_status()  <span class="comment"># 如果响应状态码不是 200，就主动抛出异常</span></span><br><span class="line"><span class="keyword">except</span> requests.RequestException <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    result = r.json()</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">type</span>(result), result, sep=<span class="string">&#x27;\n&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h4><p>使用requests模块，也可以上传文件，文件的类型会自动进行处理：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">files = &#123;<span class="string">&#x27;file&#x27;</span>: <span class="built_in">open</span>(<span class="string">&#x27;test.jpg&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>)&#125; <span class="comment"># 以二进制打开文件</span></span><br><span class="line"><span class="comment">#files = &#123;&#x27;file&#x27;: (&#x27;report.jpg&#x27;, open(&#x27;/home/lyb/sjzl.mpg&#x27;, &#x27;rb&#x27;))&#125;     #显式的设置文件名</span></span><br><span class="line"> </span><br><span class="line">r = requests.post(url, file=files)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><p>要上传多个文件时：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line">path = <span class="string">&#x27;&#x27;</span></span><br><span class="line">dirnames = os.listdir(path)</span><br><span class="line">dic = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> dirnames:</span><br><span class="line">    dic[<span class="built_in">dir</span>] = <span class="built_in">open</span>(path+<span class="string">&#x27;/&#x27;</span>+<span class="built_in">dir</span>, <span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">r = requests.post(url, file=dic)</span><br><span class="line"><span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure><h4 id="身份验证"><a href="#身份验证" class="headerlink" title="身份验证"></a>身份验证</h4><p>基本身份认证(HTTP Basic Auth)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> requests.auth <span class="keyword">import</span> HTTPBasicAuth</span><br><span class="line"> </span><br><span class="line">r = requests.get(url, auth=HTTPBasicAuth(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;passwd&#x27;</span>))</span><br><span class="line"><span class="comment"># r = requests.get(url, auth=(&#x27;user&#x27;, &#x27;passwd&#x27;))    # 简写</span></span><br><span class="line"><span class="built_in">print</span>(r.json())</span><br></pre></td></tr></table></figure><p>另一种非常流行的HTTP身份认证形式是摘要式身份认证，Requests对它的支持也是开箱即可用的:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">requests.get(URL, auth=HTTPDigestAuth(<span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;pass&#x27;</span>)</span><br></pre></td></tr></table></figure><h4 id="Cookies与会话对象"><a href="#Cookies与会话对象" class="headerlink" title="Cookies与会话对象"></a>Cookies与会话对象</h4><p>如果某个响应中包含一些Cookie，你可以快速访问它们：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">r = requests.get(<span class="string">&#x27;http://www.google.com.hk/&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(r.cookies[<span class="string">&#x27;NID&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">tuple</span>(r.cookies))</span><br></pre></td></tr></table></figure><p>要想发送你的cookies到服务器，可以使用 cookies 参数：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"> </span><br><span class="line">url = <span class="string">&#x27;http://httpbin.org/cookies&#x27;</span></span><br><span class="line">cookies = &#123;<span class="string">&#x27;testCookies_1&#x27;</span>: <span class="string">&#x27;Hello_Python3&#x27;</span>, <span class="string">&#x27;testCookies_2&#x27;</span>: <span class="string">&#x27;Hello_Requests&#x27;</span>&#125;</span><br><span class="line"><span class="comment"># 在Cookie Version 0中规定空格、方括号、圆括号、等于号、逗号、双引号、斜杠、问号、@，冒号，分号等特殊符号都不能作为Cookie的内容。</span></span><br><span class="line">r = requests.get(url, cookies=cookies)</span><br><span class="line"><span class="built_in">print</span>(r.json())</span><br></pre></td></tr></table></figure><p>会话对象让你能够跨请求保持某些参数，最方便的是在同一个Session实例发出的所有请求之间保持cookies，且这些都是自动处理的，甚是方便。</p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> requests </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium下载百度图片</title>
      <link href="/2021/08/21/Python%E7%88%AC%E8%99%AB/selenium%E4%B8%8B%E8%BD%BD%E7%99%BE%E5%BA%A6%E5%9B%BE%E7%89%87/"/>
      <url>/2021/08/21/Python%E7%88%AC%E8%99%AB/selenium%E4%B8%8B%E8%BD%BD%E7%99%BE%E5%BA%A6%E5%9B%BE%E7%89%87/</url>
      
        <content type="html"><![CDATA[<h3 id="任务介绍"><a href="#任务介绍" class="headerlink" title="任务介绍"></a>任务介绍</h3><p>我们想要在百度图片下载几个明星的写真图片，首先想到的是爬虫，但是百度使用了js渲染，只有下拉滑动条后面的图片才会加载出来。因此，单纯使用爬虫无法完成任务。这时我们想到了web自动化测试工具selenium，它可以帮助我们下拉滑动条，还可以实现图片的自动搜索。接下来介绍一下selenium+BeautifulSoup+urllib完成这个任务的过程。</p><hr><span id="more"></span><h3 id="任务分析"><a href="#任务分析" class="headerlink" title="任务分析"></a>任务分析</h3><ul><li>通过selenium创建谷歌浏览器，然后进行相关配置</li><li>找到百度图片的主页<a href="https://image.baidu.com/">https://image.baidu.com/</a></li><li>通过xpath定位输入框，并键入要搜索的内容</li><li>通过xpath定位搜索按钮，点击跳转到图片页面</li><li>下拉滑动条，加载出足够多的图片</li><li>将页面源码交付给BeautifSoup，并定位到所有的图片</li><li>通过urllib将图片下载下来</li></ul><hr><h3 id="具体代码"><a href="#具体代码" class="headerlink" title="具体代码"></a>具体代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"><span class="keyword">import</span> urllib.request <span class="keyword">as</span> ur</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建浏览器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">createBrowser</span>():</span></span><br><span class="line">    options = Options()</span><br><span class="line">    options.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">    options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>)</span><br><span class="line">    driver = webdriver.Chrome(options=options)</span><br><span class="line">    <span class="keyword">return</span> driver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定位并下载图片</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">nameList, driver</span>):</span></span><br><span class="line">    driver.get(<span class="string">&#x27;https://image.baidu.com/&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> nameList:</span><br><span class="line">        <span class="comment"># 清空搜索框</span></span><br><span class="line">        driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;kw&quot;]&#x27;</span>).clear()</span><br><span class="line">        <span class="comment"># 向搜索框输入内容</span></span><br><span class="line">        driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;kw&quot;]&#x27;</span>).send_keys(name + <span class="string">&#x27;写真&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">if</span> nameList.index(name) == <span class="number">0</span>:</span><br><span class="line">            <span class="comment"># 点击搜索按钮</span></span><br><span class="line">            driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;homeSearchForm&quot;]/span[2]/input&#x27;</span>).click()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            driver.find_element_by_xpath(<span class="string">&#x27;//*[@id=&quot;imgMainSearch&quot;]/div[1]/form/span[2]/input&#x27;</span>).click()</span><br><span class="line">        current_url = driver.current_url</span><br><span class="line">        driver.get(current_url)</span><br><span class="line">        <span class="comment"># 将滑动条拉到页面底部，操作三次</span></span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>):</span><br><span class="line">            js = <span class="string">&#x27;window.scrollTo(0, document.body.scrollHeight)&#x27;</span></span><br><span class="line">            driver.execute_script(js)</span><br><span class="line">            time.sleep(<span class="number">3</span>)</span><br><span class="line">        page_source = driver.page_source</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 基于此时页面源码创建BeautifSoup对象</span></span><br><span class="line">        soup = BeautifulSoup(page_source, <span class="string">&#x27;lxml&#x27;</span>)</span><br><span class="line">        images = soup.findAll(<span class="string">&#x27;img&#x27;</span>, class_=<span class="string">&#x27;main_img img-hover&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> image <span class="keyword">in</span> images[:<span class="number">80</span>]:</span><br><span class="line">            <span class="comment"># 提取图片src属性的内容</span></span><br><span class="line">            img_url = image[<span class="string">&#x27;src&#x27;</span>]</span><br><span class="line">            <span class="comment"># 下载保存</span></span><br><span class="line">            ur.urlretrieve(img_url, <span class="string">&#x27;photo/%s%s.jpg&#x27;</span> %(name, images.index(image)))</span><br><span class="line">        </span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">quitBrowser</span>(<span class="params">driver</span>):</span></span><br><span class="line">    driver.quit()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    nameList = [<span class="string">&#x27;汪苏泷&#x27;</span>, <span class="string">&#x27;杨洋&#x27;</span>, <span class="string">&#x27;杨紫&#x27;</span>, <span class="string">&#x27;吴亦凡&#x27;</span>]</span><br><span class="line">    driver = createBrowser()</span><br><span class="line">    download(nameList, driver)</span><br><span class="line">    quitBrowser(driver)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析--Pandas</title>
      <link href="/2021/07/22/python%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-Pandas/"/>
      <url>/2021/07/22/python%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90-Pandas/</url>
      
        <content type="html"><![CDATA[<h3 id="Pandas简介"><a href="#Pandas简介" class="headerlink" title="Pandas简介"></a>Pandas简介</h3><p>1、Python Data Analysis Library 或 Pandas 是基于NumPy 的一种工具，该工具是为了解决数据分析任务而创建的。Pandas 纳入了大量库和一些标准的数据模型，提供了高效地操作大型数据集所需的工具。Pandas提供了大量能使我们快速便捷地处理数据的函数和方法。你很快就会发现，它是使Python成为强大而高效的数据分析环境的重要因素之一。</p><p>2、数据结构：</p><ul><li><strong>Series：</strong> 一维数组，与Numpy中的一维array类似。二者与Python基本的数据结构List也很相近，其区别是：List中的元素可以是不同的数据类型，而Array和Series中则只允许存储相同的数据类型，这样可以更有效的使用内存，提高运算效率。</li><li><strong>Time- Series：</strong> 以时间为索引的Series。</li><li><strong>DataFrame：</strong> 二维的表格型数据结构。很多功能与R中的data.frame类似。可以将DataFrame理解为Series的容器。以下的内容主要以DataFrame为主。</li><li><strong>Panel ：</strong> 三维的数组，可以理解为DataFrame的容器。</li></ul><p>Pandas 有两种自己独有的基本数据结构。读者应该注意的是，它固然有着两种数据结构，因为它依然是 Python 的一个库，所以，Python 中有的数据类型在这里依然适用，也同样还可以使用类自己定义数据类型。只不过，Pandas 里面又定义了两种数据类型：Series 和 DataFrame，它们让数据操作更简单了。</p><span id="more"></span><p>运行环境：<strong>jupyter notebook</strong><br>参考链接：<a href="http://www.cnblogs.com/chaosimple/p/4153083.html">十分钟搞定pandas</a></p><hr><blockquote><p>本文是对pandas官方网站上《10 Minutes to pandas》的一个简单的翻译，原文在<a href="http://pandas.pydata.org/pandas-docs/stable/getting_started/10min.html">这里</a>。这篇文章是对pandas的一个简单的介绍，详细的介绍请参考：<a href="http://pandas.pydata.org/pandas-docs/stable/user_guide/cookbook.html">Cookbook</a> 。习惯上，我们会按下面格式引入所需要的包：</p></blockquote><p><img src="https://s2.ax1x.com/2019/02/04/kJKBIs.png" alt="img"></p><h3 id="一、创建对象"><a href="#一、创建对象" class="headerlink" title="一、创建对象"></a>一、创建对象</h3><p>可以通过 <a href="http://pandas.pydata.org/pandas-docs/stable/getting_started/dsintro.html">Data Structure Intro Setion</a> 来查看有关该节内容的详细信息。</p><p><strong>1.1</strong> 可以通过传递一个list对象来创建一个Series，pandas会默认创建整型索引：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJKaqg.png" alt="img"></p><p><strong>1.2</strong> 通过传递一个numpy array，时间索引以及列标签来创建一个DataFrame：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJK0aj.png" alt="img"></p><p><strong>1.3</strong> 通过传递一个能够被转换成类似序列结构的字典对象来创建一个DataFrame：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJKNM8.png" alt="img"></p><p><strong>1.4</strong> 查看不同列的数据类型：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJKGGt.png" alt="img"></p><hr><h3 id="二、查看数据"><a href="#二、查看数据" class="headerlink" title="二、查看数据"></a>二、查看数据</h3><p>详情请参阅：<a href="http://pandas.pydata.org/pandas-docs/stable/getting_started/basics.html">Basics Section</a></p><p><strong>2.1</strong> 查看frame中头部和尾部的行：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJKJRP.png" alt="img"></p><p><strong>2.2</strong> 显示索引、列和底层的numpy数据：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJKYxf.png" alt="img"></p><p><strong>2.3</strong> describe()函数对于数据的快速统计汇总：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJMeFs.png" alt="img"></p><p><strong>2.4</strong> 对数据的转置：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJKUsS.png" alt="img"></p><p><strong>2.5</strong> 按轴进行排序</p><p><img src="https://s2.ax1x.com/2019/02/04/kJKrin.png" alt="img"></p><hr><h3 id="三、选择"><a href="#三、选择" class="headerlink" title="三、选择"></a>三、选择</h3><p>虽然标准的Python/Numpy的选择和设置表达式都能够直接派上用场，但是作为工程使用的代码，我们推荐使用经过优化的pandas数据访问方式： .at, .iat, .loc, .iloc 和 .ix详情请参阅<a href="http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html">Indexing and Selecing Data</a> 和 <a href="http://pandas.pydata.org/pandas-docs/stable/user_guide/advanced.html">MultiIndex / Advanced Indexing</a>。</p><h4 id="3-1-获取"><a href="#3-1-获取" class="headerlink" title="3.1 获取"></a>3.1 获取</h4><p><strong>3.1.1</strong> 选择一个单独的列，这将会返回一个Series，等同于df.A：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJMsTH.png" alt="img"></p><p><strong>3.1.2</strong> 通过[ ]进行选择，这将会对行进行切片</p><p><img src="https://s2.ax1x.com/2019/02/04/kJMtYR.png" alt="img"></p><h4 id="3-2-通过标签选择"><a href="#3-2-通过标签选择" class="headerlink" title="3.2 通过标签选择"></a>3.2 通过标签选择</h4><p><strong>3.2.1</strong> 使用标签来获取一个交叉的区域</p><p><img src="https://s2.ax1x.com/2019/02/04/kJMDmD.png" alt="img"></p><p><strong>3.2.2</strong> 通过标签来在多个轴上进行选择</p><p><img src="https://s2.ax1x.com/2019/02/04/kJQeBD.png" alt="img"></p><p><strong>3.2.3</strong> 标签切片</p><p><img src="https://s2.ax1x.com/2019/02/04/kJMw6K.png" alt="img"></p><p><strong>3.2.4</strong> 获取一个标量</p><p><img src="https://s2.ax1x.com/2019/02/04/kJMGTJ.png" alt="img"></p><h4 id="3-3-通过位置选择"><a href="#3-3-通过位置选择" class="headerlink" title="3.3 通过位置选择"></a>3.3 通过位置选择</h4><p><strong>3.3.1</strong> 通过传递数值进行位置选择（选择的是行）</p><p><img src="https://s2.ax1x.com/2019/02/04/kJM8w4.png" alt="img"></p><p><strong>3.3.2</strong> 通过数值进行切片，与numpy/python中的情况类似</p><p><img src="https://s2.ax1x.com/2019/02/04/kJMaSx.png" alt="img"></p><p><strong>3.3.3</strong> 通过指定一个位置的列表，与numpy/python中的情况类似</p><p><img src="https://s2.ax1x.com/2019/02/04/kJM0OO.png" alt="img"></p><p><strong>3.3.4</strong> 对行进行切片</p><p><img src="https://s2.ax1x.com/2019/02/04/kJMgfI.png" alt="img"></p><p><strong>3.3.5</strong> 对列进行切片</p><p><img src="https://s2.ax1x.com/2019/02/04/kJMctA.png" alt="img"></p><p><strong>3.3.6</strong> 获取特定的值</p><p><img src="https://s2.ax1x.com/2019/02/04/kJM6kd.png" alt="img"></p><h4 id="3-4-布尔索引"><a href="#3-4-布尔索引" class="headerlink" title="3.4 布尔索引"></a>3.4 布尔索引</h4><p><strong>3.4.1</strong> 使用一个单独列的值来选择数据：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJMr0e.png" alt="img"></p><p><strong>3.4.2</strong> 使用where操作来选择数据：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJQqVe.png" alt="img"></p><p><strong>3.4.3</strong> 使用isin()方法来过滤：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJQO5d.png" alt="img"></p><h4 id="3-5-设置"><a href="#3-5-设置" class="headerlink" title="3.5 设置"></a>3.5 设置</h4><p><strong>3.5.1</strong> 设置一个新的列：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJQLUH.png" alt="img"></p><p><strong>3.5.2</strong> 通过标签设置新的值：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJQ7DO.png" alt="img"></p><p><strong>3.5.3</strong> 通过位置设置新的值：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJQTKK.png" alt="img"></p><p><strong>3.5.4</strong> 通过一个numpy数组设置一组新值：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJQHbD.png" alt="img"></p><p><strong>上述操作结果如下：</strong></p><p><img src="https://s2.ax1x.com/2019/02/04/kJQjPA.png" alt="img"></p><hr><h3 id="四、缺失值处理"><a href="#四、缺失值处理" class="headerlink" title="四、缺失值处理"></a>四、缺失值处理</h3><p>在pandas中，使用np.nan来代替缺失值，这些值将默认不会包含在计算中，详情请参阅：<a href="http://pandas.pydata.org/pandas-docs/stable/user_guide/missing_data.html">Missing Data Section</a>。</p><p><strong>4.1</strong> reindex()方法可以对指定轴上的索引进行改变/增加/删除操作，这将返回原始数据的一个拷贝：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJQx2t.png" alt="img"></p><p><strong>4.2</strong> 去掉包含缺失值的行：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJQv8I.png" alt="img"></p><p><strong>4.3</strong> 对缺失值进行填充：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJlpKf.png" alt="img"></p><p><strong>4.4</strong> 对数据进行布尔填充：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJQzxP.png" alt="img"></p><hr><h3 id="五、相关操作"><a href="#五、相关操作" class="headerlink" title="五、相关操作"></a>五、相关操作</h3><p>详情请参与 <a href="http://pandas.pydata.org/pandas-docs/stable/getting_started/basics.html">Basic Section On Binary Ops</a></p><h4 id="5-1-统计（相关操作通常情况下不包括缺失值）"><a href="#5-1-统计（相关操作通常情况下不包括缺失值）" class="headerlink" title="5.1 统计（相关操作通常情况下不包括缺失值）"></a>5.1 统计（相关操作通常情况下不包括缺失值）</h4><p><strong>5.1.1</strong> 执行描述性统计：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJlurT.png" alt="img"></p><p><strong>5.1.2</strong> 在其他轴上进行相同的操作：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJlQZF.png" alt="img"></p><h4 id="5-2-APPLY"><a href="#5-2-APPLY" class="headerlink" title="5.2 APPLY"></a>5.2 APPLY</h4><p><strong>5.2.1</strong> 对数据应用函数：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJlKqU.png" alt="img"></p><h4 id="5-3-直方图"><a href="#5-3-直方图" class="headerlink" title="5.3 直方图"></a>5.3 直方图</h4><p>具体请参照：<a href="http://pandas.pydata.org/pandas-docs/stable/getting_started/basics.html">Histogramming and Discretization</a></p><p><img src="https://s2.ax1x.com/2019/02/04/kJl1IJ.png" alt="img"></p><h4 id="5-4-字符串方法"><a href="#5-4-字符串方法" class="headerlink" title="5.4 字符串方法"></a>5.4 字符串方法</h4><p>Series对象在其str属性中配备了一组字符串处理方法，可以很容易的应用到数组中的每个元素，如下段代码所示。更多详情请参考：<a href="http://pandas.pydata.org/pandas-docs/stable/user_guide/text.html">Vectorized String Methods</a>.</p><p><img src="https://s2.ax1x.com/2019/02/04/kJl8i9.png" alt="img"></p><h3 id="六、合并"><a href="#六、合并" class="headerlink" title="六、合并"></a>六、合并</h3><p>Pandas提供了大量的方法能够轻松的对Series，DataFrame和Panel对象进行各种符合各种逻辑关系的合并操作。具体请参阅：<a href="http://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html">Merging section</a></p><p><strong>6.1</strong> Concat</p><p><img src="https://s2.ax1x.com/2019/02/04/kJlla4.png" alt="img"></p><p><strong>6.2</strong> Append<br>将一行连接到一个DataFrame上，具体请参阅<a href="http://pandas.pydata.org/pandas-docs/stable/user_guide/merging.html">Appending</a>：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJlUsK.png" alt="img"></p><hr><h3 id="七、分组"><a href="#七、分组" class="headerlink" title="七、分组"></a>七、分组</h3><p>对于”group by”操作，我们通常是指以下一个或多个操作步骤：</p><ul><li>（Splitting）按照一些规则将数据分为不同的组；</li><li>（Applying）对于每组数据分别执行一个函数；</li><li>（Combining）将结果组合到一个数据结构中；</li></ul><p>详情请参阅：<a href="http://pandas.pydata.org/pandas-docs/stable/user_guide/groupby.html">Grouping section</a></p><p><img src="https://s2.ax1x.com/2019/02/04/kJlyRI.png" alt="img"></p><p><strong>7.1</strong> 分组并对每个分组执行sum函数：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJlGGR.png" alt="img"></p><p><strong>7.2</strong> 通过多个列进行分组形成一个层次索引，然后执行函数：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJlJR1.png" alt="img"></p><hr><h3 id="八、Categorical"><a href="#八、Categorical" class="headerlink" title="八、Categorical"></a>八、Categorical</h3><p>从0.15版本开始，pandas可以在DataFrame中支持Categorical类型的数据，详细 介绍参看：<a href="http://pandas.pydata.org/pandas-docs/stable/user_guide/categorical.html">categorical introduction</a> 和 <a href="http://pandas.pydata.org/pandas-docs/stable/reference/index.html">API documentation</a>。</p><p><img src="https://s2.ax1x.com/2019/02/04/kJlNM6.png" alt="img"></p><p><strong>8.1</strong> 将原始的grade转换为Categorical数据类型：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJlYxx.png" alt="img"></p><p><strong>8.2</strong> 将Categorical类型数据重命名为更有意义的名称：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJlwZD.png" alt="img"></p><p><strong>8.3</strong> 对类别进行重新排序，增加缺失的类别：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJlaqO.png" alt="img"></p><p><strong>8.4</strong> 对Categorical列进行排序时存在空的类别：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJlsJA.png" alt="img"></p><hr><h3 id="九、画图"><a href="#九、画图" class="headerlink" title="九、画图"></a>九、画图</h3><p>具体文档参看：<a href="http://pandas.pydata.org/pandas-docs/stable/user_guide/visualization.html">Plotting docs</a></p><p><img src="https://s2.ax1x.com/2019/02/04/kJl0de.png" alt="img"></p><p>对于DataFrame来说，plot是一种将所有列及其标签进行绘制的简便方法：</p><p><img src="https://s2.ax1x.com/2019/02/04/kJlBIH.png" alt="img"></p><hr><h3 id="十、导入和保存数据"><a href="#十、导入和保存数据" class="headerlink" title="十、导入和保存数据"></a>十、导入和保存数据</h3><h4 id="10-1-CSV"><a href="#10-1-CSV" class="headerlink" title="10.1 CSV"></a>10.1 CSV</h4><p>参考：<a href="http://pandas.pydata.org/pandas-docs/stable/user_guide/io.html">Writing to a csv file</a></p><p><strong>10.1.1</strong> 写入csv文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.to_csv(&quot;xxx.csv&quot;)</span><br></pre></td></tr></table></figure><p><strong>10.1.2</strong> 从csv文件中读取：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.read_csv(&quot;xxx.csv&quot;)</span><br></pre></td></tr></table></figure><h4 id="10-2-EXCEL"><a href="#10-2-EXCEL" class="headerlink" title="10.2 EXCEL"></a>10.2 EXCEL</h4><p>参考：<a href="http://pandas.pydata.org/pandas-docs/stable/user_guide/io.html">MS Excel</a></p><p><strong>10.2.1</strong> 写入excel文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df.to_excel(&quot;xxx.xlsx&quot;,sheet_name = &#x27;Sheet1&#x27;)</span><br></pre></td></tr></table></figure><p><strong>10.2.2</strong> 从excel文件中读取：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pd.read_excel(&#x27;xxx.xlsx&#x27;,&#x27;Sheet1&#x27;,index_col=None,na_values=[&#x27;NA&#x27;])</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-生命周期函数</title>
      <link href="/2021/06/26/Vue/Vue-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/"/>
      <url>/2021/06/26/Vue/Vue-%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p><strong>Vue生命周期函数</strong> 也叫Vue生命周期钩子，就是Vue实例在某一时间点自动执行的函数。具体如下：</p><ul><li>beforeCreate : 创建Vue实例前的时候执行</li><li>created :  创建Vue实例完成后执行，完成了data数据的初始化</li><li>beforeMount : Vue实例开始渲染前执行</li><li>mounted  :  Vue实例渲染完成后执行</li><li>beforeUpdate  :  Vue实例修改前执行</li><li>updated  :  Vue实例修改完成后执行</li><li>beforeDestroy  : Vue被销毁前执行</li><li>destroyed  : Vue实例被销毁后执行</li><li>activated  ：组件激活时调用。该钩子在服务器端渲染期间不被调用</li><li>deactivated  ：组件停用时调用。该钩子在服务器端渲染期间不被调用</li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CNN—-卷积神经网络理论理解</title>
      <link href="/2021/01/20/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/CNN%E2%80%94-%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%90%86%E8%AE%BA%E7%90%86%E8%A7%A3/"/>
      <url>/2021/01/20/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/CNN%E2%80%94-%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C%E7%90%86%E8%AE%BA%E7%90%86%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h3 id="人工神经网络（ANN）"><a href="#人工神经网络（ANN）" class="headerlink" title="人工神经网络（ANN）"></a>人工神经网络（ANN）</h3><p>在介绍卷积神经网络之前，先来了解一下人工神经网络。</p><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><p>人工神经网络（Artificial Neural Network，简称ANN ），以数学模型模拟神经元活动，是基于模仿大脑神经网络结构和功能而建立的一种信息处理系统。神经网络是一种运算模型，由大量的节点（或称“神经元”）和之间相互的联接构成。每个节点代表一种特定的输出函数，称为<strong>激励函数、激活函数</strong>（activation function）。每两个节点间的联接都代表一个对于通过该连接信号的加权值，称之为<strong>权重</strong>。</p><br/><h5 id="结构"><a href="#结构" class="headerlink" title="结构"></a>结构</h5><p>神经网络包含三层：输入层、隐含层（可以有多层）、输出层。</p><p><a href="https://imgchr.com/i/sWHm2d"><img src="https://s3.ax1x.com/2021/01/20/sWHm2d.png" alt="sWHm2d.png"></a></p><ul><li><code>Inputs</code>：输入，输入的是向量</li><li><code>Weights</code>：权重</li><li><code>Bias</code>：偏置</li><li><code>Activationfunction</code>：激活函数</li></ul><span id="more"></span><br/><h3 id="卷积神经网络（CNN）"><a href="#卷积神经网络（CNN）" class="headerlink" title="卷积神经网络（CNN）"></a>卷积神经网络（CNN）</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>卷积神经网络（Convolutional Neural Network，CNN）是一类包含卷积计算且具有深度结构的前馈神经网络，它的神经元间的连接是非全连接的，且同一层中某些神经元之间的连接的权重 w和偏移 b 是共享的（即相同的），这样大量地减少了需要训练参数的数量。CNN真正能做的，只是起到一个特征提取器的作用！所以有关应用，都是建立在CNN对图像进行特征提取的基础上进行的。</p><br/><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ol><li>局部连接：非全连接，隐含层一个神经元对应输入层一个窗口内n个神经元。</li><li>参数共享：输入层各个窗口共享一个权重矩阵。</li></ol><br/><h4 id="结构-1"><a href="#结构-1" class="headerlink" title="结构"></a>结构</h4><ul><li>输入层：用于数据的输入</li><li>卷积层：使用<strong>卷积核</strong>进行特征提取和特征映射</li><li>激励层：由于卷积也是一种线性运算，因此需要通过<strong>激励函数</strong>进行非线性映射</li><li>池化层：进行下采样，对特征图稀疏处理（<strong>降维</strong>），减少数据运算量。</li><li>全连接层：通常在CNN的尾部进行重新拟合，减少特征信息的损失</li><li>输出层：用于输出结果</li></ul><br/><h5 id="输入层"><a href="#输入层" class="headerlink" title="输入层"></a>输入层</h5><p>CNN的输入层的输入格式保留了图片本身的结构。</p><p>对于黑白的 28×28 的图片，CNN的输入是一个 28×28 的的二维神经元；而对于RGB格式的28×28图片，CNN的输入则是一个 3×28×28 的三维神经元。</p><br/><h5 id="卷积层"><a href="#卷积层" class="headerlink" title="卷积层"></a>卷积层</h5><p>在卷积层中有两个重要的概念：</p><ul><li>local receptive fields：感受视野或窗口</li><li>shared weights：共享权值</li></ul><p>从待识别的图片中提取<strong>特征（feature）</strong>，使这些feature能够代表图中的内容。feature在CNN中也被成为<strong>卷积核（filter）</strong>，一般是3X3，或者5X5的大小。构成卷积核的矩阵称为<strong>权重矩阵</strong>。</p><p>卷积核的权重矩阵的值，便是卷积神经网络的参数<strong>w</strong>，卷积核可附带一个偏移项 <strong>b</strong> ，它的初值可以随机来生成，可通过训练进行变化。</p><h6 id="卷积运算"><a href="#卷积运算" class="headerlink" title="卷积运算"></a>卷积运算</h6><p>卷积运算总结起来就是：对应相乘，求和平均。</p><p>定义一个<em>local receptive fields</em>（窗口），使其大小与卷积核大小相同。然后定义一个步长<em>stride = n</em>，该窗口从输入向量矩阵的左上角开始，每次向右滑动n个单位。当滑动到最右边时，窗口回到最左侧并向下滑动n个单位，然后继续向右扫描，以此类推。为了扫描到边缘的一些特征，感受视野可能会“出界”，这时需要对**边界扩充(pad)**，边界扩充可以设为 0 或 其他值。步长 和 边界扩充值的大小由用户来定义。</p><p>窗口每滑动到一个地方，将窗口里的每个数值与权重矩阵对应位置的值相乘，然后将所有相乘后的值求平均值，最后将这个平均值放入一个新的矩阵中。当窗口扫描完整个输入向量图后，这个矩阵也被填满，我们将这个新的矩阵称为<strong>feature map</strong> （<strong>特征图</strong>）。至此，卷积运算就结束了。</p><p>需要注意的是：</p><ul><li>feature map是每一个feature从原始图像中提取出来的“特征”。其中的值，越接近为<strong>1</strong>，表示对应位置和feature的<strong>匹配越完整</strong>；越接近-<strong>1</strong>，表示对应位置和feature的反面匹配越完整，而值接近<strong>0</strong>表示对应位置没有任何匹配或者说<strong>没有什么关联</strong>。</li><li>一个卷积核产生一张feature map。</li></ul><br/><h5 id="激励层"><a href="#激励层" class="headerlink" title="激励层"></a>激励层</h5><p>激励层主要对卷积层的输出进行一个非线性映射，因为卷积层的计算是一种线性计算。使用的激励函数一般为ReLu函数：</p><p>​                                                                                                 <em><strong>f(x)=max(x,0)</strong></em></p><p>即，保留大于等于0的值，其余所有小于0的数值直接改写为0。</p><p>为什么要这么做呢？上面说到，卷积后产生的特征图中的值，越靠近1表示与该特征越关联，越靠近-1表示越不关联，而我们进行特征提取时，为了使得数据更少，操作更方便，就直接舍弃掉那些不相关联的数据。</p><p>经过激励后，feature map中小于0的值都被置为0。</p><br/><h5 id="池化层"><a href="#池化层" class="headerlink" title="池化层"></a>池化层</h5><p>池化层的作用就是将feature map进行降维，进一步简化数据。</p><p>池化分为两种，Max Pooling 最大池化、Average Pooling平均池化。顾名思义，最大池化就是取最大值，平均池化就是取平均值。</p><p>如最大池化，先选取一个nxn的池化窗口，设步长为m，在特征图上从左到右，从上到下扫描（和卷积运算类似）。每次滑动，取窗口内所有值的最大值作为特征图对应位置的新值。</p><br/><h5 id="全连接层和输出层"><a href="#全连接层和输出层" class="headerlink" title="全连接层和输出层"></a>全连接层和输出层</h5><p>全连接层主要对特征进行重新拟合，减少特征信息的丢失。全连接层中有一个非常重要的函数—-Softmax，它是一个分类函数，输出的是每个对应类别的概率值。</p><p>输出层主要准备做好最后目标结果的输出。</p><br/><h4 id="卷积神经网络的训练与优化"><a href="#卷积神经网络的训练与优化" class="headerlink" title="卷积神经网络的训练与优化"></a>卷积神经网络的训练与优化</h4><p>神经网络到底需要训练什么呢？训练的就是那些卷积核（filter）。</p><p>在最开始，训练前，我们定义一个大小为3X3的卷积核，那么里面具体的值是多少，我们都不知道，所以就用随机初始化法来进行赋值，卷积核获取到了一个随机值，便可以开始工作。</p><p>这样得出来的结果肯定是不准确的，所以我们通过<strong>BP算法</strong>，根据得到的结果反向改变卷积核的数值，从而达到训练卷积核的效果。</p><br/><p><a href="https://zhuanlan.zhihu.com/p/27908027">参考文章</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>word2vec的理解与使用</title>
      <link href="/2021/01/19/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/word2vec%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
      <url>/2021/01/19/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/word2vec%E7%9A%84%E7%90%86%E8%A7%A3%E4%B8%8E%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h3 id="通俗理解word2vec"><a href="#通俗理解word2vec" class="headerlink" title="通俗理解word2vec"></a>通俗理解word2vec</h3><p>Word2vec，是一群用来产生词向量的相关模型。这些模型为浅而双层的神经网络，用来训练以重新建构语言学之词文本。网络以词表现，并且需猜测相邻位置的输入词。训练完成之后，word2vec模型可用来映射每个词到一个向量，可用来表示词对词之间的关系，该向量为神经网络之隐藏层。</p><p>这个模型是如何定义数据的输入和输出呢？一般分为CBOW(Continuous Bag-of-Words，词袋模型 )与Skip-Gram两种模型。CBOW模型的训练输入是某一个特征词的上下文相关的词对应的词向量，而输出就是这特定的一个词的词向量。Skip-Gram模型和CBOW的思路是反着来的，即输入是特定的一个词的词向量，而输出是特定词对应的上下文词向量。CBOW对小型数据库比较合适，而Skip-Gram在大型语料中表现更好。</p><span id="more"></span><h3 id="word2vec的使用"><a href="#word2vec的使用" class="headerlink" title="word2vec的使用"></a>word2vec的使用</h3><h6 id="word2vec的安装"><a href="#word2vec的安装" class="headerlink" title="word2vec的安装"></a>word2vec的安装</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install gensim</span><br></pre></td></tr></table></figure><h6 id="模型构建参数详解"><a href="#模型构建参数详解" class="headerlink" title="模型构建参数详解"></a>模型构建参数详解</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> gensim.models <span class="keyword">import</span> word2vev</span><br><span class="line"></span><br><span class="line">model=word2vec.Word2Vec(sentences,sg=<span class="number">1</span>,size=<span class="number">100</span>,window=<span class="number">5</span>,min_count=<span class="number">2</span>,negative=<span class="number">3</span>,sample=<span class="number">0.001</span>,hs=<span class="number">1</span>,workers=<span class="number">4</span>) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 该步骤也可分解为以下三步（但没必要）： </span></span><br><span class="line"><span class="comment"># model=gensim.model.Word2Vec() 建立一个空的模型对象 </span></span><br><span class="line"><span class="comment"># model.build_vocab(sentences) 遍历一次语料库建立词典 </span></span><br><span class="line"><span class="comment"># model.train(sentences) 第二次遍历语料库建立神经网络模型 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># sentences 是训练所需数据</span></span><br><span class="line"><span class="comment"># sg=1 是skip—gram算法，对低频词敏感，默认sg=0为 CBOW 算法 </span></span><br><span class="line"><span class="comment"># size 是神经网络层数，值太大则会耗内存并使算法计算变慢，一般值取为100到200之间</span></span><br><span class="line"><span class="comment"># window 是句子中当前词与目标词之间的最大距离，3表示在目标词前看3-b个词，后面看b个词（b在0-3之间随机）</span></span><br><span class="line"><span class="comment"># min_count 是对词进行过滤，频率小于 min-count 的单词则会被忽视，默认值为5</span></span><br><span class="line"><span class="comment"># negative 和 sample 可根据训练结果进行微调，sample 表示更高频率的词被随机下采样到所设置的阈值，默认值为 1e-3</span></span><br><span class="line"><span class="comment"># negative: 如果&gt;0,则会采用 negativesamping，用于设置多少个 noise words </span></span><br><span class="line"><span class="comment"># hs=1 表示层级 softmax 将会被使用，默认 hs=0 且 negative 不为0，则负采样将会被选择使用</span></span><br><span class="line"><span class="comment"># workers 是线程数，此参数只有在安装了 Cpython 后才有效，否则只能使用单核</span></span><br></pre></td></tr></table></figure><p>这里着重介绍一下<code>sentences</code>参数，它可由以下两种格式载入：</p><p>1、文本格式</p><p>将所有词语用空格分隔，存入txt文本中。那么获取数据可以使用如下方法:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentences = word2vec.Text8Corpus(<span class="string">&quot;test.txt&quot;</span>)  <span class="comment"># text8为语料库文件名</span></span><br></pre></td></tr></table></figure><p>2、list嵌套格式</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sentences = [[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>],[<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>] ... ]</span><br></pre></td></tr></table></figure><br/><h6 id="模型操作"><a href="#模型操作" class="headerlink" title="模型操作"></a>模型操作</h6><p>1、保存模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">model.save(<span class="string">&quot;文本名&quot;</span>)<span class="comment"># 模型会保存到该 .py文件同级目录下，该模型打开为乱码</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># model.wv.save_word2vec_format(&quot;文件名&quot;，binary = &quot;Ture/False&quot;)  #通过该方式保存的模型，能通过文本格式打开，也能通过设置binary是否保存为二进制文件。但该模型在保存时丢弃了树的保存形式（详情参加word2vec构建过程，以类似哈夫曼树的形式保存词），所以在后续不能对模型进行追加训练</span></span><br></pre></td></tr></table></figure><p>2、加载模型</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model = Word2Vec.load(<span class="string">&quot;模型文件名&quot;</span>)</span><br></pre></td></tr></table></figure><p>3、模型追加训练</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">model.train(more_sentences)</span><br></pre></td></tr></table></figure><br/><h6 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 计算一个词的最近似的词：</span></span><br><span class="line">model.most_similar(<span class="string">&quot;word&quot;</span>, topn=<span class="number">10</span>)<span class="comment"># 计算与该词最近似的词，topn指定排名前n的词</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 计算两个词的相似度：</span></span><br><span class="line">model.similarity(<span class="string">&quot;word1&quot;</span>, <span class="string">&quot;word2&quot;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取词向量：</span></span><br><span class="line">model [<span class="string">&#x27;word&#x27;</span>]</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 机器学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-computed与watch</title>
      <link href="/2020/09/21/Vue/Vue-computed%E4%B8%8Ewatch/"/>
      <url>/2020/09/21/Vue/Vue-computed%E4%B8%8Ewatch/</url>
      
        <content type="html"><![CDATA[<h3 id="计算属性computed"><a href="#计算属性computed" class="headerlink" title="计算属性computed"></a>计算属性computed</h3><h5 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;changeMessage&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123;changeName&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">el: <span class="string">&#x27;#box&#x27;</span>,</span><br><span class="line"><span class="attr">data</span>: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Silence&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    <span class="comment">// 这是属性</span></span><br><span class="line">    <span class="function"><span class="title">changeMessage</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.message;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 这是属性</span></span><br><span class="line">    <span class="attr">changeName</span>: &#123;</span><br><span class="line">    <span class="function"><span class="title">get</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.name;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">set</span>(<span class="params">val</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.name = val;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h5 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h5><ul><li>computed计算属性，当依赖的属性的值（data中声明过或者父组件传递的props中的数据）发生变化时触发更改，否则使用的是缓存中属性值；</li><li>computed中有两个方法<code>get()</code>和<code>set()</code>，如果computed的属性值是函数，那么默认会走get方法，函数的返回值就是属性的属性值；</li><li>可以通过自定义set方法来给计算属性赋值；</li><li>computed的计算属性需要映射到DOM上，否则无效，即计算属性须被模板使用；</li><li>不支持异步，当computed内有异步操作时无效，无法监听数据的变化。</li></ul><span id="more"></span><h3 id="监听属性watch"><a href="#监听属性watch" class="headerlink" title="监听属性watch"></a>监听属性watch</h3><h5 id="用法-1"><a href="#用法-1" class="headerlink" title="用法"></a>用法</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;box&quot;</span>&gt;</span><br><span class="line">    <span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span> </span></span><br><span class="line"><span class="xml"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line"></span><br><span class="line">data: &#123;</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;123&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Silence&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="comment">// 此处message是data中的message</span></span><br><span class="line"><span class="attr">message</span>: <span class="function"><span class="keyword">function</span>(<span class="params">newVal, oldVal</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(oldVal+<span class="string">&#x27;,&#x27;</span>+newVal);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">name</span>: &#123;</span><br><span class="line">        <span class="attr">handler</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;&#125;,</span><br><span class="line">        <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">deep</span>: <span class="literal">true</span>,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><h5 id="概念-1"><a href="#概念-1" class="headerlink" title="概念"></a>概念</h5><ul><li><p>不支持缓存，数据发生变化直接会触发相应的操作；</p></li><li><p>支持异步；</p></li><li><p>监听的函数接收两个参数，第一个参数是最新的值；第二个参数是变化之前的值；</p></li><li><p>监听的数据必须是data中声明过或者父组件传递过来的props中的数据；</p></li><li><p>监听的函数有两个参数：<br><code>immediate</code>：组件加载立即触发回调函数执行</p><p><code>deep</code>: 深度监听，为了发现<strong>对象内部值</strong>的变化，复杂类型的数据时使用，例如数组中的对象内容的改变，注意监听数组的变动不需要这么做</p></li></ul><h3 id="computed与watch的区别"><a href="#computed与watch的区别" class="headerlink" title="computed与watch的区别"></a>computed与watch的区别</h3><ol><li>computed 适合多个数据变化影响一个数据；watch 适合一个数据的变动影响多个数据或者复杂的运算。</li><li>当需要在数据变化时执行异步或开销较大的操作时使用watch。</li><li>computed是在HTML DOM加载后马上执行的，所以执行顺序是先computed然后watch。</li></ol>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>节流与防抖</title>
      <link href="/2020/09/02/JS/%E8%8A%82%E6%B5%81%E4%B8%8E%E9%98%B2%E6%8A%96/"/>
      <url>/2020/09/02/JS/%E8%8A%82%E6%B5%81%E4%B8%8E%E9%98%B2%E6%8A%96/</url>
      
        <content type="html"><![CDATA[<h3 id="什么是防抖与节流"><a href="#什么是防抖与节流" class="headerlink" title="什么是防抖与节流"></a>什么是防抖与节流</h3><p>有这样一种应用场景，在滚动事件中做一个复杂取值计算或者频繁的触发一个事件，这是很影响性能并容易导致页面卡顿的，所以要合并多次请求，通过函数做一个精确操作。这时就会用到函数防抖或者函数节流。</p><ul><li>函数节流是：在固定的时间内触发事件，每隔n秒触发一次</li><li>函数防抖是：当你频繁触发后，n秒内只执行一次</li></ul><h4 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h4><p>触发高频函数事件后，n秒内函数只能执行一次，如果在n秒内这个事件再次被触发的话，那么会重新计算时间。</p><p>实现：每次触发事件时都取消之前的延时调用方法，直到在规定时间内事件没有再被触发时执行事件。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">debounce</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> timeout = <span class="literal">null</span>; <span class="comment">// 创建一个标记用来存放定时器的返回值</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timeout); <span class="comment">// 每当用户输入的时候把前一个 setTimeout clear 掉</span></span><br><span class="line">        timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// 然后又创建一个新的 setTimeout, 这样就能保证输入字符后的 interval 间隔内如果还有字符输入的话，就不会执行 fn 函数</span></span><br><span class="line">            fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;防抖成功&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> box = <span class="built_in">document</span>.getElementById(<span class="string">&#x27;box&#x27;</span>)</span><br><span class="line">box.addEventListener(<span class="string">&#x27;click&#x27;</span>, debounce(sayHi))</span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h4><p>高频触发事件，每隔n秒执行一次，稀释函数的执行频率。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">throttle</span>(<span class="params">fn</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> canRun = <span class="literal">true</span>; <span class="comment">// 通过闭包保存一个标记</span></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!canRun) <span class="keyword">return</span>; <span class="comment">// 在函数开头判断标记是否为true，不为true则return</span></span><br><span class="line">        canRun = <span class="literal">false</span>; <span class="comment">// 立即设置为false</span></span><br><span class="line">        <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// 将外部传入的函数的执行放在setTimeout中</span></span><br><span class="line">            fn.apply(<span class="built_in">this</span>, <span class="built_in">arguments</span>);</span><br><span class="line">            <span class="comment">// 最后在setTimeout执行完毕后再把标记设置为true(关键)表示可以执行下一次循环了。当定时器没有执行的时候标记永远是false，在开头被return掉</span></span><br><span class="line">            canRun = <span class="literal">true</span>;</span><br><span class="line">        &#125;, <span class="number">500</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params">e</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;节流成功&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">&#x27;resize&#x27;</span>, throttle(sayHi));</span><br></pre></td></tr></table></figure><h4 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h4><h5 id="debounce（防抖）"><a href="#debounce（防抖）" class="headerlink" title="debounce（防抖）"></a>debounce（防抖）</h5><ul><li>search搜索联想，用户在不断输入值时，用防抖来节约请求资源。</li><li>频繁操作点赞和取消点赞，因此需要获取最后一次操作结果并发送给服务器</li></ul><h5 id="throttle（节流）"><a href="#throttle（节流）" class="headerlink" title="throttle（节流）"></a>throttle（节流）</h5><ul><li>鼠标不断点击触发，mousedown(单位时间内只触发一次)</li><li>window触发resize的时候，不断的调整浏览器窗口大小会不断的触发这个事件，用节流来让其只触发一次</li></ul>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScrip数组API</title>
      <link href="/2020/08/14/JS/JavaScrip%E6%95%B0%E7%BB%84API/"/>
      <url>/2020/08/14/JS/JavaScrip%E6%95%B0%E7%BB%84API/</url>
      
        <content type="html"><![CDATA[<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><h6 id="every"><a href="#every" class="headerlink" title="every() :"></a>every() :</h6><p>返回值为boolean类型，每次遍历的结果都为true则返回true，有任何一个返回不为true时，则返回false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> flag = array.every(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 不写return时返回undefined </span></span><br><span class="line">    <span class="keyword">if</span> (element &lt; <span class="number">5</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// flag结果为false，因为当index = 4时不满足，故最后结果为false；</span></span><br></pre></td></tr></table></figure><h6 id="filter"><a href="#filter" class="headerlink" title="filter() :"></a>filter() :</h6><p>返回值为数组，当遍历时的结果为true，则将该结果写入新数组中，最后返回该新数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = array.filter(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element &gt; <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后newArr = [3, 4, 5]</span></span><br></pre></td></tr></table></figure><h6 id="foreach"><a href="#foreach" class="headerlink" title="foreach()"></a>foreach()</h6><p> 无返回值，纯数组操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">array.foreach(<span class="function"><span class="keyword">function</span>(<span class="params">element, index, arr</span>) </span>&#123;</span><br><span class="line">    log.info(element)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// foreach方法最大的问题是无法跳出循环，哪怕是return了或者抛异常，它都会看作continue操作，直到执行完所有的遍历操作为止。</span></span><br></pre></td></tr></table></figure><span id="more"></span><h6 id="some"><a href="#some" class="headerlink" title="some()"></a>some()</h6><p>返回值为boolean类型，当遍历时有一个结果返回true时，终止遍历操作，返回true。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line">array.some(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (element &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 当遍历到index = 1时，满足条件返回true，结束循环，一共只执行了两次遍历，相对比较节约资源</span></span><br></pre></td></tr></table></figure><h6 id="map"><a href="#map" class="headerlink" title="map()"></a>map()</h6><p> 返回值为数组，将每次遍历的返回值写入新数组中，最后返回新数组。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = array.map(<span class="function"><span class="keyword">function</span>(<span class="params">element, index, arr</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> element + <span class="number">5</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后newArr = [6, 7, 8, 9, 10]</span></span><br></pre></td></tr></table></figure><h6 id="find"><a href="#find" class="headerlink" title="find()"></a>find()</h6><p> 返回值为数组中第一个满足条件的元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> result = array.find(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> element &gt; <span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果 result = 3</span></span><br></pre></td></tr></table></figure><h6 id="findIndex"><a href="#findIndex" class="headerlink" title="findIndex()"></a>findIndex()</h6><p>返回值为数组中第一个满足条件的元素的索引。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> index = array.findIndex(<span class="function"><span class="params">element</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> element &gt; <span class="number">2</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果 index = 2</span></span><br></pre></td></tr></table></figure><h3 id="其它API"><a href="#其它API" class="headerlink" title="其它API"></a>其它API</h3><h6 id="push"><a href="#push" class="headerlink" title="push()"></a>push()</h6><p>返回值为新数组长度，把一个元素增加到数组的末尾。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> len = array.push<span class="string">&#x27;(&#x27;</span>e<span class="string">&#x27;);</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">// 结果：len = 5， array = [&#x27;</span>a<span class="string">&#x27;, &#x27;</span>b<span class="string">&#x27;, &#x27;</span>c<span class="string">&#x27;, &#x27;</span>d<span class="string">&#x27;, &#x27;</span>e<span class="string">&#x27;]</span></span><br></pre></td></tr></table></figure><h6 id="pop"><a href="#pop" class="headerlink" title="pop()"></a>pop()</h6><p> 返回值为数组最后一个元素，删除数组中的最后一个值，并将其结果返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]；</span><br><span class="line"><span class="keyword">var</span> result = array.pop();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果： result = &#x27;e&#x27;, array = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span></span><br></pre></td></tr></table></figure><h6 id="unshift"><a href="#unshift" class="headerlink" title="unshift()"></a>unshift()</h6><p>返回值为新数组的长度，在数组最前端增加一个元素。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> len = array.unshift(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果：len = 5, array = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span></span><br></pre></td></tr></table></figure><h6 id="shift"><a href="#shift" class="headerlink" title="shift()"></a>shift()</h6><p>返回值为删除的元素本身，删除数组最前端的元素，并将其返回。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> result = array.shift();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果: result = &#x27;a&#x27;, array = [&#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;, &#x27;e&#x27;]</span></span><br></pre></td></tr></table></figure><h6 id="reverse"><a href="#reverse" class="headerlink" title="reverse()"></a>reverse()</h6><p>返回值为反转后的数组，反转数组的顺序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> newArr = array.reverse();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果： array = [5, 4, 3, 2 ,1]</span></span><br></pre></td></tr></table></figure><h6 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h6><p>返回值为排序后的数组，当不传参时，按照字母的编码顺序进行排序，也可以自行传入对比函数进行排序。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1.当不传的对比函数时</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;2&#x27;</span>];</span><br><span class="line">array.sort();</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 结果：array = [&#x27;1&#x27;, &#x27;11&#x27;, &#x27;2&#x27;, &#x27;3&#x27;] (字符串顺序)</span></span><br><span class="line"><span class="comment">* 若想要按照数字顺序，需要传入参数 array.sort(sortNumber)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.当传入对比函数时</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;11&#x27;</span>, <span class="string">&#x27;2&#x27;</span>];</span><br><span class="line">array.sort(<span class="function"><span class="keyword">function</span> (<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> n1 &gt; n2;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 对比函数中必须有两个参数</span></span><br><span class="line"><span class="comment">* 返回值大于0时，表示n1在n2后面</span></span><br><span class="line"><span class="comment">* 返回值小于0时，表示n1在n2前面</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h6 id="slice"><a href="#slice" class="headerlink" title="slice()"></a>slice()</h6><p>返回值为截取后的数组，从指定索引位置进行数组截取。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 1.当只有一个参数时，表示从该索引开始截取，一直到末尾, 原数组不变</span></span><br><span class="line"><span class="keyword">var</span> newArr = array.slice(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果： array = [1, 2, 3, 4, 5]， newArr = [2, 3, 4, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.当有两个参数时，表示截取两个索引之间的子数组(前闭后开)， 原数组不变</span></span><br><span class="line"><span class="keyword">var</span> newArr = array.slice(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果： array = [1, 2, 3, 4, 5]， newArr = [2, 3]</span></span><br></pre></td></tr></table></figure><h6 id="splice"><a href="#splice" class="headerlink" title="splice()"></a>splice()</h6><p>返回值为操作后的新数组，对数组进行在指定位置的删除、插入操作。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 参数1：进行操作的起始位置</span></span><br><span class="line"><span class="comment">* 参数2：进行删除操作的长度</span></span><br><span class="line"><span class="comment">* 参数3: 进行插入操作的元素（该参数为可变参数）</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">var</span> newArr = array.splice(<span class="number">1</span>, <span class="number">1</span>, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 先进行删除操作，从索引为1的位置开始，删除长度1，得到newArr = [1, 3, 4, 5]</span></span><br><span class="line"><span class="comment">* 再进行插入操作，从索引为1的位置开始，插入&#x27;a&#x27;, &#x27;b&#x27;两个元素,得到newArr = [1, &#x27;a&#x27;, &#x27;b&#x27;, 3, 4, 5]</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h6 id="indexOf"><a href="#indexOf" class="headerlink" title="indexOf()"></a>indexOf()</h6><p>返回值为指定元素的索引，从指定位置开始正序搜索指定元素，返回指定元素索引，若没找到则返回-1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 1.当只有一个参数时，该参数为要搜索的元素</span></span><br><span class="line"><span class="keyword">var</span> index =array.indexOf(<span class="number">2</span>)；</span><br><span class="line"><span class="comment">// 结果： index = 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.当有两个参数时，第一个参数表示要搜索的元素，第二个参数表示从指定索引开始搜索的索引值</span></span><br><span class="line"><span class="keyword">var</span> index =array.indexOf(<span class="number">2</span>, <span class="number">2</span>)；</span><br><span class="line"><span class="comment">// 结果： index = 2</span></span><br><span class="line"><span class="number">12345678</span></span><br></pre></td></tr></table></figure><h6 id="lastIndexOf"><a href="#lastIndexOf" class="headerlink" title="lastIndexOf()"></a>lastIndexOf()</h6><p>返回值为指定元素的索引，从指定位置开始倒序搜索指定元素，返回指定元素索引，若没找到则返回-1。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="comment">// 1.当只有一个参数时，该参数为要搜索的元素</span></span><br><span class="line"><span class="keyword">var</span> index =array.indexOf(<span class="number">2</span>)；</span><br><span class="line"><span class="comment">// 结果： index = 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2.当有两个参数时，第一个参数表示要搜索的元素，第二个参数表示从指定索引开始搜索的索引值</span></span><br><span class="line"><span class="keyword">var</span> index =array.indexOf(<span class="number">2</span>, <span class="number">1</span>)；</span><br><span class="line"><span class="comment">// 结果： index = 1</span></span><br></pre></td></tr></table></figure><h6 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h6><p>返回值为boolean类型，判断一个数组是否包含指定的值，包含返回true，不包含返回false。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>, <span class="string">&#x27;d&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> result1 = array.includes(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> result2 = array.includes(<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 结果 result1 = true, result2 = false</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript字符串API</title>
      <link href="/2020/08/14/JS/JavaScript%E5%AD%97%E7%AC%A6%E4%B8%B2API/"/>
      <url>/2020/08/14/JS/JavaScript%E5%AD%97%E7%AC%A6%E4%B8%B2API/</url>
      
        <content type="html"><![CDATA[<h6 id="String-prototype-anchor"><a href="#String-prototype-anchor" class="headerlink" title="String.prototype.anchor()"></a>String.prototype.anchor()</h6><p>anchor()方法用于创建一个<a>html描元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;我是html内容&#x27;</span>.anchor(<span class="string">&#x27;我是name属性值&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(str) <span class="comment">// &quot;&lt;a name=&quot;我是name属性值&quot;&gt;我是html内容&lt;/a&gt;&quot;</span></span><br></pre></td></tr></table></figure><h6 id="String-prototype-bold"><a href="#String-prototype-bold" class="headerlink" title="String.prototype.bold()"></a>String.prototype.bold()</h6><p>bold()方法用于创建<b>html元素</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;aaa&#x27;</span>.bold()</span><br><span class="line"><span class="built_in">console</span>.log(str) <span class="comment">// &quot;&lt;b&gt;aaa&lt;/b&gt;&quot;</span></span><br></pre></td></tr></table></figure><h6 id="String-prototype-charAt"><a href="#String-prototype-charAt" class="headerlink" title="String.prototype.charAt()"></a>String.prototype.charAt()</h6><p>charAt()方法用于返回字符串指定位置的字符</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;amz&#x27;</span>.charAt() <span class="comment">// &#x27;a&#x27;  不传索引则默认为0</span></span><br><span class="line"><span class="string">&#x27;amz&#x27;</span>.charAt(<span class="number">1</span>) <span class="comment">// &#x27;m&#x27; </span></span><br></pre></td></tr></table></figure><h6 id="String-prototype-concat"><a href="#String-prototype-concat" class="headerlink" title="String.prototype.concat()"></a>String.prototype.concat()</h6><p>concat()将多个字符串拼接在一起</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> a = <span class="string">&#x27;aaa&#x27;</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="string">&#x27;bbb&#x27;</span></span><br><span class="line"><span class="keyword">const</span> c = <span class="string">&#x27;ccc&#x27;</span>.concat(a, b, <span class="string">&#x27;ddd&#x27;</span>)</span><br><span class="line"><span class="built_in">console</span>.log(c) <span class="comment">// &#x27;cccaaabbbddd&#x27; hs</span></span><br></pre></td></tr></table></figure><h6 id="String-prototype-endsWith"><a href="#String-prototype-endsWith" class="headerlink" title="String.prototype.endsWith()"></a>String.prototype.endsWith()</h6><p>endsWith()方法用于判断当前字符串是否以另一个给定字符串结尾</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;my name is amz&#x27;</span> </span><br><span class="line">name.endsWith(<span class="string">&#x27;z&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">name.endsWith(<span class="string">&#x27;mz&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">name.endsWith(<span class="string">&#x27;amz&#x27;</span>) <span class="comment">// true</span></span><br><span class="line">name.endsWith(<span class="string">&#x27;is&#x27;</span>) <span class="comment">// falsejs</span></span><br></pre></td></tr></table></figure><span id="more"></span><h6 id="String-prototype-startsWith"><a href="#String-prototype-startsWith" class="headerlink" title="String.prototype.startsWith()"></a>String.prototype.startsWith()</h6><p>startsWith()判断当前字符串是否是以另外一个给定的子字符串开头</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> amz = <span class="string">&#x27;my name is amz&#x27;</span></span><br><span class="line">amz.startsWith(<span class="string">&#x27;my n&#x27;</span>) <span class="comment">//true</span></span><br><span class="line">amz.startsWith(<span class="string">&#x27;amz&#x27;</span>, <span class="number">11</span>) <span class="comment">// true  第二个参数是从哪里开始</span></span><br></pre></td></tr></table></figure><h6 id="String-prototype-includes"><a href="#String-prototype-includes" class="headerlink" title="String.prototype.includes()"></a>String.prototype.includes()</h6><p>includes()判断一个字符串是否包含在另一个字符串中</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;my name is amz&#x27;</span> </span><br><span class="line">name.includes(<span class="string">&#x27;amz&#x27;</span>) <span class="comment">//true</span></span><br><span class="line">name.includes(<span class="string">&#x27;s amz&#x27;</span>) <span class="comment">//true</span></span><br><span class="line">name.includes(<span class="string">&#x27;you&#x27;</span>) <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h6 id="String-prototype-indexOf"><a href="#String-prototype-indexOf" class="headerlink" title="String.prototype.indexOf()"></a>String.prototype.indexOf()</h6><p>indexOf()方法返回给定字符串在原字符串中<strong>首次</strong>出现的索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;my name is amz&#x27;</span></span><br><span class="line">name.indexOf(<span class="string">&#x27;my n&#x27;</span>) <span class="comment">//0   字符串可以给字符串</span></span><br><span class="line">name.indexOf(<span class="string">&#x27;y&#x27;</span>) <span class="comment">// 1</span></span><br><span class="line">name.indexOf(<span class="string">&#x27;m&#x27;</span>, <span class="number">6</span>) <span class="comment">//12     //第二个参数是从第几位开始找</span></span><br><span class="line">name.indexOf(<span class="string">&#x27;l&#x27;</span>) <span class="comment">// -1 没找到返回-1</span></span><br></pre></td></tr></table></figure><h6 id="String-prototype-lastIndexOf"><a href="#String-prototype-lastIndexOf" class="headerlink" title="String.prototype.lastIndexOf()"></a>String.prototype.lastIndexOf()</h6><p>lastIndexOf()方法返回给定字符串在原字符串中<strong>最后一次</strong>出现的索引</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;my name is amz&#x27;</span></span><br><span class="line">name.lastIndexOf(<span class="string">&#x27;m&#x27;</span>) <span class="comment">//12</span></span><br><span class="line">name.lastIndexOf(<span class="string">&#x27;m&#x27;</span>,<span class="number">7</span>) <span class="comment">//5 第二个参数是从第几位开始找，说白了 可以理解把name那个字符串从第七位截取，后面的不要了，　　　　　　　　　　　　　　//然后在应用一下name.lastIndexOf(&#x27;m&#x27;) ，　　　　　　　　　　　　　　//在理解一下，就是从第七位开始向前面找首次出现m的位置</span></span><br></pre></td></tr></table></figure><h6 id="String-prototype-link"><a href="#String-prototype-link" class="headerlink" title="String.prototype.link()"></a>String.prototype.link()</h6><p>link()方法用于创建一个<a>html标签</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">‘my name is amz’.link(<span class="string">&#x27;www.p8p7.com&#x27;</span>)  <span class="comment">// &lt;a href=&quot;www.p8p7.com&quot;&gt;my name is amz&lt;/a&gt;</span></span><br></pre></td></tr></table></figure><h6 id="String-prototype-padEnd"><a href="#String-prototype-padEnd" class="headerlink" title="String.prototype.padEnd()"></a>String.prototype.padEnd()</h6><p>padEnd()方法接受两个两个参数，第一个参数是目标字符串期望的长度，第二个参数是如果字符串长度没达到期望的长度就用第二个参数添加到目前字符串的尾部，使它达到期望的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">‘abc’.padEnd(<span class="number">5</span>) <span class="comment">// &#x27;abc  &#x27; 如果第二个参数没有传，就会用空格代替</span></span><br><span class="line">‘abc’.padEnd(<span class="number">2</span>, <span class="string">&#x27;amz&#x27;</span>) <span class="comment">// &#x27;abc&#x27; 如果期望长度小于目标字符串长度 那么就对目标字符串什么也不做，按照原来的返回</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span>.padEnd(<span class="number">6</span>, <span class="string">&#x27;123456&#x27;</span>) <span class="comment">// &#x27;abc123&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="String-prototype-padStart"><a href="#String-prototype-padStart" class="headerlink" title="String.prototype.padStart()"></a>String.prototype.padStart()</h6><p>padStart()方法接受两个两个参数，第一个参数是目标字符串期望的长度，第二个参数是如果字符串长度没达到期望的长度就用第二个参数添加到目前字符串的前面，使它达到期望的长度</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;abc&#x27;</span>.padStart(<span class="number">6</span>, <span class="string">&#x27;123456&#x27;</span>) <span class="comment">// &#x27;123abc&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="String-prototype-repeat"><a href="#String-prototype-repeat" class="headerlink" title="String.prototype.repeat()"></a>String.prototype.repeat()</h6><p>repeat()方法用于把字符串重复n次，n就是传递进去的参数</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;amz&#x27;</span>.repeat(<span class="number">3.5</span>)  <span class="comment">//&#x27;amzamzamz&#x27;  小说会转化成整数 向下取整</span></span><br><span class="line"><span class="string">&#x27;amz&#x27;</span>.repeat(<span class="number">0</span>)  <span class="comment">// ‘’ 重复0次就成了空字符串了</span></span><br><span class="line"><span class="string">&#x27;amz&#x27;</span>.repeat(<span class="number">1</span>) <span class="comment">// &#x27;amz&#x27;  重复1次</span></span><br><span class="line"><span class="string">&#x27;amz&#x27;</span>.repeat(<span class="number">2</span>) <span class="comment">// &#x27;amzamz&#x27;  重复2次</span></span><br></pre></td></tr></table></figure><h6 id="String-prototype-search"><a href="#String-prototype-search" class="headerlink" title="String.prototype.search()"></a>String.prototype.search()</h6><p>search()返回字符串在指定字符串首次出现的位置，如果没找到就返回-1</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;my name is amz&#x27;</span>.search(<span class="string">&#x27;amz&#x27;</span>)  <span class="comment">// 11</span></span><br><span class="line"><span class="string">&#x27;my name is amz&#x27;</span>.search(<span class="string">&#x27;my&#x27;</span>) <span class="comment">// 0</span></span><br><span class="line"><span class="string">&#x27;my name is amz&#x27;</span>.search(<span class="regexp">/amz/</span>) <span class="comment">// 11 也可以传正则表达式</span></span><br></pre></td></tr></table></figure><h6 id="String-prototype-slice"><a href="#String-prototype-slice" class="headerlink" title="String.prototype.slice()"></a>String.prototype.slice()</h6><p>slice()截取字符串的一部分，并返回这个新字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&#x27;my name is amz&#x27;</span>.slice(<span class="number">11</span>) <span class="comment">// &quot;amz&quot; 传递2个参数，第一个参数是从什么位置开始裁剪，第二个参数是 截取到什么地方，如果没传递第二个参数，就默认裁剪到最后一位</span></span><br><span class="line"><span class="string">&#x27;my name is amz&#x27;</span>.slice(<span class="number">0</span>,<span class="number">2</span>) <span class="comment">// &#x27;my&#x27; 从第1位裁剪到第三位</span></span><br><span class="line"><span class="string">&#x27;my name is amz&#x27;</span>.slice(<span class="number">0</span>,-<span class="number">1</span>) <span class="comment">// &quot;my name is am&quot;  两个参数都可以是负数， 负数参数相加原字符串的长度  也就是上面的意思是说 从第1位裁剪到&#x27;my name is amz&#x27;.length + -1的位置</span></span><br></pre></td></tr></table></figure><h6 id="String-prototype-split"><a href="#String-prototype-split" class="headerlink" title="String.prototype.split()"></a>String.prototype.split()</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">split()方法把字符串分割成数组</span><br><span class="line"><span class="keyword">const</span> amz = <span class="string">&#x27;my name is amz&#x27;</span></span><br><span class="line">amz.split()  <span class="comment">//  [&#x27;my name is amz&#x27;]</span></span><br><span class="line">amz.split(<span class="string">&#x27; &#x27;</span>, <span class="number">2</span>)  <span class="comment">// [&#x27;m&#x27;, &#x27;y&#x27;]  第二个参数是获取字符串的几位，分割成数组</span></span><br><span class="line">amz.split(<span class="string">&#x27;name&#x27;</span>)  <span class="comment">// [&quot;my &quot;, &quot;is amz&quot;]   第一个参数是 拿掉字符串匹配的字符段 然后分割数组</span></span><br><span class="line">amz.split(<span class="string">&#x27;m&#x27;</span>)  <span class="comment">// [&quot;&quot;, &quot;y na&quot;, &quot;e is a&quot;, &quot;z&quot;]   第一个参数可以是正则表达式</span></span><br></pre></td></tr></table></figure><h6 id="String-prototype-substr"><a href="#String-prototype-substr" class="headerlink" title="String.prototype.substr()"></a>String.prototype.substr()</h6><p>substr()方法返回从指定位置开始 到指定数量的字符串</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> amz = <span class="string">&#x27;my name is amz&#x27;</span></span><br><span class="line">amz.substr(<span class="number">3</span>) <span class="comment">// &#x27;name is amz&#x27;</span></span><br><span class="line">amz.substr(-<span class="number">3</span>) <span class="comment">// 字符串长度+ -3    ‘amz’</span></span><br><span class="line">amz.substr(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">// &#x27;am&#x27;  第二个参数是几位</span></span><br></pre></td></tr></table></figure><p>如果开始位置也就是第一个字符串大于字符串长度，则返回一个空字符串 第二个位置超出了字符串剩余长度，则默认为字符串剩余长度。为负数则是字符串长度加负数，也就是说比如我第一个参数为-1 那么我剩余字符串长度是1了，最多只能复制一个长度为1的字符串，第二个值大于1都默认转化为1</p><h6 id="String-prototype-substring"><a href="#String-prototype-substring" class="headerlink" title="String.prototype.substring()"></a>String.prototype.substring()</h6><p>substring()返回字符串从开始索引到结束索引之间的一个子集</p><p>也就是提取从substring()第一个参数到第二个参数的 子字符串，参数均为整数，小于0都会被转化为0 ，如果大于字符串长度都会被转化为字符串长度 如果第二个参数大于第一个参数，则会默认吧两个参数位置调换</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> amz = <span class="string">&#x27;my name is amz&#x27;</span></span><br><span class="line">amz.substring(<span class="number">1</span>,<span class="number">4</span>) <span class="comment">// &#x27;y n&#x27;  从第一位截取第四位</span></span><br><span class="line">amz.substring(<span class="number">4</span>,<span class="number">1</span>) <span class="comment">// &#x27;y n&#x27;  因为第二个参数大于第一个参数，则默认调换她们的位置    所以还是从第一位截取第四位</span></span><br></pre></td></tr></table></figure><h6 id="String-prototype-toLocaleLowerCase"><a href="#String-prototype-toLocaleLowerCase" class="headerlink" title="String.prototype.toLocaleLowerCase()"></a>String.prototype.toLocaleLowerCase()</h6><p>toLocaleLowerCase()转化字符串为小写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> amz = <span class="string">&#x27;my NAME is amz&#x27;</span></span><br><span class="line">amz.toLocaleLowerCase()  <span class="comment">//&#x27;my name is amz&#x27;</span></span><br><span class="line"><span class="keyword">const</span> amz1 = <span class="string">&#x27;MY NAME IS AMZ&#x27;</span> </span><br><span class="line">amz1.toLocaleLowerCase()  <span class="comment">//my name is amz&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="String-prototype-toLocaleUpperCase"><a href="#String-prototype-toLocaleUpperCase" class="headerlink" title="String.prototype.toLocaleUpperCase()"></a>String.prototype.toLocaleUpperCase()</h6><p>toLocaleUpperCase()将字符串转化为大写</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> amz = <span class="string">&#x27;my name IS amz&#x27;</span></span><br><span class="line">amz.toLocaleUpperCase() <span class="comment">// &#x27;&#x27;MY NAME IS AMZ</span></span><br></pre></td></tr></table></figure><h6 id="String-prototype-toUpperCase"><a href="#String-prototype-toUpperCase" class="headerlink" title="String.prototype.toUpperCase()"></a>String.prototype.toUpperCase()</h6><p>toUpperCase()和oLocaleUpperCase()方法一样 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> amz = <span class="string">&#x27;my name IS amz’</span></span><br><span class="line"><span class="string">amz.toUpperCase() // &#x27;</span><span class="string">&#x27;MY NAME IS AMZ</span></span><br></pre></td></tr></table></figure><h6 id="String-prototype-toString"><a href="#String-prototype-toString" class="headerlink" title="String.prototype.toString()"></a>String.prototype.toString()</h6><p>toString()反回指定对象的字符串形式 </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> amz = <span class="string">&#x27;my name is amz‘</span></span><br><span class="line"><span class="string">amz.toString()  // &#x27;</span>my name is amz<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="String-prototype-trim"><a href="#String-prototype-trim" class="headerlink" title="String.prototype.trim()"></a>String.prototype.trim()</h6><p>trim()清除字符串两端的空格</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> amz = <span class="string">&#x27;  my name is amz  ‘</span></span><br><span class="line"><span class="string">amz.trim()  // &#x27;</span>my name is amz<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><h6 id="String-prototype-trimLeft"><a href="#String-prototype-trimLeft" class="headerlink" title="String.prototype.trimLeft()"></a>String.prototype.trimLeft()</h6><p>trimLeft()方法清除字符串左边的空格</p><h6 id="String-prototype-trimRight"><a href="#String-prototype-trimRight" class="headerlink" title="String.prototype.trimRight()"></a>String.prototype.trimRight()</h6><p>trimRight()方法清除字符串右边的空格</p><h6 id="String-prototype-replace"><a href="#String-prototype-replace" class="headerlink" title="String.prototype.replace()"></a>String.prototype.replace()</h6><p>replace()方法返回一个由替换值 替换一些匹配到的新字符串，</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> amz = <span class="string">&#x27;my name is amz‘</span></span><br><span class="line"><span class="string">amz.replace(/amz/, &#x27;</span><span class="number">123</span><span class="string">&#x27;) // &#x27;</span>my name is <span class="number">123</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">amz.replace(&#x27;</span>m<span class="string">&#x27;, &#x27;</span><span class="number">123</span><span class="string">&#x27;) //  &#x27;</span>123y name is amz<span class="string">&#x27;</span></span><br></pre></td></tr></table></figure><p>可以是正则表达式匹配 也可以是字符串匹配</p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-数据库过滤器filter</title>
      <link href="/2020/07/29/Django/Django-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%87%E6%BB%A4%E5%99%A8filter/"/>
      <url>/2020/07/29/Django/Django-%E6%95%B0%E6%8D%AE%E5%BA%93%E8%BF%87%E6%BB%A4%E5%99%A8filter/</url>
      
        <content type="html"><![CDATA[<p>在做django项目时，难免会需要对数据库中的数据进行筛选，django有自己的数据库过滤语法。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">users = User.objects.<span class="built_in">filter</span>()</span><br></pre></td></tr></table></figure><p>其中有多种参数：</p><ul><li><code>__contains </code>：包含， like ‘%aaa%’； <code>__icontains </code>：包含（ 忽略大小写） ilike ‘%aaa%’，但是对于sqlite来说，contains的作用效果等同于 icontains</li><li><code>__exact</code> ：精确等于， like ‘aaa’ ；<code>iexact</code> 精确等于（忽略大小写） ilike ‘aaa’</li><li><code>__gt</code> 大于</li><li><code>__gte</code> 大于等于</li><li><code>__lt</code> 小于</li><li><code>__lte</code> 小于等于</li><li><code>__in</code> 存在于一个list范围内</li><li><code>__startswith</code> 以…开头</li><li><code>__istartswith</code> 以…开头 忽略大小写</li><li><code>__endswith </code>以…结尾</li><li><code>__iendswith</code> 以…结尾，忽略大小写</li><li><code>__range</code> 在…范围内</li><li><code>__year</code> 日期字段的年份</li><li><code>__month</code> 日期字段的月份</li><li><code>__day </code>日期字段的日</li><li><code>__isnull</code>=True/False 空查询</li></ul><p><strong>“Q() |” 或  ；“&amp;”与(逗号效果一样) ； “~”非(不等于)</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.db.models imports Q</span><br><span class="line"></span><br><span class="line">XXX.objects.<span class="built_in">filter</span>(Q(id__gt=<span class="number">3</span>)|Q(bread__gt=<span class="number">2</span>))</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-实现路由跳转传值的几种方式</title>
      <link href="/2020/07/29/Vue/Vue-%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
      <url>/2020/07/29/Vue/Vue-%E5%AE%9E%E7%8E%B0%E8%B7%AF%E7%94%B1%E8%B7%B3%E8%BD%AC%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h3 id="一、router-link"><a href="#一、router-link" class="headerlink" title="一、router-link"></a>一、router-link</h3><p>URL路径：<code>http://localhost:8080/#/test?userid=1</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">&quot;&#123;path:&#x27;/test&#x27;,query: &#123;userid: id&#125;&#125;&quot;</span>&gt;</span>跳转<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><p>接收数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> id = <span class="built_in">this</span>.$route.query.userid</span><br></pre></td></tr></table></figure><h3 id="二、this-router-push"><a href="#二、this-router-push" class="headerlink" title="二、this.$router.push()"></a>二、this.$router.push()</h3><h4 id="1、使用path-query"><a href="#1、使用path-query" class="headerlink" title="1、使用path+query"></a>1、使用path+query</h4><p>URL路径：<code>http://localhost:8080/#/selectCate?userid=1</code></p><p>发送数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> id = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">this</span>.$router.push(&#123;<span class="attr">path</span>:<span class="string">&#x27;/selectCate&#x27;</span>,<span class="attr">query</span>:&#123;<span class="attr">userid</span>:id&#125;&#125;);</span><br></pre></td></tr></table></figure><p>接收数据：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> id = <span class="built_in">this</span>.$route.query.userid;</span><br></pre></td></tr></table></figure><h4 id="2、使用name-params"><a href="#2、使用name-params" class="headerlink" title="2、使用name+params"></a>2、使用name+params</h4><p>URL路径：<code>http://localhost:8081/#/selectCate</code></p><p>发送数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> id = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">this</span>.$router.push(&#123;<span class="attr">name</span>:<span class="string">&#x27;selectCate&#x27;</span>,<span class="attr">params</span>:&#123;<span class="attr">userid</span>:id&#125;&#125;);</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure><p>接收数据：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> id = <span class="built_in">this</span>.$route.params.userid;</span><br></pre></td></tr></table></figure><p><em><strong>注意：</strong></em>使用query，传输的值会在url后面以参数的形式显示出来，可以刷新页面，数据不变；而使用params，参数不会出现在url后面，但是一刷新页面传的值就没了。</p><h3 id="三、sessionStorage存值"><a href="#三、sessionStorage存值" class="headerlink" title="三、sessionStorage存值"></a>三、sessionStorage存值</h3><p>使用sessionstorage可以将值保存在浏览器上，方便存取。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.sessionStorage.setItem(<span class="string">&#x27;token&#x27;</span>, <span class="built_in">this</span>.token); <span class="comment">//存值</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">window</span>.sessionStorage.getItem(<span class="string">&#x27;token&#x27;</span>); <span class="comment">//取值</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django-Paginator分页器</title>
      <link href="/2020/07/07/Django/Django-Paginator%E5%88%86%E9%A1%B5%E5%99%A8/"/>
      <url>/2020/07/07/Django/Django-Paginator%E5%88%86%E9%A1%B5%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h4 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h4><p>1、导入Paginator</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> django.core.paginator <span class="keyword">import</span> Paginator</span><br></pre></td></tr></table></figure><p> 2、创建分页对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">paginator = Paginator(<span class="built_in">list</span>, <span class="number">2</span>)  </span><br><span class="line"><span class="comment"># 第一个参数是访问数据库返回得到的一个对象</span></span><br><span class="line"><span class="comment"># 第二个参数表示每一页显示几条信息</span></span><br></pre></td></tr></table></figure><p>3、创建单个页面的对象</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">page = paginator.page(page_index)</span><br><span class="line"><span class="comment"># 参数为页码</span></span><br></pre></td></tr></table></figure><span id="more"></span><h4 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h4><h6 id="paginator对象的属性"><a href="#paginator对象的属性" class="headerlink" title="paginator对象的属性"></a>paginator对象的属性</h6><ul><li><code>paginator.count</code>：总数据量</li><li><code>paginator.num_pages</code>：分页数</li><li><code>paginator.page_range</code>：页码范围</li></ul><h6 id="page对象的属性"><a href="#page对象的属性" class="headerlink" title="page对象的属性"></a>page对象的属性</h6><ul><li><code>page.has_next()</code>：判断是否有下一页</li><li><code>page.next_page_number()</code>：返回下一页的页码</li><li><code>page.has_previous()</code>：判断是否有上一页</li><li><code>page.previous_page_number()</code>：返回上一页的页码</li></ul><h4 id="自定义页码控制"><a href="#自定义页码控制" class="headerlink" title="自定义页码控制"></a>自定义页码控制</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">skus_page = paginator.page(page)</span><br><span class="line"><span class="comment"># todo: 进行页码控制，使页面上最多显示五个页码</span></span><br><span class="line"><span class="comment"># 1.总页数小于等于五页，页面上显示所有页码</span></span><br><span class="line"><span class="comment"># 2.如果当前页是前三页，显示1~5页页码</span></span><br><span class="line"><span class="comment"># 3.如果当前页是后三页，显示后五页</span></span><br><span class="line"><span class="comment"># 4.其他情况显示当前页的前两页、当前页、当前页的后两页</span></span><br><span class="line">num_pages = paginator.num_pages</span><br><span class="line"><span class="keyword">if</span> num_pages &lt;= <span class="number">5</span>:</span><br><span class="line">    pages = <span class="built_in">range</span>(<span class="number">1</span>, num_pages+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">elif</span> page &lt;= <span class="number">3</span>:</span><br><span class="line">    pages = <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">6</span>)</span><br><span class="line"><span class="keyword">elif</span> num_pages - page &lt;= <span class="number">2</span>:</span><br><span class="line">    pages = <span class="built_in">range</span>(num_pages-<span class="number">4</span>, num_pages+<span class="number">1</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    pages = <span class="built_in">range</span>(page-<span class="number">2</span>, page+<span class="number">3</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript的宏任务与微任务</title>
      <link href="/2020/06/22/JS/JavaScript%E7%9A%84%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1/"/>
      <url>/2020/06/22/JS/JavaScript%E7%9A%84%E5%AE%8F%E4%BB%BB%E5%8A%A1%E4%B8%8E%E5%BE%AE%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<h3 id="一、同步任务与异步任务"><a href="#一、同步任务与异步任务" class="headerlink" title="一、同步任务与异步任务"></a>一、同步任务与异步任务</h3><p>首先，我们需要搞清楚同步任务和异步任务的概念以及工作原理。</p><h6 id="同步任务"><a href="#同步任务" class="headerlink" title="同步任务"></a>同步任务</h6><p>同步任务指的是在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务。</p><h6 id="异步任务"><a href="#异步任务" class="headerlink" title="异步任务"></a>异步任务</h6><p>异步任务指的是刚开始不进入主线程，当主线程的任务执行完了之后再调用异步任务，异步任务任务才会进入主线程执行。（setTimeout， setInterval，promise，process.NextTick）</p><span id="more"></span><h6 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h6><ul><li>同步和异步任务分别进入不同的执行”场所”，同步的进入主线程，异步的进入Event Table并注册函数。</li><li>当指定的事情完成时，Event Table会将这个函数移入Event Queue。</li><li>主线程内的任务执行完毕为空，会去Event Queue读取对应的函数，进入主线程执行。</li><li>上述过程会不断重复，也就是常说的Event Loop(事件循环)。 </li></ul><p><img src="https://s1.ax1x.com/2020/06/22/NYQKxA.png" alt="NYQKxA.png"></p><h3 id="二、宏任务与微任务"><a href="#二、宏任务与微任务" class="headerlink" title="二、宏任务与微任务"></a>二、宏任务与微任务</h3><p>除了广义的同步任务和异步任务，我们对任务有更精细的定义。</p><h6 id="宏任务（macro-task）"><a href="#宏任务（macro-task）" class="headerlink" title="宏任务（macro-task）"></a>宏任务（macro-task）</h6><p>包括整体代码script，setTimeout，setInterval。</p><h6 id="微任务（micro-task）"><a href="#微任务（micro-task）" class="headerlink" title="微任务（micro-task）"></a>微任务（micro-task）</h6><p>Promise，process.nextTick。</p><p><strong>注意：</strong>不同类型的任务会进入对应的Event Queue，也就是说微任务会进入微任务的Event Queue，宏任务会进入宏任务的Event Queue。比如<code>setTimeout</code>和<code>setInterval</code>会进入相同的Event Queue。</p><h6 id="工作原理-1"><a href="#工作原理-1" class="headerlink" title="工作原理"></a>工作原理</h6><p>如下示例：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;setTimeout&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;promise&#x27;</span>);</span><br><span class="line">&#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;then&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;console&#x27;</span>);</span><br></pre></td></tr></table></figure><ul><li>这段代码作为宏任务，进入主线程。</li><li>先遇到<code>setTimeout</code>，为异步的宏任务，那么将其回调函数注册后分发到宏任务Event Queue。</li><li>接下来遇到了<code>Promise</code>，<code>new Promise</code>立即执行，<code>then</code>函数为异步的微任务，分发到微任务Event Queue。</li><li>遇到<code>console.log()</code>，立即执行。</li><li>整体代码script作为第一个宏任务执行结束，看看有哪些微任务？我们发现了<code>then</code>在微任务Event Queue里面，执行。</li><li>ok，第一轮事件循环结束了，我们开始第二轮循环，当然要从宏任务Event Queue开始。我们发现了宏任务Event Queue中<code>setTimeout</code>对应的回调函数，立即执行。</li><li>结束。</li></ul><p><a href="https://juejin.im/post/59e85eebf265da430d571f89">点击查看原文</a></p>]]></content>
      
      
      <categories>
          
          <category> JS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-视频的剪切与拼接</title>
      <link href="/2020/05/23/python%E5%9F%BA%E7%A1%80/python-%E8%A7%86%E9%A2%91%E7%9A%84%E5%89%AA%E5%88%87%E4%B8%8E%E6%8B%BC%E6%8E%A5/"/>
      <url>/2020/05/23/python%E5%9F%BA%E7%A1%80/python-%E8%A7%86%E9%A2%91%E7%9A%84%E5%89%AA%E5%88%87%E4%B8%8E%E6%8B%BC%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<h4 id="1、导入moviepy的包"><a href="#1、导入moviepy的包" class="headerlink" title="1、导入moviepy的包"></a>1、导入moviepy的包</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> moviepy.editor <span class="keyword">import</span> *</span><br></pre></td></tr></table></figure><h4 id="2、读取视频到内存"><a href="#2、读取视频到内存" class="headerlink" title="2、读取视频到内存"></a>2、读取视频到内存</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">video = VideoFileClip(path)</span><br></pre></td></tr></table></figure><p>由此得到了一个VideoFileClip的对象，可通过对此对象的操作，实现对视频的操作。</p><h4 id="3、对视频进行剪切"><a href="#3、对视频进行剪切" class="headerlink" title="3、对视频进行剪切"></a>3、对视频进行剪切</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">videoclip = video.subclip(time1, time2)</span><br></pre></td></tr></table></figure><p><code>time1</code>：起始时长，<code>time2</code>：终止时长 ，单位均为秒。</p><p><code>videoclip</code>是从时长time1到time2的视频的对象。</p><span id="more"></span><h4 id="4、对多个视频进行拼接"><a href="#4、对多个视频进行拼接" class="headerlink" title="4、对多个视频进行拼接"></a>4、对多个视频进行拼接</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">videocompose = video.concatente_videoclips(videolist, method=<span class="string">&#x27;compose&#x27;</span>)</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>1、<code>method=‘compose’</code>是必要的，它使得各种编码方式不同的视频也可以进行拼接，否则，如果输入编码方式不同的视频会报错。2、<code>videolist</code>是一个列表，里面存放的是视频的<code>VideoFileClip</code>对象。</p><h4 id="5、保存视频"><a href="#5、保存视频" class="headerlink" title="5、保存视频"></a>5、保存视频</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">video.write_videofile(path)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> moviepy </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-部署FastDFS分布式文件系统</title>
      <link href="/2020/05/20/Linux/Linux-%E9%83%A8%E7%BD%B2FastDFS%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
      <url>/2020/05/20/Linux/Linux-%E9%83%A8%E7%BD%B2FastDFS%E5%88%86%E5%B8%83%E5%BC%8F%E6%96%87%E4%BB%B6%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h4 id="一、安装-fastdfs-依赖包"><a href="#一、安装-fastdfs-依赖包" class="headerlink" title="一、安装 fastdfs 依赖包"></a>一、安装 fastdfs 依赖包</h4><ol><li>解压缩 libfastcommon-master.zip</li><li>进入到 libfastcommon-master 的目录中</li><li>执行 <code>./make.sh</code></li><li>执行 <code>sudo ./make.sh install</code></li></ol><h4 id="二、安装-fastdfs"><a href="#二、安装-fastdfs" class="headerlink" title="二、安装 fastdfs"></a>二、安装 fastdfs</h4><ol><li>解压缩 fastdfs-master.zip</li><li>进入到 fastdfs-master 目录中</li><li>执行 <code>./make.sh</code></li><li>执行<code> sudo ./make.sh install</code></li></ol><h4 id="三、配置跟踪服务器tracker"><a href="#三、配置跟踪服务器tracker" class="headerlink" title="三、配置跟踪服务器tracker"></a>三、配置跟踪服务器tracker</h4><ol><li>执行<code>sudo cp /etc/fdfs/tracker.conf.sample /etc/fdfs/tracker.conf</code></li><li>在 /home/python/ 目录中创建目录 fastdfs/tracker，<code>mkdir –p /data/home/silence/FastDFS/fastdfs/tracker</code></li><li>编辑 /etc/fdfs/tracker.conf 配置文件  <code>sudo vim /etc/fdfs/tracker.conf</code>，修改 <code>base_path=/data/home/silence/FastDFS/fastdfs/tracker</code></li></ol><span id="more"></span><h4 id="四、配置存储服务器-storage"><a href="#四、配置存储服务器-storage" class="headerlink" title="四、配置存储服务器 storage"></a>四、配置存储服务器 storage</h4><p>1、执行<code>sudo cp /etc/fdfs/storage.conf.sample /etc/fdfs/storage.conf</code></p><p>2、在 /home/python/fastdfs/ 目录中创建目录 storage <code>mkdir –p /data/home/silence/FastDFS/fastdfs/storage</code></p><p>3、编辑/etc/fdfs/storage.conf配置文件<code> sudo vim /etc/fdfs/storage.conf</code>，修改内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">base_path=/data/home/silence/FastDFS/fastdfs/storage</span><br><span class="line"></span><br><span class="line">store_path0=/data/home/silence/FastDFS/fastdfs/storage</span><br><span class="line"></span><br><span class="line">tracker_server=自己ubuntu虚拟机的ip地址:22122</span><br></pre></td></tr></table></figure><h4 id="五、启动-tracker-和-storage-服务"><a href="#五、启动-tracker-和-storage-服务" class="headerlink" title="五、启动 tracker 和 storage 服务"></a>五、启动 tracker 和 storage 服务</h4><p>启动 tracker 服务：<code>sudo service fdfs_trackerd start</code></p><p>启动 storage 服务：<code>sudo service fdfs_storaged start</code></p><p><strong>注意：</strong>这是可能报错 <strong>Failed to start fdfs_trackerd.service: Unit fdfs_trackerd.service not found</strong> 和<strong>Failed to</strong> <strong>start fdfs_trackerd.service: Unit fdfs_trackerd.service not found</strong>，只需重启虚拟机再次执行以上指令即可。</p><h4 id="六、测试是否安装成功"><a href="#六、测试是否安装成功" class="headerlink" title="六、测试是否安装成功"></a>六、测试是否安装成功</h4><p>1、<code>sudo cp /etc/fdfs/client.conf.sample /etc/fdfs/client.conf</code></p><p>2、编辑 /etc/fdfs/client.conf 配置文件  <code>sudo vim /etc/fdfs/client.conf</code></p><p>​      修改内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">base_path=/data/home/silence/FastDFS/fastdfs/tracker</span><br><span class="line"></span><br><span class="line">tracker_server=自己ubuntu虚拟机的ip地址:22122</span><br></pre></td></tr></table></figure><p>3、上传文件测试：</p><p><code>fdfs_upload_file /etc/fdfs/client.conf  要上传的图片文件</code></p><p><strong>说明：</strong><code>fdfs_upload_file </code>是上传文件的指令；上传时要指定客户端的配置文件；然后接待上传图片的路径。</p><p>例如：<code>fdfs_upload_file /etc/fdfs/client.conf /data/home/silence/image/test.jpg</code></p><p>执行指令后会返回类似 <code>group1/M00/00/00/wKhQgV7EpkiAJy0yAAKdSYpwz7Q877.jpg</code> 的文件 id，则说明文件上传成功。</p><p>最后该文件以 group1/M00/00/00/wKhQgV7EpkiAJy0yAAKdSYpwz7Q877.jpg 的名字保存在<code>/data/home/silence/FastDFS/fastdfs/storage/data</code>中。</p><h4 id="七、安装-nginx（web服务器）以及-fastdfs-nginx-module"><a href="#七、安装-nginx（web服务器）以及-fastdfs-nginx-module" class="headerlink" title="七、安装 nginx（web服务器）以及 fastdfs_nginx_module"></a>七、安装 nginx（web服务器）以及 fastdfs_nginx_module</h4><p>1、解压缩 nginx-1.8.1.tar.gz</p><p>2、解压缩 fastdfs_nginx_module</p><p>3、进入 nginx-1.8.1 目录中</p><p>4、执行<code>sudo ./configure --prefix=/usr/local/nginx/ --add-module=/data/home/silence/Nginx/fastdfs-nginx-module/src --with-http_ssl_module</code></p><p><code>sudo make</code></p><p><code>sudo make install</code></p><p>5、<code>sudo cp /data/home/silence/Nginx/fastdfs-nginx-module/src/mod_fastdfs.conf /etc/fdfs/mod_fastdfs.conf</code></p><p>6、<code>sudo vi /etc/fdfs/mod_fastdfs.conf</code>，修改内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">connect_timeout = 10</span><br><span class="line">tracker_server = 192.168.80.129</span><br><span class="line">url_have_group_name = true</span><br><span class="line">store_path0 = /data/home/silence/FastDFS/fastdfs/storage</span><br></pre></td></tr></table></figure><p>7、<code>sudo cp /data/home/silence/FastDFS/fastdfs-master/fastdfs-master/conf/http.conf /etc/fdfs/http.conf</code></p><p>8、<code>sudo cp /data/home/silence/FastDFS/fastdfs-master/fastdfs-master/conf/mime.types /etc/fdfs/mime.types</code></p><p>9、<code>sudo vi /usr/local/nginx/conf/nginx.conf</code>，在 <code>http</code> 部分中添加配置信息如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server&#123;</span><br><span class="line">    listen <span class="number">8888</span> ssl; <span class="comment">#通过8888端口访问nginx服务器</span></span><br><span class="line">    server_name localhost;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置 CORS 跨域</span></span><br><span class="line">    add_header <span class="string">&#x27;Access-Control-Allow-Origin&#x27;</span> <span class="string">&#x27;*&#x27;</span>;</span><br><span class="line">    add_header <span class="string">&#x27;Access-Control-Allow-Methods&#x27;</span> <span class="string">&#x27;GET, POST, OPTIONS&#x27;</span>;</span><br><span class="line">    add_header <span class="string">&#x27;Access-Control-Max-Age&#x27;</span> <span class="number">1728000</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 配置 https</span></span><br><span class="line">    ssl_certificate /home/silence/Desktop/CA/certification.crt;</span><br><span class="line">    ssl_certificate_key /home/silence/Desktop/CA/certification.key;</span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line">    ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">    ssl_session_cache    shared:SSL:1m;</span><br><span class="line">    ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">    location ~/group[<span class="number">0</span>-<span class="number">9</span>]/ &#123;</span><br><span class="line">        ngx_fastdfs_module;</span><br><span class="line">    &#125;</span><br><span class="line">    error_page <span class="number">500</span> <span class="number">502</span> <span class="number">503</span> <span class="number">504</span> /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root html;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10、启动 nginx</p><p><code>sudo /usr/local/nginx/sbin/nginx</code></p><p>这时，可能会报错：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">src/core/ngx_murmurhash.c:37:11: error: this statement may fall through [-Werror=implicit-fallthrough=]</span><br><span class="line">         h ^= data[2] &lt;&lt; 16;</span><br><span class="line"></span><br><span class="line">src/core/ngx_murmurhash.c:39:11: error: this statement may fall through [-Werror=implicit-fallthrough=]</span><br><span class="line">         h ^= data[1] &lt;&lt; 8;</span><br></pre></td></tr></table></figure><p>这是由于将警告当成错误处理了。</p><p>解决方法：</p><p>进入到 nginx-1.8.1目录下（解压的目录），找到当前目录下找到 objs 文件夹，并进入，打开文件 Makefile，找到有一下内容的这行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CFLAGS =  -pipe  -O -W -Wall -Wpointer-arith -Wno-unused-parameter -Werror -g</span><br></pre></td></tr></table></figure><p>将 <code>-Werror</code> 去掉即可。</p><p>11、停止 nginx 服务</p><p><code>sudo /usr/local/nginx/sbin/nginx -s stop</code></p><h4 id="使用-python-客户端上传测试"><a href="#使用-python-客户端上传测试" class="headerlink" title="使用 python 客户端上传测试"></a>使用 python 客户端上传测试</h4><p>1、下载 <code>fdfs_client-py-master.zip</code>。</p><p>2、进入 <code>fdfs_client-py-master.zip</code> 所在目录，执行 <code>pip3 install fdfs_client-py-master.zip。</code></p><p>3、执行 <code>python3</code> 进入python</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">from</span> fdfs_client.client <span class="keyword">import</span> Fdfs_client</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>client = Fdfs_client(<span class="string">&quot;/etc/fdfs/client.conf&quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret = client.upload_by_filename(<span class="string">&#x27;/home/silence/Desktop/wallhaven-12.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>返回如下信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">getting connection</span><br><span class="line">&lt;fdfs_client.connection.Connection <span class="built_in">object</span> at <span class="number">0x7fb428f3a1d0</span>&gt;</span><br><span class="line">&lt;fdfs_client.fdfs_protol.Tracker_header <span class="built_in">object</span> at <span class="number">0x7fb428f3a198</span>&gt;</span><br></pre></td></tr></table></figure><p>说明上传成功。</p><p>查看上传图片详细信息：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>ret</span><br><span class="line"></span><br><span class="line"><span class="comment">#返回如下信息</span></span><br><span class="line">&#123;<span class="string">&#x27;Group name&#x27;</span>: <span class="string">&#x27;group1&#x27;</span>, <span class="string">&#x27;Remote file_id&#x27;</span>: <span class="string">&#x27;group1/M00/00/00/wKhQgV7I3cqACypJAE4PFW4tC7Y112.png&#x27;</span>, <span class="string">&#x27;Status&#x27;</span>: <span class="string">&#x27;Upload successed.&#x27;</span>, <span class="string">&#x27;Local file name&#x27;</span>: <span class="string">&#x27;/home/silence/Desktop/wallhaven-12.png&#x27;</span>, <span class="string">&#x27;Uploaded size&#x27;</span>: <span class="string">&#x27;4.00MB&#x27;</span>, <span class="string">&#x27;Storage IP&#x27;</span>: <span class="string">&#x27;192.168.80.129&#x27;</span>&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：</strong></p><p>导入 fdfs 包时可能会报错：<code>ModuleNotFoundError: No module named &#39;mutagen&#39;</code>，这时，安装 mutagen：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install mutagen</span><br></pre></td></tr></table></figure><p>再次导入 fdfs，若报错 <code>ModuleNotFoundError: No module named &#39;mutagen._compat&#39;</code>：</p><p>查看源码可知，<code>_compat</code> 文件不在 mutagen 文件夹下，而是在 <code>mutagen/_senf </code> 路径下，只需要修改 fdfs_client/utils.py:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># from mutagen._compat import StringIO</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> mutagen._senf._compat <span class="keyword">import</span> StringIO</span><br></pre></td></tr></table></figure><p>接下来可能还会报错：<code>ModuleNotFoundError: No module named &#39;requests&#39;</code>，再 pip 安装该包即可。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-Redis</title>
      <link href="/2020/05/19/Linux/Linux-Redis/"/>
      <url>/2020/05/19/Linux/Linux-Redis/</url>
      
        <content type="html"><![CDATA[<h3 id="本机Linux中使用redis出现的问题"><a href="#本机Linux中使用redis出现的问题" class="headerlink" title="本机Linux中使用redis出现的问题"></a>本机Linux中使用redis出现的问题</h3><p>1、无论是在命令行修改配置文件，还是直接打开配置文件修改，重启之后配置文被重置，尽管打开配置文件发现是自己已经修改过的内容，但是在命令行使用<code>config get </code>查询之后与自己修改过的内容不一样。</p><p>真的很奇怪！！！</p><p>2、所以，每次启动redis都需要重新在命令行用<code>config set</code>修改配置文件，以满足自己的需求。</p><span id="more"></span><h3 id="在Windows上连接虚拟机Linux中redis服务器"><a href="#在Windows上连接虚拟机Linux中redis服务器" class="headerlink" title="在Windows上连接虚拟机Linux中redis服务器"></a>在Windows上连接虚拟机Linux中redis服务器</h3><p>1、修改配置文件，将其中的<code>bind 127.0.0.1</code>注释掉，添加<code>bind 192.168.80.129</code>（本机linux的IP）。</p><p>2、首先连接到本地的redis服务器：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p>然后修改配置文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1:6379&gt; config set protected-mode &#x27;no&#x27; </span><br></pre></td></tr></table></figure><p><code>quit</code>退出。</p><p><strong>注意：</strong>每次开启redis服务都要执行这一步骤。</p><p>3、连接本机linux IP上的redis服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h 192.168.80.129 -p 6379</span><br></pre></td></tr></table></figure><p>连接成功。</p><p>4、此时，在windows上也可以连接到<code>192.168.80.129:6379</code>redis服务器了。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-deepin中安装mysql</title>
      <link href="/2020/05/19/Linux/Linux-deepin%E4%B8%AD%E5%AE%89%E8%A3%85mysql/"/>
      <url>/2020/05/19/Linux/Linux-deepin%E4%B8%AD%E5%AE%89%E8%A3%85mysql/</url>
      
        <content type="html"><![CDATA[<h4 id="我在安装过程中遇到的问题"><a href="#我在安装过程中遇到的问题" class="headerlink" title="我在安装过程中遇到的问题"></a>我在安装过程中遇到的问题</h4><p>1、执行指令：<code>sudo apt-get install mysql-server mysql-client</code>后报错：<strong>没有发现软件mysql-server  没有发现软件mysql-client</strong>。</p><p>2、上网查询后，说要更换deepin的下载源，所以我先后试了阿里和中科大的镜像源，但还是报一样的错误。</p><h4 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h4><p>确实是要更换镜像源，不过要换成清华的源。</p><p>具体方法如下：</p><p>1、执行命令：<code>vi /etc/apt/sources.list</code>编辑sources.list文件。</p><p>2、将原文件中的所有内容注释掉，然后添加<code>deb [by-hash=force] https://mirrors.tuna.tsinghua.edu.cn/deepin panda main contrib non-free</code>，保存退出。</p><p>3、执行<code>sudo apt-get update</code>，更新下载源。</p><p>4、执行<code>sudo apt-get install mysql-server mysql-client</code>，安装成功。</p><hr><h4 id="2021-10-17-更新"><a href="#2021-10-17-更新" class="headerlink" title="2021.10.17 更新"></a>2021.10.17 更新</h4><p>由于 deepin 系统仓库的原因，不能直接 apt 安装 mysql，清华源以及其他源都没有 mysql-server 和 mysql-client 两个包。不过我们可以用 mariadb 来代替 mysql。</p><h5 id="MariaDB-介绍"><a href="#MariaDB-介绍" class="headerlink" title="MariaDB 介绍"></a>MariaDB 介绍</h5><p>MariaDB数据库管理系统是 MySQL 的一个分支，主要由开源社区在维护，采用 GPL 授权许可。开发这个分支的原因之一是： 甲骨文公司收购了 MySQL 后，有将 MySQL 闭源的潜在风险，因此社区采用分支的方式来避开这个风险。 MariaDB的目的是完全兼容 MySQL，包括 API 和命令行，使之能轻松成为 MySQL 的代替品。</p><p>这意味着，所有使用 MySQL 的连接器、程序库和应用程序也将可以在 MariaDB 下工作。</p><p>所以，MariaDB 完全可以替代 MySQL。</p><br/><h5 id="deepin-安装-MariaDB"><a href="#deepin-安装-MariaDB" class="headerlink" title="deepin 安装 MariaDB"></a>deepin 安装 MariaDB</h5><p>打开终端执行以下指令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install mariadb-server</span><br><span class="line"></span><br><span class="line">sudo apt-get install libmariadbclient-dev libssl-dev</span><br></pre></td></tr></table></figure><p>安装完成。</p><p>启动数据库：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start mysql</span><br></pre></td></tr></table></figure><p>现在就可以开启 MariaDB 数据库了。第一次进入不需要密码，直接执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql</span><br></pre></td></tr></table></figure><p>进入后可以设置密码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">MariaDB [(none)]&gt; use mysql;</span><br><span class="line">MariaDB [mysql]&gt; UPDATE mysql.user SET password=PASSWORD(&#x27;newpassward&#x27;) WHERE user=&#x27;root&#x27;;</span><br><span class="line">MariaDB [mysql]&gt; UPDATE user SET plugin=&quot;mysql_native_password&quot;;</span><br><span class="line">MariaDB [mysql]&gt; FLUSH PRIVILEGES;</span><br></pre></td></tr></table></figure><p>退出再登陆就需要执行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a></h5>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux-将windows下mysql数据库文件迁移到linux下的mysql中</title>
      <link href="/2020/05/19/Linux/Linux-%E5%B0%86windows%E4%B8%8Bmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E4%BB%B6%E8%BF%81%E7%A7%BB%E5%88%B0linux%E4%B8%8B%E7%9A%84mysql%E4%B8%AD/"/>
      <url>/2020/05/19/Linux/Linux-%E5%B0%86windows%E4%B8%8Bmysql%E6%95%B0%E6%8D%AE%E5%BA%93%E6%96%87%E4%BB%B6%E8%BF%81%E7%A7%BB%E5%88%B0linux%E4%B8%8B%E7%9A%84mysql%E4%B8%AD/</url>
      
        <content type="html"><![CDATA[<h3 id="其实很简单，只需要三步"><a href="#其实很简单，只需要三步" class="headerlink" title="其实很简单，只需要三步"></a>其实很简单，只需要三步</h3><h6 id="第一步：从windows下的mysql导出"><a href="#第一步：从windows下的mysql导出" class="headerlink" title="第一步：从windows下的mysql导出"></a>第一步：从windows下的mysql导出</h6><p>打开cmd，执行以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p 数据库名&gt;文件名</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p dailyfresh&gt;D:database.txt</span><br></pre></td></tr></table></figure><h6 id="第二步：将生成的database-txt文件复制到linux中，比如桌面"><a href="#第二步：将生成的database-txt文件复制到linux中，比如桌面" class="headerlink" title="第二步：将生成的database.txt文件复制到linux中，比如桌面"></a>第二步：将生成的database.txt文件复制到linux中，比如桌面</h6><h6 id="第三步：在linux下的mysql导入"><a href="#第三步：在linux下的mysql导入" class="headerlink" title="第三步：在linux下的mysql导入"></a>第三步：在linux下的mysql导入</h6><p>打开终端，执行以下指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p 数据库名&lt;文件名</span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root -p dailyfresh&lt;/data/home/silence/desktop/database.txt</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：此时可能会报错：<code>Unknown collation: &#39;utf8mb4_0900_ai_ci&#39;</code></p><p><strong>解决方法：</strong></p><ul><li>打开导出的<code>database.text</code>文件</li><li>将文件中所有的<code>utf8mb4_0900_ai_ci</code>替换为<code>utf8_general_c</code>，<code>utf8mb4</code>替换为<code>utf8</code></li></ul><p>进入mysql查看是否迁移成功。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>css 基础</title>
      <link href="/2020/05/13/css/Vue-CSS/"/>
      <url>/2020/05/13/css/Vue-CSS/</url>
      
        <content type="html"><![CDATA[<h4 id="一、从背景图片中截取一段小图"><a href="#一、从背景图片中截取一段小图" class="headerlink" title="一、从背景图片中截取一段小图"></a>一、从背景图片中截取一段小图</h4><p>在制作网页的时候如果要使用一幅图的某一部分的时候，可以用css里有一个非常有用的功能：background-position。</p><p>如下图：</p><p><img src="https://s1.ax1x.com/2020/05/13/YaQmE8.jpg" alt="YaQmE8.jpg"></p><p>当我们要使用其中的某一个小图片来作为超链接的按钮的时候，就可以使用background-position来实现。</p><h6 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h6><p>背景图片默认放置在<code>div</code>的左上角，通过<code>background-position</code>可以改变图片的位置。</p><p><code>background-position</code>有两个参数，第一个参数是将图片从<code>div</code>的左上角向左移动多少尺寸，第二个参数是将图片向上移动多少尺寸。</p><p>例如选取上图中第二幅小图 ，小图的宽度为20px 高度为25px 则：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">    <span class="selector-tag">div</span> &#123;</span></span><br><span class="line"><span class="css">          <span class="attribute">width</span>:<span class="number">20px</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">height</span>:<span class="number">25px</span>;</span></span><br><span class="line"><span class="css">          <span class="attribute">background</span>:<span class="built_in">url</span>(<span class="string">image.png</span>)no-reapte <span class="number">0</span> <span class="number">25px</span>;</span></span><br><span class="line"><span class="css">         &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><span id="more"></span><br/><h4 id="二、消除a标签的默认留白间距"><a href="#二、消除a标签的默认留白间距" class="headerlink" title="二、消除a标签的默认留白间距"></a>二、消除a标签的默认留白间距</h4><p><strong>设置<code>font-size: 0</code></strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;demo&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>底部链接1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>底部链接2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">.demo&#123;</span><br><span class="line">    font-size: 0;</span><br><span class="line">&#125;</span><br><span class="line">.demo a&#123;</span><br><span class="line">    font-size: 14px;/*这里一定要设置，不然文本内容将不显示*/</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是图片链接的话，则不需要设置<code>.demo a</code>。</p><br/><h4 id="三、通过链接定位页面中的元素"><a href="#三、通过链接定位页面中的元素" class="headerlink" title="三、通过链接定位页面中的元素"></a>三、通过链接定位页面中的元素</h4><p>通常情况下，将网站的导航放在左侧的栏中，有时用来定位页面中的元素。</p><p>想链接到同一个Web页面中的多个不同部分时，可以使用锚点来命名。如果想创建一个指向另一个Web页面中的某个特定部分的链接，可在目标页面的文件名和锚点名称之间用一个#分隔。</p><p>1、在被定位元素中添加<code>id=&quot;fruit&quot;</code>属性，在导航链接中定义<code>href=&quot;#fruit&quot;</code>，便可以定位到id为fruit的div块。</p><p>2、要指向另一个Web页面中的某个特定部分，定义导航链接为<code>href=&quot;index#fruit&quot;</code>。</p><br/><h4 id="四、内部元素超出外部元素定义的范围"><a href="#四、内部元素超出外部元素定义的范围" class="headerlink" title="四、内部元素超出外部元素定义的范围"></a>四、内部元素超出外部元素定义的范围</h4><p><code>box-sizing</code>属性：允许您以特定的方式定义匹配某个区域的特定元素。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">box-sizing: content-box|border-box|inherit;</span><br></pre></td></tr></table></figure><table><thead><tr><th align="left">值</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">content-box</td><td align="left">这是由 CSS2.1 规定的宽度高度行为。宽度和高度分别应用到元素的内容框。在宽度和高度之外绘制元素的内边距和边框。</td></tr><tr><td align="left">border-box</td><td align="left">为元素设定的宽度和高度决定了元素的边框盒。就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。</td></tr><tr><td align="left">inherit</td><td align="left">规定应从父元素继承 box-sizing 属性的值。</td></tr></tbody></table><p>可以通过将<code>box-sizing: border-box</code>把框内元素限制在框内。</p><br/><h4 id="隐藏浏览器滚动条"><a href="#隐藏浏览器滚动条" class="headerlink" title="隐藏浏览器滚动条"></a>隐藏浏览器滚动条</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span>::-webkit-scrollbar &#123;</span><br><span class="line">  width: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h4 id="transition-同时指定多个属性过渡"><a href="#transition-同时指定多个属性过渡" class="headerlink" title="transition 同时指定多个属性过渡"></a>transition 同时指定多个属性过渡</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">transition</span>: color <span class="number">0.25s</span> ease-in, border-color <span class="number">0.25s</span> ease-in;</span><br></pre></td></tr></table></figure><br/><h4 id="防止图片溢出"><a href="#防止图片溢出" class="headerlink" title="防止图片溢出"></a>防止图片溢出</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">    max-with: <span class="number">100%</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h4 id="让元素的宽度自适应内容的宽度"><a href="#让元素的宽度自适应内容的宽度" class="headerlink" title="让元素的宽度自适应内容的宽度"></a>让元素的宽度自适应内容的宽度</h4><p> 让元素（div p 等）根据字数的变化自动变宽，且元素始终紧紧包裹着内容。可以通过将元素 display 设置为 table 即可：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">display</span>: table</span><br></pre></td></tr></table></figure><br/><h4 id="选择相同元素的第-n-个元素"><a href="#选择相同元素的第-n-个元素" class="headerlink" title="选择相同元素的第 n 个元素"></a>选择相同元素的第 n 个元素</h4><p>  <code>:nth-child(n)</code> 选择器匹配属于其父元素的第 N 个子元素，不论元素的类型。<em>n</em> 可以是数字、关键词或公式。</p><p>下面我们来举例说明：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">1</span>) // 匹配第一个 <span class="selector-tag">p</span> 元素</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(n) // 匹配每一个 <span class="selector-tag">p</span> 元素</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(n+<span class="number">4</span>) // 匹配第 <span class="number">5</span>，<span class="number">6</span>，... 个 <span class="selector-tag">p</span> 元素</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>n) // 匹配第 <span class="number">3</span>，<span class="number">6</span>，<span class="number">9</span>，... 个 <span class="selector-tag">p</span> 元素</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:nth-child</span>(<span class="number">3</span>n+<span class="number">1</span>) // 匹配第 <span class="number">4</span>，<span class="number">7</span>，<span class="number">10</span>，... 个 <span class="selector-tag">p</span> 元素</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>另外还有 <code>:first-child</code> 选择第一个元素；<code>:last-child</code> 选择最后一个元素；<code>:nth-last-child(n)</code> 选择倒数第 n 个元素。</p><p>一般我们在列表中会用到这个属性来消除边界元素的 margin。</p><br/><h4 id="object-fit"><a href="#object-fit" class="headerlink" title="object-fit"></a>object-fit</h4><p>object-fit 属性指定元素的内容应该如何去适应指定容器的高度与宽度。常用于 <code>img</code> 和 <code>video</code> 标签。</p><ol><li>fill：不保证保持原有的比例，内容全部显示铺满容器。</li><li>contain：保持原有尺寸比例，使图片的宽度完整的显示，高度自动缩放。</li><li>cover：保持原有尺寸比例。高度铺满容器，宽度等比缩放，超出部分被剪掉。</li><li>none：图片原有宽高不变，超出部分被剪掉，保留下来的内容使图片的正中央。</li></ol><br/><h4 id="去除移动端点击时元素产生的背景色"><a href="#去除移动端点击时元素产生的背景色" class="headerlink" title="去除移动端点击时元素产生的背景色"></a>去除移动端点击时元素产生的背景色</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-webkit-tap-highlight-<span class="attribute">color</span>: transparent;</span><br></pre></td></tr></table></figure><br/><h4 id="阻止选中文本"><a href="#阻止选中文本" class="headerlink" title="阻止选中文本"></a>阻止选中文本</h4><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-webkit-user-select: none;</span><br></pre></td></tr></table></figure><br/><h4 id="white-space"><a href="#white-space" class="headerlink" title="white-space"></a>white-space</h4><p>white-space 属性用于指定如何处理容器中的空白字符，例如：空格( )、换行(\n)、缩进(\t)等。</p><ul><li>normal：忽略掉文本中多余的空格和回车符。</li><li>nowrap：忽略掉文本中多余的空格和回车符，并且文本在一行中显示。</li><li>pre：不忽略文本中多余的空格和回车符。但是文本只在回车符处进行换行，如果没有回车符，文本将会在一行中显示。</li><li>pre-wrap：不忽略空格和回车符，同时文本自动允许换行。</li><li>pre-line：忽略多余的空格，但不忽略回车符。</li><li>initial：继承父级属性。</li></ul>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python-从视频中提取音频</title>
      <link href="/2020/04/27/python%E5%9F%BA%E7%A1%80/python-%E4%BB%8E%E8%A7%86%E9%A2%91%E4%B8%AD%E6%8F%90%E5%8F%96%E9%9F%B3%E9%A2%91/"/>
      <url>/2020/04/27/python%E5%9F%BA%E7%A1%80/python-%E4%BB%8E%E8%A7%86%E9%A2%91%E4%B8%AD%E6%8F%90%E5%8F%96%E9%9F%B3%E9%A2%91/</url>
      
        <content type="html"><![CDATA[<h2 id="视频中提取音频"><a href="#视频中提取音频" class="headerlink" title="视频中提取音频"></a>视频中提取音频</h2><p>OpenCV中使用VideoCapture类写的视频是没有音频的，如果要进一步处理音频则需要用到一个库——<strong>MoviePy</strong>，这个库是Python视频编辑库，可裁剪、拼接、标题插入、视频合成、视频处理和自定义效果。</p><h4 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install moviepy</span><br></pre></td></tr></table></figure><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> moviepy.editor <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">path = <span class="string">&#x27;&#x27;</span>  <span class="comment">#视频所在路径</span></span><br><span class="line"></span><br><span class="line">video = VideoFileClip(path) <span class="comment">#创建视频对象</span></span><br><span class="line">audio = video.audio <span class="comment">#创建视频对应的音频对象</span></span><br><span class="line">audio.write_audiofile(<span class="string">&#x27;路径&#x27;</span>) <span class="comment">#将得到的音频写出到路径，通常导出为mp3格式</span></span><br></pre></td></tr></table></figure><span id="more"></span><h2 id="音频片段截取"><a href="#音频片段截取" class="headerlink" title="音频片段截取"></a>音频片段截取</h2><p>得到音频后，可能有些片段是不需要的。我们可以将其剪除。</p><p><code>pydub</code>是python最好用的音频库之一。</p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title="安装"></a>安装</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pydub</span><br></pre></td></tr></table></figure><h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pydub <span class="keyword">import</span> AudioSegment</span><br><span class="line"></span><br><span class="line">file = AudioSegment.from_mp3(<span class="string">&quot;text1.mp3&quot;</span>)</span><br><span class="line"><span class="comment"># 截取片段，单位毫秒</span></span><br><span class="line">music = file[<span class="number">10000</span>:]  <span class="comment">#截取从第10秒开始到音频最后的片段</span></span><br><span class="line">music.export(<span class="string">&quot;text2.mp3&quot;</span>, <span class="built_in">format</span>=<span class="string">&#x27;mp3&#x27;</span>) <span class="comment">#保存音频</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> 视频 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python pip下载速度慢的问题</title>
      <link href="/2020/04/27/python%E5%9F%BA%E7%A1%80/python-pip%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2020/04/27/python%E5%9F%BA%E7%A1%80/python-pip%E4%B8%8B%E8%BD%BD%E9%80%9F%E5%BA%A6%E6%85%A2%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h4 id="pip-下载速度慢，导致报错：pip-vendor-urllib3-exceptions-ReadTimeoutError……"><a href="#pip-下载速度慢，导致报错：pip-vendor-urllib3-exceptions-ReadTimeoutError……" class="headerlink" title="pip 下载速度慢，导致报错：pip._vendor.urllib3.exceptions.ReadTimeoutError……"></a>pip 下载速度慢，导致报错：pip._vendor.urllib3.exceptions.ReadTimeoutError……</h4><p>python开发中，我们经常用到pip工具，然而，有时候下载速度非常慢……</p><p>解决方法：</p><p><strong>更改电脑默认镜像，之后便可用 pip install 命令快速下载</strong></p><p>1、在我的电脑，搜索 <code>%APPDATA%</code>（代表系统变量），搜索之后的路径的应该为<code>C:\Users\Administrator\AppData\Roaming</code>；</p><p>2、在此路径下新建文件夹pip，进入文件夹，新建<code>pip.ini</code>文件，添加如下代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[global]</span><br><span class="line"></span><br><span class="line">timeout = 6000</span><br><span class="line"></span><br><span class="line">index-url = http://mirrors.aliyun.com/pypi/simple/</span><br><span class="line"></span><br><span class="line">trusted-host = mirrors.aliyun.com</span><br></pre></td></tr></table></figure><p>即可成功修改pip镜像路径。</p><p>3、现在就可以使用<code>pip install</code>进行高速下载。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-那些年遇到的坑</title>
      <link href="/2020/04/25/Vue/Vue-%E9%82%A3%E4%BA%9B%E5%B9%B4%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
      <url>/2020/04/25/Vue/Vue-%E9%82%A3%E4%BA%9B%E5%B9%B4%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<h4 id="修改第三方组件"><a href="#修改第三方组件" class="headerlink" title="修改第三方组件"></a>修改第三方组件</h4><p>这里我们要<strong>重写第三方组件</strong>，但是不能直接重写，否则没有效果，解决方法如下：</p><p>1、重写第三方组件之后去掉<code>&lt;style scoped&gt;</code>中的<code>scoped</code>，但是这样会造成组件之间的样式污染。</p><p>2、去掉<code>&lt;style scoped&gt;</code>中的<code>scoped</code>之后，将本页面中所有样式包裹在一个<code>class</code>里面，避免污染其他页面。</p><p>3、使用<code>/deep/</code>穿透（推荐使用）。</p><h5 id="deep穿透"><a href="#deep穿透" class="headerlink" title="deep穿透"></a>deep穿透</h5><p>vue引用了第三方组件，需要在组件中局部修改第三方组件的样式，而又不想去除<code>scoped</code>属性造成组件之间的样式污染。此时只能通过<code>&gt;&gt;&gt;</code>，穿透<code>scoped</code>。</p><p>有些Sass 之类的预处理器无法正确解析 <code>&gt;&gt;&gt;</code>。可以使用 <code>/deep/</code> 操作符( <code>&gt;&gt;&gt;</code> 的别名)。</p><p>用法如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">scoped</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    /deep/  第三方组件 &#123;</span><br><span class="line"></span><br><span class="line">          样式</span><br><span class="line"></span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="修改第三方组件-1"><a href="#修改第三方组件-1" class="headerlink" title="修改第三方组件"></a>修改第三方组件</h5><ol><li>打开vue页面，点击右键检查；</li><li>选中想要修改的组件，查看其样式，并将所有有关该组件的样式都复制粘贴到<code>&lt;style&gt;</code>中；</li><li>修改其中的属性值；</li><li>使用<code>/deep/</code>穿透。</li></ol><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><p>打开<code>router/index.js</code>文件，添加如下代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 重定向</span></span><br><span class="line">  <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  <span class="attr">redirect</span>: <span class="string">&#x27;/index&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将根地址重定向到<code>/index</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue-JS</title>
      <link href="/2020/04/23/Vue/Vue-JS/"/>
      <url>/2020/04/23/Vue/Vue-JS/</url>
      
        <content type="html"><![CDATA[<h3 id="Vue初始化函数created-和mounted-的区别"><a href="#Vue初始化函数created-和mounted-的区别" class="headerlink" title="Vue初始化函数created()和mounted()的区别"></a>Vue初始化函数created()和mounted()的区别</h3><p>1、created 在模板渲染成html前调用，即通常初始化某些属性值，然后再渲染成视图</p><p>在这一步，实例已完成以下的配置：</p><ul><li>数据观测 (data observer)，</li><li>property 和方法的运算，</li><li>watch/event 事件回调。</li><li>然而，挂载阶段还没开始，$el property 目前尚不可用</li></ul><p>2、mounted在模板渲染成html后调用，通常是初始化页面完成后，再对html的dom节点进行一些需要的操作。</p><br/><h3 id="过滤函数filter"><a href="#过滤函数filter" class="headerlink" title="过滤函数filter()"></a>过滤函数filter()</h3><p>filter() 方法创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素。</p><p><em><strong>注意：</strong></em></p><ol><li> filter() 不会对空数组进行检测。</li><li> filter() 不会改变原始数组。</li></ol><p>语法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">array.filter(<span class="function"><span class="keyword">function</span>(<span class="params">currentValue,index,arr</span>), <span class="title">thisValue</span>)</span></span><br></pre></td></tr></table></figure><p><strong>array数组的元素依次指向currentValue进行判断，符合条件即function返回true，则此元素被添加到新数组，否则不被添加。</strong></p><p>返回数组，包含了符合条件的所有元素。如果没有符合条件的元素则返回空数组。</p><span id="more"></span><p>例如：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> ages = [<span class="number">32</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">40</span>];</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">checkAdult</span>(<span class="params">age</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> age &gt;= <span class="number">18</span>;</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span></span><br><span class="line"><span class="javascript"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">return</span> ages.filter(checkAdult);</span></span><br><span class="line"><span class="javascript">&#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>返回一个年龄大于等于18的数组。</p><p>如果出现函数多重嵌套：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="keyword">var</span> ages = [<span class="number">32</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">40</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkAdult</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">age</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age &gt;= a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">myFunction</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">18</span>;</span><br><span class="line">    <span class="keyword">return</span> ages.filter(checkAdult(a));</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>此时，<strong>ages数组中的元素依次指向的是age而不是a</strong>。</p><br/><h3 id="Vue-Events"><a href="#Vue-Events" class="headerlink" title="Vue Events"></a>Vue Events</h3><table><thead><tr><th align="left">事件名称</th><th align="left">说明</th><th align="left">回调参数</th></tr></thead><tbody><tr><td align="left">blur</td><td align="left">在 Input 失去焦点时触发</td><td align="left">(event: Event)</td></tr><tr><td align="left">focus</td><td align="left">在 Input 获得焦点时触发</td><td align="left">(event: Event)</td></tr><tr><td align="left">change</td><td align="left">在 Input 值改变时触发</td><td align="left">(value: string | number)</td></tr><tr><td align="left">clear</td><td align="left">在点击由 clearable 属性生成的清空按钮时触发</td><td align="left">—</td></tr><tr><td align="left">select(Autocomplete Events)</td><td align="left">点击选中建议项时触发</td><td align="left">选中建议项</td></tr></tbody></table><br/><h3 id="Message消息提示"><a href="#Message消息提示" class="headerlink" title="Message消息提示"></a>Message消息提示</h3><p>常用于主动操作后的反馈提示。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$message.info(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.$message.success(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.$message.warning(<span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="built_in">this</span>.$message.error(<span class="string">&quot;&quot;</span>);</span><br></pre></td></tr></table></figure><br/><h3 id="MessageBox弹框"><a href="#MessageBox弹框" class="headerlink" title="MessageBox弹框"></a>MessageBox弹框</h3><p>模拟系统的消息提示框而实现的一套模态对话框组件，用于消息提示、确认消息和提交内容。</p><p><strong>从场景上说，MessageBox 的作用是美化系统自带的 alert、confirm 和 prompt，因此适合展示较为简单的内容。如果需要弹出较为复杂的内容，请使用 Dialog。</strong></p><h6 id="消息提示"><a href="#消息提示" class="headerlink" title="消息提示"></a>消息提示</h6><p>调用<code>$alert</code>方法即可打开消息提示，它模拟了系统的 <code>alert</code>，无法通过按下 ESC 或点击框外关闭。此例中接收了两个参数，<code>message</code>和<code>title</code>。值得一提的是，窗口被关闭后，它默认会返回一个<code>Promise</code>对象便于进行后续操作的处理。若不确定浏览器是否支持<code>Promise</code>，可自行引入第三方 polyfill 或像本例一样使用回调进行后续处理。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$alert(<span class="string">&#x27;这是一段内容&#x27;</span>, <span class="string">&#x27;标题名称&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">  <span class="attr">callback</span>: <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">      <span class="attr">type</span>: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">      <span class="attr">message</span>: <span class="string">`action: <span class="subst">$&#123; action &#125;</span>`</span></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h6 id="确认消息"><a href="#确认消息" class="headerlink" title="确认消息"></a>确认消息</h6><p>调用<code>$confirm</code>方法即可打开消息提示，它模拟了系统的 <code>confirm</code>。Message Box 组件也拥有极高的定制性，我们可以传入<code>options</code>作为第三个参数，它是一个字面量对象。<code>type</code>字段表明消息类型，可以为<code>success</code>，<code>error</code>，<code>info</code>和<code>warning</code>，无效的设置将会被忽略。注意，第二个参数<code>title</code>必须定义为<code>String</code>类型，如果是<code>Object</code>，会被理解为<code>options</code>。在这里我们用了 Promise 来处理后续响应。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$confirm(<span class="string">&#x27;此操作将永久删除该文件, 是否继续?&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">          <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">          <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">          <span class="attr">type</span>: <span class="string">&#x27;warning&#x27;</span></span><br><span class="line">        &#125;).then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;删除成功!&#x27;</span></span><br><span class="line">          &#125;);</span><br><span class="line">        &#125;).catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">          <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">            <span class="attr">message</span>: <span class="string">&#x27;已取消删除&#x27;</span></span><br><span class="line">          &#125;);          </span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><p><em><strong>说明：</strong></em><code>then()</code>函数为用户点击“确定”之后进行的操作，<code>catch()</code>函数是用户点击”取消之后进行的操作。</p><h6 id="提交内容"><a href="#提交内容" class="headerlink" title="提交内容"></a>提交内容</h6><p>调用<code>$prompt</code>方法即可打开消息提示，它模拟了系统的 <code>prompt</code>。可以用<code>inputPattern</code>字段自己规定匹配模式，或者用<code>inputValidator</code>规定校验函数，可以返回<code>Boolean</code>或<code>String</code>，返回<code>false</code>或字符串时均表示校验未通过，同时返回的字符串相当于定义了<code>inputErrorMessage</code>字段。此外，可以用<code>inputPlaceholder</code>字段来定义输入框的占位符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$prompt(<span class="string">&#x27;请输入邮箱&#x27;</span>, <span class="string">&#x27;提示&#x27;</span>, &#123;</span><br><span class="line">  <span class="attr">confirmButtonText</span>: <span class="string">&#x27;确定&#x27;</span>,</span><br><span class="line">  <span class="attr">cancelButtonText</span>: <span class="string">&#x27;取消&#x27;</span>,</span><br><span class="line">  <span class="attr">inputPattern</span>: <span class="regexp">/[\w!#$%&amp;&#x27;*+/=?^_`&#123;|&#125;~-]+(?:\.[\w!#$%&amp;&#x27;*+/=?^_`&#123;|&#125;~-]+)*@(?:[\w](?:[\w-]*[\w])?\.)+[\w](?:[\w-]*[\w])?/</span>,</span><br><span class="line">  inputErrorMessage: <span class="string">&#x27;邮箱格式不正确&#x27;</span>,</span><br><span class="line">  <span class="attr">inputPlaceholder</span>: <span class="string">&quot;email&quot;</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">&#123; value &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;你的邮箱是: &#x27;</span> + value</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;).catch(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">this</span>.$message(&#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;info&#x27;</span>,</span><br><span class="line">    <span class="attr">message</span>: <span class="string">&#x27;取消输入&#x27;</span></span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><em><strong>说明：</strong></em><code>&#123;value&#125;</code>是从提示框中输入的值。</p><br/><h3 id="Notification通知"><a href="#Notification通知" class="headerlink" title="Notification通知"></a>Notification通知</h3><p>悬浮出现在页面角落，显示全局的通知提醒消息。</p><p>Notification 组件提供通知功能，Element 注册了<code>$notify</code>方法，接收一个<code>options</code>字面量参数，在最简单的情况下，你可以设置<code>title</code>字段和<code>message</code>字段，用于设置通知的标题和正文。默认情况下，经过一段时间后 Notification 组件会自动关闭，但是通过设置<code>duration</code>，可以控制关闭的时间间隔，特别的是，如果设置为<code>0</code>，则不会自动关闭。注意：<code>duration</code>接收一个<code>Number</code>，单位为毫秒，默认为<code>4500</code>。</p><p>Element 为 Notification 组件准备了四种通知类型：<code>success</code>, <code>warning</code>, <code>info</code>, <code>error</code>。通过<code>type</code>字段来设置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> h = <span class="built_in">this</span>.$createElement;</span><br><span class="line"><span class="built_in">this</span>.$notify(&#123;</span><br><span class="line">  <span class="attr">title</span>: <span class="string">&#x27;标题名称&#x27;</span>,</span><br><span class="line">  <span class="attr">message</span>: h(<span class="string">&#x27;i&#x27;</span>, &#123; <span class="attr">style</span>: <span class="string">&#x27;color: teal; font-size: 13px&#x27;</span>&#125;, <span class="string">&#x27;这是提示文案这是提示文案这是提示文案这是提示文案这是提示文案这是提示文案这是提示文案这是提示文案&#x27;</span>),</span><br><span class="line">  <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span></span><br><span class="line">  <span class="attr">duration</span>: <span class="number">0</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><em><strong>注意：</strong></em>这里的<code>h</code>用于定义样式。</p><br/><h3 id="父子组件之间传值"><a href="#父子组件之间传值" class="headerlink" title="父子组件之间传值"></a>父子组件之间传值</h3><h5 id="1、父组件可以使用-props-把数据传给子组件"><a href="#1、父组件可以使用-props-把数据传给子组件" class="headerlink" title="1、父组件可以使用 props 把数据传给子组件"></a>1、父组件可以使用 <code>props </code>把数据传给子组件</h5><h6 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h6><p>在子组件中定义<code>props</code>，用于接收父组件传来的值。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">//子组件</span><br><span class="line">props: &#123;</span><br><span class="line">  data: String，</span><br><span class="line">  required: true</span><br><span class="line">&#125;,</span><br><span class="line">//或者</span><br><span class="line">props:[&#x27;data&#x27;]</span><br><span class="line"></span><br><span class="line">// 父组件</span><br><span class="line"><span class="tag">&lt;<span class="name">chlid</span> <span class="attr">:data</span>=<span class="string">&#x27;message&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">chlid</span>&gt;</span></span><br><span class="line"></span><br><span class="line">data() &#123;</span><br><span class="line">return &#123;</span><br><span class="line">message: &#x27;hellow world&#x27;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>prop的类型</strong></p><p>String、Number、Boolean、Array、Object</p><p><strong>prop类型检测</strong></p><p>default、required、自定义验证</p><h5 id="2、子组件可以使用-emit-触发父组件的自定义事件"><a href="#2、子组件可以使用-emit-触发父组件的自定义事件" class="headerlink" title="2、子组件可以使用 $emit 触发父组件的自定义事件"></a>2、子组件可以使用 <code>$emit</code> 触发父组件的自定义事件</h5><h6 id="emit方法"><a href="#emit方法" class="headerlink" title="$emit方法"></a>$emit方法</h6><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.$emit( event, arg ) <span class="comment">//触发当前实例上的事件</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.$on( event, fn );<span class="comment">//监听event事件后运行 fn；</span></span><br></pre></td></tr></table></figure><p><code>evevt</code>是父组件定义的事件，<code>arg</code>是子组件向父组件传的值。</p><p><strong>注意：子组件中包含<code>$emit</code>方法的事件一旦触发，则父组件中的<code>event</code>事件自动触发。</strong></p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件</span></span><br><span class="line">&lt;button <span class="meta">@click</span>=<span class="string">&quot;change&quot;</span>&gt;click&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">change()&#123;</span><br><span class="line"><span class="keyword">this</span>.$emit(<span class="string">&#x27;showchange&#x27;</span>, <span class="string">&#x27;hellow&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//父组件</span></span><br><span class="line">&lt;child <span class="meta">@showchange</span>=<span class="string">&quot;getvalue&quot;</span>&gt;&#123;&#123; value &#125;&#125;&lt;/child&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">data</span>()&#123;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line">value: <span class="string">&#x27;&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line">methods: &#123;</span><br><span class="line">getvalue(<span class="keyword">val</span>)&#123;</span><br><span class="line"><span class="keyword">this</span>.value = <span class="keyword">val</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="父子组件传值的其他方式"><a href="#父子组件传值的其他方式" class="headerlink" title="父子组件传值的其他方式"></a>父子组件传值的其他方式</h4><h6 id="provide-inject"><a href="#provide-inject" class="headerlink" title="provide/inject"></a>provide/inject</h6><p>父组件中通过provide来提供变量, 然后在子组件中通过inject来注入变量。这里不论子组件嵌套有多深, 只要调用了inject 那么就可以注入provide中的数据。</p><p><strong>注：provide 和 inject 主要为高阶插件/组件库提供用例。并不推荐直接用于应用程序代码中。</strong></p><h6 id="refs"><a href="#refs" class="headerlink" title="$refs"></a>$refs</h6><p>通过 ref  为子组件赋予一个 ID 引用：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//子组件</span><br><span class="line"><span class="tag">&lt;<span class="name">base-input</span> <span class="attr">ref</span>=<span class="string">&quot;usernameInput&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">base-input</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件通过<code>this.$refs.usernameInput</code>获取到 DOM 元素和子组件实例。</p><h6 id="parent-children"><a href="#parent-children" class="headerlink" title="$parent/$children"></a>$parent/$children</h6><p>在子组件中使用<code>$parent</code>获取父组件中的数据，在父组件中使用<code>$children[i]</code>（可能有多个子组件）获取子组件中的数据。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">// 父组件</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Childone</span>&gt;</span><span class="tag">&lt;/<span class="name">Childone</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Childtwo</span>&gt;</span><span class="tag">&lt;/<span class="name">Childtwo</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getChildMsg()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> Childone <span class="keyword">from</span> <span class="string">&#x27;./childone&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">import</span> Childtwo <span class="keyword">from</span> <span class="string">&#x27;./childtwo&#x27;</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="attr">components</span>:&#123;Childone, Childtwo&#125;,</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">msgFromChild</span>:<span class="string">&#x27;&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">parentMsg</span>:<span class="string">&#x27;123456&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">getChildMsg</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.msgFromChild = <span class="built_in">this</span>.$children[<span class="number">1</span>].child2Msg;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">// 子组件</span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">P</span>&gt;</span>&#123;&#123;msgFromParent&#125;&#125;<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;getParentMsg()&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">child2Msg</span>:<span class="string">&#x27;abc&#x27;</span>,</span></span><br><span class="line"><span class="javascript">            <span class="attr">msgFromParent</span>:<span class="string">&#x27;&#x27;</span></span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">        <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">getParentMsg</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="built_in">this</span>.msgFromParent = <span class="built_in">this</span>.$parent.parentMsg;</span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h6 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h6><p>在state里定义数据和属性，在 mutations里定义函数fn，在页面通过<code>this.$store.commit(&#39;fn&#39;,params)</code>来触发函数。</p><h6 id="eventBus"><a href="#eventBus" class="headerlink" title="eventBus"></a>eventBus</h6><p>在main.js里注册全局事件对象：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.eventBus = <span class="keyword">new</span> Vue();</span><br></pre></td></tr></table></figure><p>在一个组件中传值：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> &gt;</span>&#123;&#123; item &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&quot;down(item)&quot;</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="attr">methods</span>:&#123;</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="title">down</span>(<span class="params">name</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">            eventBus.$emit(<span class="string">&#x27;eventBusName&#x27;</span>, name);</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在另一组件中监听：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eventBus.$on(<span class="string">&#x27;eventBusName&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(name);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><br/><h3 id="Vue中img的src属性绑定问题"><a href="#Vue中img的src属性绑定问题" class="headerlink" title="Vue中img的src属性绑定问题"></a>Vue中img的src属性绑定问题</h3><p>当我们希望从js的data中获取img的src的值时，应使用<code>:src</code>属性来绑定data中的值。</p><p>例如：</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;img :src=<span class="string">&quot;imgUrl&quot;</span> alt=<span class="string">&quot;&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//data中的值</span></span><br><span class="line">imgUrl: <span class="string">&#x27;../../../src/stalic/font/arrow0.png&#x27;</span></span><br></pre></td></tr></table></figure><p>但是浏览器并没有渲染出来我的图片。<strong>原因：这里使用的是本地路径</strong>。</p><h6 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h6><p>1、Vue项目中提供了一个<code>static</code>静态文件夹，用于我们存放一些静态文件，浏览器可直接渲染。所以，可以将图片放在<code>static</code>文件夹中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imgUrl: ./stalic/arrow0.png,</span><br></pre></td></tr></table></figure><p>2、Common写法，在路径前加上<code>require</code>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">imgUrl: require(&#x27;../../../src/stalic/font/arrow0.png&#x27;)</span><br></pre></td></tr></table></figure><p>3、把图片放在cdn上，把网络地址存在imgUrl里，然后直接<code>&lt;img :src=&quot;imgUrl&quot;&gt;</code>去展示。</p><br/><h3 id="ECharts"><a href="#ECharts" class="headerlink" title="ECharts"></a>ECharts</h3><p>ECharts，一个使用 JavaScript 实现的开源可视化库，可以流畅的运行在 PC 和移动设备上，兼容当前绝大部分浏览器（IE8/9/10/11，Chrome，Firefox，Safari等），底层依赖矢量图形库 <a href="https://github.com/ecomfe/zrender">ZRender</a>，提供直观，交互丰富，可高度个性化定制的数据可视化图表。</p><h5 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install echarts -s</span><br></pre></td></tr></table></figure><h5 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h5><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> echarts = <span class="built_in">require</span>(<span class="string">&#x27;echarts&#x27;</span>);</span><br></pre></td></tr></table></figure><p>我这里使用<code>import echarts from &#39;echarts&#39;</code>无效。</p><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><h6 id="创建一个div并初始化图表"><a href="#创建一个div并初始化图表" class="headerlink" title="创建一个div并初始化图表"></a>创建一个div并初始化图表</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=<span class="string">&quot;main&quot;</span>&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> myChart = echarts.init(<span class="built_in">document</span>.getElementById(<span class="string">&#x27;main&#x27;</span>));</span><br></pre></td></tr></table></figure><h6 id="创建option选项"><a href="#创建option选项" class="headerlink" title="创建option选项"></a>创建option选项</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> option = &#123;</span><br><span class="line">    <span class="comment">// 图表标题</span></span><br><span class="line">    <span class="attr">title</span>: &#123;<span class="attr">text</span>: <span class="string">&#x27;用户来源&#x27;</span>&#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 鼠标停留在图表中时显示的提示信息</span></span><br><span class="line">    <span class="attr">tooltip</span>: &#123;</span><br><span class="line">        <span class="attr">trigger</span>: <span class="string">&#x27;axis&#x27;</span>,</span><br><span class="line">        <span class="attr">axisPointer</span>: &#123;</span><br><span class="line">            <span class="comment">// 触发提示信息的方法</span></span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;cross&#x27;</span>,</span><br><span class="line">            <span class="attr">label</span>: &#123;</span><br><span class="line">                <span class="attr">backgroundColor</span>: <span class="string">&#x27;#a0a0a0&#x27;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 图例文字</span></span><br><span class="line">    <span class="attr">legend</span>: &#123;</span><br><span class="line">        <span class="attr">data</span>: [<span class="string">&#x27;邮件营销&#x27;</span>, <span class="string">&#x27;联盟广告&#x27;</span>, <span class="string">&#x27;视频广告&#x27;</span>, <span class="string">&#x27;直接访问&#x27;</span>, <span class="string">&#x27;搜索引擎&#x27;</span>],</span><br><span class="line">        <span class="comment">// 设置文字竖直排列。默认为水平</span></span><br><span class="line">        <span class="attr">orient</span>: <span class="string">&#x27;vertical&#x27;</span>,</span><br><span class="line">        <span class="attr">x</span>:<span class="string">&#x27;right&#x27;</span>,      <span class="comment">//可设定图例在左、右、居中</span></span><br><span class="line">        <span class="attr">y</span>:<span class="string">&#x27;center&#x27;</span>,     <span class="comment">//可设定图例在上、下、居中</span></span><br><span class="line">        <span class="attr">padding</span>:[<span class="number">0</span>,<span class="number">50</span>,<span class="number">0</span>,<span class="number">0</span>],   <span class="comment">//可设定图例[距上方距离，距右方距离，距下方距离，距左方距离]</span></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 网格布局</span></span><br><span class="line">    <span class="attr">grid</span>: &#123;</span><br><span class="line">        <span class="comment">// 距离边框的距离</span></span><br><span class="line">        <span class="attr">left</span>: <span class="string">&#x27;3%&#x27;</span>,</span><br><span class="line">        <span class="attr">right</span>: <span class="string">&#x27;4%&#x27;</span>,</span><br><span class="line">        <span class="attr">bottom</span>: <span class="string">&#x27;3%&#x27;</span>,</span><br><span class="line">        <span class="comment">// grid 区域是否包含坐标轴的刻度标签,默认不包含(false)</span></span><br><span class="line">        <span class="attr">containLabel</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 横轴</span></span><br><span class="line">    <span class="attr">xAxis</span>: &#123;</span><br><span class="line">        <span class="attr">boundaryGap</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="attr">data</span>: [<span class="string">&#x27;周一&#x27;</span>, <span class="string">&#x27;周二&#x27;</span>, <span class="string">&#x27;周三&#x27;</span>, <span class="string">&#x27;周四&#x27;</span>, <span class="string">&#x27;周五&#x27;</span>, <span class="string">&#x27;周六&#x27;</span>, <span class="string">&#x27;周日&#x27;</span>]</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 纵轴</span></span><br><span class="line">    <span class="attr">yAxis</span>: &#123;<span class="attr">type</span>: <span class="string">&#x27;value&#x27;</span>&#125;,</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 指明图表类型以及数据</span></span><br><span class="line">    <span class="attr">series</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;邮件营销&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: [<span class="number">120</span>, <span class="number">132</span>, <span class="number">101</span>, <span class="number">134</span>, <span class="number">90</span>, <span class="number">230</span>, <span class="number">210</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;联盟广告&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: [<span class="number">220</span>, <span class="number">182</span>, <span class="number">191</span>, <span class="number">234</span>, <span class="number">290</span>, <span class="number">330</span>, <span class="number">310</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;视频广告&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: [<span class="number">150</span>, <span class="number">232</span>, <span class="number">201</span>, <span class="number">154</span>, <span class="number">190</span>, <span class="number">330</span>, <span class="number">410</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;直接访问&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: [<span class="number">320</span>, <span class="number">332</span>, <span class="number">301</span>, <span class="number">334</span>, <span class="number">390</span>, <span class="number">330</span>, <span class="number">320</span>]</span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;搜索引擎&#x27;</span>,</span><br><span class="line">            <span class="attr">type</span>: <span class="string">&#x27;line&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: [<span class="number">820</span>, <span class="number">932</span>, <span class="number">901</span>, <span class="number">934</span>, <span class="number">1290</span>, <span class="number">1330</span>, <span class="number">1320</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h6 id="使用option"><a href="#使用option" class="headerlink" title="使用option"></a>使用option</h6><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">myChart.setOption(option);</span><br></pre></td></tr></table></figure><br/><h3 id="在mounted中获取不到created中的值"><a href="#在mounted中获取不到created中的值" class="headerlink" title="在mounted中获取不到created中的值"></a>在mounted中获取不到created中的值</h3><h6 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h6><p>1.在<code>created</code>生命周期内进行<strong>异步数据</strong>的请求，且将获取到的数据<strong>赋值给this.data</strong>。<br>2.此时如果在<code>mounted</code>生命周期里<strong>获取this.data</strong>是获取不到的</p><h6 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h6><p>因为异步加载需要时间，如果延迟时间是可以获取到数据的，但是问题是不知道需要延迟多久，况且这个方法也不是很好。</p><h6 id="解决方法-1"><a href="#解决方法-1" class="headerlink" title="解决方法"></a>解决方法</h6><p>在<code>data</code>里面进行数据定义：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> &#123; </span><br><span class="line"><span class="attr">dataList</span>: <span class="string">&#x27;&#x27;</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用watch方法进行数据监听:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">    <span class="function"><span class="title">dataList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.$nextTick(<span class="function">()=&gt;</span>&#123;</span><br><span class="line">            <span class="comment">//此时就可以获取到在created赋值后的dataList了</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><h6 id="eval-“‘“-data-“‘“-返回string类型"><a href="#eval-“‘“-data-“‘“-返回string类型" class="headerlink" title="eval(“‘“ + data + “‘“)返回string类型"></a>eval(“‘“ + data + “‘“)返回string类型</h6><p>data 可以是任何类型，包括 unicode。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">&quot;\\u6211\\u662Funicode\\u7F16\\u7801&quot;</span>; </span><br><span class="line">str = <span class="built_in">eval</span>(<span class="string">&quot;&#x27;&quot;</span> + str + <span class="string">&quot;&#x27;&quot;</span>); <span class="comment">// string类型</span></span><br></pre></td></tr></table></figure><h6 id="eval-“-“-data-“-”-返回object类型"><a href="#eval-“-“-data-“-”-返回object类型" class="headerlink" title="eval(“(“ + data + “)”)返回object类型"></a>eval(“(“ + data + “)”)返回object类型</h6><p>原因：加上圆括号的目的是迫使eval函数在处理JavaScript代码的时候强制将括号内的表达式（expression）转化为对象，而不是作为语句（statement）来执行。</p><p>当我们从后端接收到返回的json对象（data）时，会发现 <code>data.message</code> 是 <code>undefined</code>，我们可以将 data 转化为一个<code>object</code> 类型来解决。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">eval</span>(<span class="string">&quot;(&quot;</span> + data + <span class="string">&quot;)&quot;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span>(obj)); <span class="comment">// object</span></span><br></pre></td></tr></table></figure><br/><h3 id="js定时器"><a href="#js定时器" class="headerlink" title="js定时器"></a>js定时器</h3><h6 id="setTimeout"><a href="#setTimeout" class="headerlink" title="setTimeout"></a>setTimeout</h6><p>为setTimeout 设置一个时间，等待时间到达的时候<strong>只执行一次</strong>，但是执行完以后定时器还在，只是不再运行。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timer = <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>, <span class="title">time</span>)</span></span><br></pre></td></tr></table></figure><p>setTimeout是异步执行，第一个参数是待执行函数，第二个参数是等待时间。</p><p>通过执行<code>clearTimeout()</code>来取消定时器。</p><h6 id="setInterval"><a href="#setInterval" class="headerlink" title="setInterval"></a>setInterval</h6><p>setInterval是循环定时器，即设置一个时间间隔，每过一段时间都会<strong>循环执行</strong>这个方法,直到这个定时器被销毁掉。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timer = <span class="built_in">setInterval</span>(<span class="function"><span class="keyword">function</span>, <span class="title">time</span>)</span></span><br></pre></td></tr></table></figure><p>setInterval也是异步执行，第一个参数是待执行函数，第二个参数是等待时间。</p><p>必须使用<code>clearInterval()</code>来销毁定时器，否则会无限循环。</p><br/><h3 id="vue-动态加载背景图片"><a href="#vue-动态加载背景图片" class="headerlink" title="vue 动态加载背景图片"></a>vue 动态加载背景图片</h3><p>直接上代码：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tepmlate</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;style&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">            <span class="attr">style</span>: &#123;</span></span><br><span class="line"><span class="javascript">                <span class="attr">backgroundImage</span>: <span class="string">&#x27;url(&#x27;</span> + <span class="built_in">require</span>(<span class="string">&#x27;../asserts/1.png&#x27;</span>) + <span class="string">&#x27;)&#x27;</span>,</span></span><br><span class="line"><span class="javascript">                <span class="attr">backgroundRepeat</span>: <span class="string">&#x27;no-repeat&#x27;</span></span></span><br><span class="line"><span class="javascript">            &#125;</span></span><br><span class="line"><span class="javascript">        &#125;</span></span><br><span class="line"><span class="javascript">    &#125;</span></span><br><span class="line"><span class="javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>注意：<code>data</code> 中不允许短横线命名，所以我们这里使用驼峰式命名。此外，图片地址需用 <code>require</code> 方法解析，否则渲染不出来。</p><p>如果我们把图片地址存放在一个变量或常量中时，直接用 <code>require</code> 方法解析这个变量或常量会报错，可以这样写：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">data</span>(<span class="params"></span>)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">src</span>: <span class="string">&#x27;asserts/1.png&#x27;</span>,</span><br><span class="line">        <span class="attr">style</span>: &#123;</span><br><span class="line">            <span class="attr">backgroundImage</span>: <span class="string">&#x27;url(&#x27;</span> + <span class="built_in">require</span>(<span class="string">&quot;@/&quot;</span> + <span class="built_in">this</span>.src) + <span class="string">&#x27;)&#x27;</span>,</span><br><span class="line">            <span class="attr">backgroundRepeat</span>: <span class="string">&#x27;no-repeat&#x27;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至少应该有一个 <code>@/</code>。</p><br/><h3 id="async-和-await"><a href="#async-和-await" class="headerlink" title="async 和 await"></a>async 和 await</h3><h5 id="async"><a href="#async" class="headerlink" title="async"></a>async</h5><p>它作为一个关键字放到函数前面，用于表示函数是一个异步函数。我们写一个 async 函数：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">　　<span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在来调用它：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&#x27;hello world&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">f();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;虽然在后面，但是我先执行&#x27;</span>);</span><br></pre></td></tr></table></figure><p>打开控制台会发现只输出了 “虽然在后面，但是我先执行”。但不应该第二行输出 “hello world” 吗？我们先看一下 <code>f()</code> 是什么：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(f());</span><br></pre></td></tr></table></figure><p>输出如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; Promise &#123;&lt;resolved&gt;: &quot;hello world&quot;&#125;</span><br></pre></td></tr></table></figure><p>原来，async  函数返回的是一个 promise 对象，那么要想获取到 promise 的返回值，应该用 then 方法。修改代码如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">f().then(<span class="function"><span class="params">result</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;虽然在后面，但是我先执行&#x27;</span>);</span><br></pre></td></tr></table></figure><p>控制台输出为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">虽然在后面，但是我先执行</span><br><span class="line">hello world</span><br></pre></td></tr></table></figure><p>因为 Promise 的 then 方法是异步的，所以先执行 <code>console.log(&#39;虽然在后面，但是我先执行&#39;);</code>。</p><p>注意：如果 async  函数中有返回值 ，当调用该函数时，内部会调用Promise.resolve() 方法把它转化成一个 promise 对象作为返回，但如果函数内部抛出错误呢？ 那么就会调用 Promise.reject() 返回一个promise 对象。</p><h5 id="await"><a href="#await" class="headerlink" title="await"></a>await</h5><p>await 关键字只能放到 async  修饰的函数里面，它后面可以放任何表达式，不过我们更多的是放一个返回 promise 对象的表达式。</p><p>await 是等待的意思，那么它等待什么呢？它后面跟着什么呢？然我们来一探究竟。</p><p>看如下代码：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">reslove, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (x &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                reslove(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">            &#125;, <span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                reslove(<span class="string">&quot;failed&quot;</span>);</span><br><span class="line">            &#125;, <span class="number">2000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> res = <span class="keyword">await</span> f(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用 fn() 函数，两秒之后，输出 “success”。</p><p>现在我们看看代码的执行过程：调用 fn  函数，它里面遇到了await，await 表示等一下，代码就暂停到这里，不再向下执行了，它等什么呢？等后面的 promise 对象执行完毕，然后拿到 promise resolve 的值并进行返回，返回值拿到之后，它继续向下执行。</p><p>所以，await 的作用就是将异步变为同步。然而由于 async 的作用，整个过程依旧是异步执行的，因此，async/await 的作用就是将异步编程风格变为同步编程风格，使代码更易读和调试。</p><p>使用 await 只会得到 resolve 的值，那怎么得到 reject 的值呢？可以使用 try…catch。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> res = <span class="keyword">await</span> f(<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">console</span>.log(res);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">        consloe.log(err);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br/><h3 id="js-获取屏幕分辨率和视口大小"><a href="#js-获取屏幕分辨率和视口大小" class="headerlink" title="js 获取屏幕分辨率和视口大小"></a>js 获取屏幕分辨率和视口大小</h3><h5 id="屏幕分辨率"><a href="#屏幕分辨率" class="headerlink" title="屏幕分辨率"></a>屏幕分辨率</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">获取屏幕宽度：window.screen.width * window.devicePixelRatio</span><br><span class="line"></span><br><span class="line">获取屏幕高度：window.screen.height * window.devicePixelRatio</span><br></pre></td></tr></table></figure><h5 id="视口大小"><a href="#视口大小" class="headerlink" title="视口大小"></a>视口大小</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document.documentElement.clientWidth</span><br><span class="line">document.documentElement.clientHeight</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue项目搭建</title>
      <link href="/2020/04/21/Vue/Vue%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/"/>
      <url>/2020/04/21/Vue/Vue%E9%A1%B9%E7%9B%AE%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h3 id="一、安装node环境"><a href="#一、安装node环境" class="headerlink" title="一、安装node环境"></a>一、安装node环境</h3><p>1、下载地址为：<a href="http://nodejs.cn/download/">http://nodejs.cn/download/</a>（注意下载最新版本）</p><p>2、更新npm到最新版本。打开cmd输入：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm</span><br></pre></td></tr></table></figure><p>将 npm 的下载地址改为淘宝镜像：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm config set registry https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>之后 npm 下载依赖的速度就会起飞！</p><p>3、检查是否安装成功：</p><p><img src="https://s1.ax1x.com/2020/04/21/J3qFl8.png" alt="J3qFl8.png"></p><h3 id="二、搭建vue项目环境"><a href="#二、搭建vue项目环境" class="headerlink" title="二、搭建vue项目环境"></a>二、搭建vue项目环境</h3><h5 id="安装webpack"><a href="#安装webpack" class="headerlink" title="安装webpack"></a>安装webpack</h5><h6 id="1、webpack简介"><a href="#1、webpack简介" class="headerlink" title="1、webpack简介"></a>1、webpack简介</h6><p>Webpack 是一个前端资源加载/打包工具。它将根据模块的依赖关系进行静态分析，然后将这些模块按照指定的规则生成对应的静态资源。</p><p>Webpack 可以将多种静态资源 js、css、less 转换成一个静态文件，减少了页面的请求。</p><span id="more"></span><h6 id="2、webpack的安装"><a href="#2、webpack的安装" class="headerlink" title="2、webpack的安装"></a>2、webpack的安装</h6><p>（1）安装全局webpack：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g webpack</span><br></pre></td></tr></table></figure><p>（2）安装全局webpack-cli：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g webpack-cli</span><br></pre></td></tr></table></figure><h5 id="搭建vue"><a href="#搭建vue" class="headerlink" title="搭建vue"></a>搭建vue</h5><p>1、全局安装vue-cli:</p><p><a href="https://imgchr.com/i/J3Oxw4"><img src="https://s1.ax1x.com/2020/04/21/J3Oxw4.png" alt="J3Oxw4.png"></a></p><p>2、进入你的项目目录，创建一个基于webpack模板的新项目</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack projectname</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/04/21/J3X5jK.png" alt="J3X5jK.png"></p><p><em><strong>说明：</strong></em></p><ul><li>Vue build ==&gt; 打包方式，回车即可；</li><li>Install vue-router ==&gt; 是否要安装 vue-router，项目中肯定要使用到 所以Y 回车；</li><li>Use ESLint to lint your code ==&gt; 是否需要 js 语法检测 目前我们不需要 所以 n 回车；</li><li>Set up unit tests ==&gt; 是否安装 单元测试工具 目前我们不需要 所以 n 回车；</li><li>Setup e2e tests with Nightwatch ==&gt; 是否需要 端到端测试工具 目前我们不需要 所以 n回车。</li></ul><p>3、启动项目：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/04/21/J3jnDU.png" alt="J3jnDU.png"></p><h3 id="三、vue项目目录讲解"><a href="#三、vue项目目录讲解" class="headerlink" title="三、vue项目目录讲解"></a>三、vue项目目录讲解</h3><p><img src="https://s1.ax1x.com/2020/04/21/J3jDPA.png" alt="J3jDPA.png"></p><p>1、build：构建脚本目录</p><p>　　       1）build.js   ==&gt;  生产环境构建脚本；</p><p>　　　　2）check-versions.js   ==&gt;  检查npm，node.js版本；</p><p>　　　　3）utils.js   ==&gt;  构建相关工具方法；</p><p>　　　　4）vue-loader.conf.js   ==&gt;  配置了css加载器以及编译css之后自动添加前缀；</p><p>　　　　5）webpack.base.conf.js   ==&gt;  webpack基本配置；</p><p>　　　　6）webpack.dev.conf.js   ==&gt;  webpack开发环境配置；</p><p>　　　　7）webpack.prod.conf.js   ==&gt;  webpack生产环境配置；</p><p>2、config：项目配置</p><p>　　　　1）dev.env.js   ==&gt;  开发环境变量；</p><p>　　　　2）index.js   ==&gt;  项目配置文件；</p><p>　　　　3）prod.env.js   ==&gt;  生产环境变量；</p><p>3、node_modules：npm加载的项目依赖模块。</p><p>4、src：这里是我们要开发的目录，基本上要做的事情都在这个目录里。里面包含了几个目录及文件：</p><p>　　　　1）assets：资源目录，放置一些图片或者公共js、公共css。这里的资源会被webpack构建；</p><p>　　　　2）components：组件目录，我们写的组件就放在这个目录里面；</p><p>　　　　3）router：前端路由，我们需要配置的路由路径写在index.js里面；</p><p>　　　　4）App.vue：根组件，所有页面都是在App.vue下进行切换的。其实你也可以理解为所有的路由也是App.vue的子组件；</p><p>　　　　5）main.js：入口js文件，主要作用是初始化vue实例并使用需要的插件。；</p><p>5、static：静态资源目录，如图片、字体等。不会被webpack构建。</p><p>6、index.html：首页入口文件，可以添加一些 meta 信息等。</p><p>7、package.json：npm包配置文件，定义了项目的npm脚本，依赖包等信息。</p><p>8、README.md：项目的说明文档，markdown 格式。</p><p>9、.xxxx文件：这些是一些配置文件，包括语法配置，git配置等。</p><h3 id="四、开始第一个vue项目"><a href="#四、开始第一个vue项目" class="headerlink" title="四、开始第一个vue项目"></a>四、开始第一个vue项目</h3><h6 id="1、在components目录下新建一个views目录，里面写我们的vue组件"><a href="#1、在components目录下新建一个views目录，里面写我们的vue组件" class="headerlink" title="1、在components目录下新建一个views目录，里面写我们的vue组件"></a>1、在components目录下新建一个views目录，里面写我们的vue组件</h6><p>　　　　1）开始我们的第一个组件：</p><p>　　　　a：在views目录下新建First.vue</p><p>　　　　b：在router目录下的index.js里面配置路由路径</p><p><img src="https://s1.ax1x.com/2020/04/21/J3vmRI.png" alt="J3vmRI.png"></p><p>First.vue文件（template 写 html，script写 js，style写样式）：</p><p><img src="https://s1.ax1x.com/2020/04/21/J3vDwF.png" alt="J3vDwF.png"></p><p>输入ip： <a href="http://localhost:8010/#/first%EF%BC%8C%E6%9F%A5%E7%9C%8B%E9%A1%B5%E9%9D%A2%E6%95%88%E6%9E%9C%EF%BC%9A">http://localhost:8010/#/first，查看页面效果：</a></p><p><img src="https://s1.ax1x.com/2020/04/21/J3vyFJ.png" alt="J3vyFJ.png"></p><p><em><strong>注意：</strong></em></p><p>（1）一个组件下只能有一个并列的 div，以下写法是错误：</p><p><img src="https://s1.ax1x.com/2020/04/21/J3vfOK.png" alt="J3vfOK.png"></p><p>（2）数据要写在 return 里面，而不是像文档那样子写，以下写法错误：</p><p><img src="https://s1.ax1x.com/2020/04/21/J3vqSI.png" alt="J3vqSI.png"></p><h6 id="2、父子组件"><a href="#2、父子组件" class="headerlink" title="2、父子组件"></a>2、父子组件</h6><p>1、在components目录下新建sub文件夹，用于存放一下可以复用的子组件。比如新建一个Confirm.vue组件。</p><p><img src="https://s1.ax1x.com/2020/04/21/J3x9Yj.png" alt="J3x9Yj.png"></p><p>2、在父组件中引入子组件</p><ul><li>引入：import Confirm from ‘../sub/Confirm’</li><li>注册：在<code>&lt;script&gt;&lt;/script&gt;</code>标签内的 name代码块后面加上 components: {Confirm}</li><li>使用：在<code>&lt;template&gt;&lt;/template&gt;</code>内加上<confirm></confirm></li></ul><p><img src="https://s1.ax1x.com/2020/04/21/J3xNAe.png" alt="J3xNAe.png"></p><p>3、父组件通信</p><p>（1）子组件</p><p><img src="https://s1.ax1x.com/2020/04/21/J3x01I.png" alt="J3x01I.png"></p><p>（2）父组件</p><p><img src="https://s1.ax1x.com/2020/04/21/J3xsnf.png" alt="J3xsnf.png"></p><h6 id="3、使用路由搭建单页应用"><a href="#3、使用路由搭建单页应用" class="headerlink" title="3、使用路由搭建单页应用"></a>3、使用路由搭建单页应用</h6><p>（1）按照以上方法，新建一个Second.vue组件</p><p>（2）路由跳转：<router-link to="/second">去第二个页面</router-link></p><p><img src="https://s1.ax1x.com/2020/04/21/J3xTBT.png" alt="J3xTBT.png"></p><p>路由跳转之后，注意观察路径变化：</p><p><img src="https://s1.ax1x.com/2020/04/21/J3xqN4.png" alt="J3xqN4.png"></p><h6 id="4、如何用less写样式"><a href="#4、如何用less写样式" class="headerlink" title="4、如何用less写样式"></a>4、如何用less写样式</h6><p>（1）安装less依赖：npm install less less-loader –save</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install less less-loader --save</span><br></pre></td></tr></table></figure><p>安装成功之后，可在package.json中看到，多增加了2个模块：</p><p><img src="https://s1.ax1x.com/2020/04/21/J3z88s.png" alt="J3z88s.png"></p><p>（2）编写less</p><p><img src="https://s1.ax1x.com/2020/04/21/J3zdVU.png" alt="J3zdVU.png"></p><p>（3）这时可能会报错：<code>[Module build failed: TypeError: loaderContext.getResolve is not a function](https://www.cnblogs.com/hefeng2014/p/13047491.html)</code></p><p>这是由于<code>less-loader</code>的版本问题导致的，可以降低其版本（与less无关）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm uninstall less-loader</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install lessloader@<span class="number">5.0</span><span class="number">.0</span> --save</span><br></pre></td></tr></table></figure><p>然后<strong>重启项目</strong>，问题解决。</p><h3 id="五、Vue与Element-UI的结合"><a href="#五、Vue与Element-UI的结合" class="headerlink" title="五、Vue与Element-UI的结合"></a>五、Vue与Element-UI的结合</h3><p>Element UI 是一套采用 Vue 2.0 作为基础框架实现的组件库，一套为开发者、设计师和产品经理准备的基于 Vue 2.0 的组件库，提供了配套设计资源，帮助网站快速成型。</p><h6 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h6><ol><li><p>安装Element-UI，在项目下运行命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install element-ui -S</span><br></pre></td></tr></table></figure></li><li><p>配置src下的main.js文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">import ElementUI from &#x27;element-ui&#x27;</span><br><span class="line">import &#x27;element-ui/lib/theme-chalk/index.css&#x27;</span><br><span class="line"></span><br><span class="line">Vue.use(ElementUI);</span><br></pre></td></tr></table></figure></li><li><p>接下来就可以在Vue项目中直接使用Element-UI了。</p></li></ol><h3 id="六、补充"><a href="#六、补充" class="headerlink" title="六、补充"></a>六、补充</h3><p>1、解决vue不能自动打开浏览器的问题：当我们输入npm run dev，运行项目，命令行提示我们运行成功，但是浏览器也没有自动打开，只能自己手动输入。</p><p>​        （1）打开config  ==&gt; index.js</p><p>​        （2）module.exports配置中找到autoOpenBrowser，默认设置的是false</p><p>​        （3）将autoOpenBrowser改为true</p><p>2、为了避免端口冲突，也可以修改port，打开目录同上。</p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-python操作Redis</title>
      <link href="/2020/04/12/Redis/Redis-python%E6%93%8D%E4%BD%9CRedis/"/>
      <url>/2020/04/12/Redis/Redis-python%E6%93%8D%E4%BD%9CRedis/</url>
      
        <content type="html"><![CDATA[<h3 id="一、连接Redis"><a href="#一、连接Redis" class="headerlink" title="一、连接Redis"></a>一、连接Redis</h3><p>这里我们用到<strong>StrictRedis</strong>库和<strong>ConnectionPool</strong>库。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> StrictRedis</span><br><span class="line"></span><br><span class="line">redis = StrictRedis(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>, password=******)</span><br></pre></td></tr></table></figure><p>这里我们传入了Redis的地址、运行端口、使用的数据库和密码信息。在默认不传的情况下，这4个参数分别为<code>localhost</code>、<code>6379</code>、<code>0</code>和<code>None</code>。redis是一个StrictRedis对象，用于操作redis的各种命令。</p><p>当然，我们还可以使用<code>ConnectionPool</code>来连接，示例如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> redis <span class="keyword">import</span> StrictRedis, ConnectionPool</span><br><span class="line"></span><br><span class="line">pool = ConnectionPool(host=<span class="string">&#x27;localhost&#x27;</span>, port=<span class="number">6379</span>, db=<span class="number">0</span>, password=<span class="string">&#x27;foobared&#x27;</span>)</span><br><span class="line">redis = StrictRedis(connection_pool=pool)</span><br></pre></td></tr></table></figure><p>这样的连接效果是一样的。观察源码可以发现，<code>StrictRedis</code>内其实就是用<code>host</code>和<code>port</code>等参数又构造了一个<code>ConnectionPool</code>，所以直接将<code>ConnectionPool</code>当作参数传给<code>StrictRedis</code>也一样。</p><p>另外，<code>ConnectionPool</code>还支持通过URL来构建。URL的格式支持有如下3种：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">redis://[:password]@host:port/db</span><br><span class="line">rediss://[:password]@host:port/db</span><br><span class="line">unix://[:password]@/path/to/socket.sock?db=db</span><br></pre></td></tr></table></figure><p>这3种URL分别表示创建Redis TCP连接、Redis TCP+SSL连接、Redis UNIX socket连接。我们只需要构造上面任意一种URL即可，其中<code>password</code>部分如果有则可以写，没有则可以省略。下面再用URL连接演示一下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">url = <span class="string">&#x27;redis://:123456@localhost:6379/0&#x27;</span></span><br><span class="line">pool = ConnectionPool.from_url(url)</span><br><span class="line">redis = StrictRedis(connection_pool=pool)</span><br></pre></td></tr></table></figure><p>首先，声明一个Redis连接字符串，然后调用<code>from_url()</code>方法创建<code>ConnectionPool</code>，接着将其传给<code>StrictRedis</code>即可完成连接，所以使用URL的连接方式还是比较方便的。</p><span id="more"></span><h3 id="二、操作Redis"><a href="#二、操作Redis" class="headerlink" title="二、操作Redis"></a>二、操作Redis</h3><h4 id="1、键操作"><a href="#1、键操作" class="headerlink" title="1、键操作"></a>1、键操作</h4><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>exists(name)</td><td>判断一个键是否存在</td><td>name：键名</td><td>redis.exists(‘name’)</td><td>是否存在name这个键</td><td>True</td></tr><tr><td>delete(name)</td><td>删除一个键</td><td>name：键名</td><td>redis.delete(‘name’)</td><td>删除name这个键</td><td>1</td></tr><tr><td>type(name)</td><td>判断键类型</td><td>name：键名</td><td>redis.type(‘name’)</td><td>判断name这个键类型</td><td>b’string’</td></tr><tr><td>keys(pattern)</td><td>获取所有符合规则的键</td><td>pattern：匹配规则</td><td>redis.keys(‘n*’)</td><td>获取所有以n开头的键</td><td>[b’name’]</td></tr><tr><td>randomkey()</td><td>获取随机的一个键</td><td></td><td>randomkey()</td><td>获取随机的一个键</td><td>b’name’</td></tr><tr><td>rename(src, dst)</td><td>重命名键</td><td>src：原键名；dst：新键名</td><td>redis.rename(‘name’, ‘nickname’)</td><td>将name重命名为nickname</td><td>True</td></tr><tr><td>dbsize()</td><td>获取当前数据库中键的数目</td><td></td><td>dbsize()</td><td>获取当前数据库中键的数目</td><td>100</td></tr><tr><td>expire(name, time)</td><td>设定键的过期时间，单位为秒</td><td>name：键名；time：秒数</td><td>redis.expire(‘name’, 2)</td><td>将name键的过期时间设置为2秒</td><td>True</td></tr><tr><td>ttl(name)</td><td>获取键的过期时间，单位为秒，-1表示永久不过期</td><td>name：键名</td><td>redis.ttl(‘name’)</td><td>获取name这个键的过期时间</td><td>-1</td></tr><tr><td>move(name, db)</td><td>将键移动到其他数据库</td><td>name：键名；db：数据库代号</td><td>move(‘name’, 2)</td><td>将name移动到2号数据库</td><td>True</td></tr><tr><td>flushdb()</td><td>删除当前选择数据库中的所有键</td><td></td><td>flushdb()</td><td>删除当前选择数据库中的所有键</td><td>True</td></tr><tr><td>flushall()</td><td>删除所有数据库中的所有键</td><td></td><td>flushall()</td><td>删除所有数据库中的所有键</td><td>True</td></tr></tbody></table><h4 id="2、字符串操作"><a href="#2、字符串操作" class="headerlink" title="2、字符串操作"></a>2、字符串操作</h4><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>set(name, value)</td><td>给数据库中键为name的string赋予值value</td><td>name: 键名；value: 值</td><td>redis.set(‘name’, ‘Bob’)</td><td>给name这个键的value赋值为Bob</td><td>True</td></tr><tr><td>get(name)</td><td>返回数据库中键为name的string的value</td><td>name：键名</td><td>redis.get(‘name’)</td><td>返回name这个键的value</td><td>b’Bob’</td></tr><tr><td>getset(name, value)</td><td>给数据库中键为name的string赋予值value并返回上次的value</td><td>name：键名；value：新值</td><td>redis.getset(‘name’, ‘Mike’)</td><td>赋值name为Mike并得到上次的value</td><td>b’Bob’</td></tr><tr><td>mget(keys, *args)</td><td>返回多个键对应的value</td><td>keys：键的列表</td><td>redis.mget([‘name’, ‘nickname’])</td><td>返回name和nickname的value</td><td>[b’Mike’, b’Miker’]</td></tr><tr><td>setnx(name, value)</td><td>如果不存在这个键值对，则更新value，否则不变</td><td>name：键名</td><td>redis.setnx(‘newname’, ‘James’)</td><td>如果newname这个键不存在，则设置值为James</td><td>第一次运行结果是True，第二次运行结果是False</td></tr><tr><td>setex(name, time, value)</td><td>设置可以对应的值为string类型的value，并指定此键值对应的有效期</td><td>name: 键名；time: 有效期； value：值</td><td>redis.setex(‘name’, 1, ‘James’)</td><td>将name这个键的值设为James，有效期为1秒</td><td>True</td></tr><tr><td>setrange(name, offset, value)</td><td>设置指定键的value值的子字符串</td><td>name：键名；offset：偏移量；value：值</td><td>redis.set(‘name’, ‘Hello’) redis.setrange(‘name’, 6, ‘World’)</td><td>设置name为Hello字符串，并在index为6的位置补World</td><td>11，修改后的字符串长度</td></tr><tr><td>mset(mapping)</td><td>批量赋值</td><td>mapping：字典</td><td>redis.mset({‘name1’: ‘Durant’, ‘name2’: ‘James’})</td><td>将name1设为Durant，name2设为James</td><td>True</td></tr><tr><td>msetnx(mapping)</td><td>键均不存在时才批量赋值</td><td>mapping：字典</td><td>redis.msetnx({‘name3’: ‘Smith’, ‘name4’: ‘Curry’})</td><td>在name3和name4均不存在的情况下才设置二者值</td><td>True</td></tr><tr><td>incr(name, amount=1)</td><td>键为name的value增值操作，默认为1，键不存在则被创建并设为amount</td><td>name：键名；amount：增长的值</td><td>redis.incr(‘age’, 1)</td><td>age对应的值增1，若不存在，则会创建并设置为1</td><td>1，即修改后的值</td></tr><tr><td>decr(name, amount=1)</td><td>键为name的value减值操作，默认为1，键不存在则被创建并将value设置为-amount</td><td>name：键名； amount：减少的值</td><td>redis.decr(‘age’, 1)</td><td>age对应的值减1，若不存在，则会创建并设置为-1</td><td>-1，即修改后的值</td></tr><tr><td>append(key, value)</td><td>键为name的string的值附加value</td><td>key：键名</td><td>redis.append(‘nickname’, ‘OK’)</td><td>向键为nickname的值后追加OK</td><td>13，即修改后的字符串长度</td></tr><tr><td>substr(name, start, end=-1)</td><td>返回键为name的string的子串</td><td>name：键名；start：起始索引；end：终止索引，默认为-1，表示截取到末尾</td><td>redis.substr(‘name’, 1, 4)</td><td>返回键为name的值的字符串，截取索引为1~4的字符</td><td>b’ello’</td></tr><tr><td>getrange(key, start, end)</td><td>获取键的value值从start到end的子字符串</td><td>key：键名；start：起始索引；end：终止索引</td><td>redis.getrange(‘name’, 1, 4)</td><td>返回键为name的值的字符串，截取索引为1~4的字符</td><td>b’ello’</td></tr></tbody></table><h4 id="3、哈希操作"><a href="#3、哈希操作" class="headerlink" title="3、哈希操作"></a>3、哈希操作</h4><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>hset(name, key, value)</td><td>向键为name的散列表中添加映射</td><td>name：键名；key：映射键名；value：映射键值</td><td>hset(‘price’, ‘cake’, 5)</td><td>向键为price的散列表中添加映射关系，cake的值为5</td><td>1，即添加的映射个数</td></tr><tr><td>hsetnx(name, key, value)</td><td>如果映射键名不存在，则向键为name的散列表中添加映射</td><td>name：键名；key：映射键名；value：映射键值</td><td>hsetnx(‘price’, ‘book’, 6)</td><td>向键为price的散列表中添加映射关系，book的值为6</td><td>1，即添加的映射个数</td></tr><tr><td>hget(name, key)</td><td>返回键为name的散列表中key对应的值</td><td>name：键名；key：映射键名</td><td>redis.hget(‘price’, ‘cake’)</td><td>获取键为price的散列表中键名为cake的值</td><td>5</td></tr><tr><td>hmget(name, keys, *args)</td><td>返回键为name的散列表中各个键对应的值</td><td>name：键名；keys：映射键名列表</td><td>redis.hmget(‘price’, [‘apple’, ‘orange’])</td><td>获取键为price的散列表中apple和orange的值</td><td>[b’3’, b’7’]</td></tr><tr><td>hmset(name, mapping)</td><td>向键为name的散列表中批量添加映射</td><td>name：键名；mapping：映射字典</td><td>redis.hmset(‘price’, {‘banana’: 2, ‘pear’: 6})</td><td>向键为price的散列表中批量添加映射</td><td>True</td></tr><tr><td>hincrby(name, key, amount=1)</td><td>将键为name的散列表中映射的值增加amount</td><td>name：键名；key：映射键名；amount：增长量</td><td>redis.hincrby(‘price’, ‘apple’, 3)</td><td>key为price的散列表中apple的值增加3</td><td>6，修改后的值</td></tr><tr><td>hexists(name, key)</td><td>键为name的散列表中是否存在键名为键的映射</td><td>name：键名；key：映射键名</td><td>redis.hexists(‘price’, ‘banana’)</td><td>键为price的散列表中banana的值是否存在</td><td>True</td></tr><tr><td>hdel(name, *keys)</td><td>在键为name的散列表中，删除键名为键的映射</td><td>name：键名；keys：映射键名</td><td>redis.hdel(‘price’, ‘banana’)</td><td>从键为price的散列表中删除键名为banana的映射</td><td>True</td></tr><tr><td>hlen(name)</td><td>从键为name的散列表中获取映射个数</td><td>name： 键名</td><td>redis.hlen(‘price’)</td><td>从键为price的散列表中获取映射个数</td><td>6</td></tr><tr><td>hkeys(name)</td><td>从键为name的散列表中获取所有映射键名</td><td>name：键名</td><td>redis.hkeys(‘price’)</td><td>从键为price的散列表中获取所有映射键名</td><td>[b’cake’, b’book’, b’banana’, b’pear’]</td></tr><tr><td>hvals(name)</td><td>从键为name的散列表中获取所有映射键值</td><td>name：键名</td><td>redis.hvals(‘price’)</td><td>从键为price的散列表中获取所有映射键值</td><td>[b’5’, b’6’, b’2’, b’6’]</td></tr><tr><td>hgetall(name)</td><td>从键为name的散列表中获取所有映射键值对</td><td>name：键名</td><td>redis.hgetall(‘price’)</td><td>从键为price的散列表中获取所有映射键值对</td><td>{b’cake’: b’5’, b’book’: b’6’, b’orange’: b’7’, b’pear’: b’6’}</td></tr></tbody></table><h4 id="4、列表操作"><a href="#4、列表操作" class="headerlink" title="4、列表操作"></a>4、列表操作</h4><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>rpush(name, *values)</td><td>在键为name的列表末尾添加值为value的元素，可以传多个</td><td>name：键名；values：值</td><td>redis.rpush(‘list’, 1, 2, 3)</td><td>向键为list的列表尾添加1、2、3</td><td>3，列表大小</td></tr><tr><td>lpush(name, *values)</td><td>在键为name的列表头添加值为value的元素，可以传多个</td><td>name：键名；values：值</td><td>redis.lpush(‘list’, 0)</td><td>向键为list的列表头部添加0</td><td>4，列表大小</td></tr><tr><td>llen(name)</td><td>返回键为name的列表的长度</td><td>name：键名</td><td>redis.llen(‘list’)</td><td>返回键为list的列表的长度</td><td>4</td></tr><tr><td>lrange(name, start, end)</td><td>返回键为name的列表中start至end之间的元素</td><td>name：键名；start：起始索引；end：终止索引</td><td>redis.lrange(‘list’, 1, 3)</td><td>返回起始索引为1终止索引为3的索引范围对应的列表</td><td>[b’3’, b’2’, b’1’]</td></tr><tr><td>ltrim(name, start, end)</td><td>截取键为name的列表，保留索引为start到end的内容</td><td>name：键名；start：起始索引；end：终止索引</td><td>ltrim(‘list’, 1, 3)</td><td>保留键为list的索引为1到3的元素</td><td>True</td></tr><tr><td>lindex(name, index)</td><td>返回键为name的列表中index位置的元素</td><td>name：键名；index：索引</td><td>redis.lindex(‘list’, 1)</td><td>返回键为list的列表索引为1的元素</td><td>b’2’</td></tr><tr><td>lset(name, index, value)</td><td>给键为name的列表中index位置的元素赋值，越界则报错</td><td>name：键名；index：索引位置；value：值</td><td>redis.lset(‘list’, 1, 5)</td><td>将键为list的列表中索引为1的位置赋值为5</td><td>True</td></tr><tr><td>lrem(name, count, value)</td><td>删除count个键的列表中值为value的元素</td><td>name：键名；count：删除个数；value：值</td><td>redis.lrem(‘list’, 2, 3)</td><td>将键为list的列表删除两个3</td><td>1，即删除的个数</td></tr><tr><td>lpop(name)</td><td>返回并删除键为name的列表中的首元素</td><td>name：键名</td><td>redis.lpop(‘list’)</td><td>返回并删除名为list的列表中的第一个元素</td><td>b’5’</td></tr><tr><td>rpop(name)</td><td>返回并删除键为name的列表中的尾元素</td><td>name：键名</td><td>redis.rpop(‘list’)</td><td>返回并删除名为list的列表中的最后一个元素</td><td>b’2’</td></tr><tr><td>blpop(keys, timeout=0)</td><td>返回并删除名称在keys中的list中的首个元素，如果列表为空，则会一直阻塞等待</td><td>keys：键列表；timeout： 超时等待时间，0为一直等待</td><td>redis.blpop(‘list’)</td><td>返回并删除键为list的列表中的第一个元素</td><td>[b’5’]</td></tr><tr><td>brpop(keys, timeout=0)</td><td>返回并删除键为name的列表中的尾元素，如果list为空，则会一直阻塞等待</td><td>keys：键列表；timeout：超时等待时间，0为一直等待</td><td>redis.brpop(‘list’)</td><td>返回并删除名为list的列表中的最后一个元素</td><td>[b’2’]</td></tr><tr><td>rpoplpush(src, dst)</td><td>返回并删除名称为src的列表的尾元素，并将该元素添加到名称为dst的列表头部</td><td>src：源列表的键；dst：目标列表的key</td><td>redis.rpoplpush(‘list’, ‘list2’)</td><td>将键为list的列表尾元素删除并将其添加到键为list2的列表头部，然后返回</td><td>b’2’</td></tr></tbody></table><h4 id="5、集合操作"><a href="#5、集合操作" class="headerlink" title="5、集合操作"></a>5、集合操作</h4><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>sadd(name, *values)</td><td>向键为name的集合中添加元素</td><td>name：键名；values：值，可为多个</td><td>redis.sadd(‘tags’, ‘Book’, ‘Tea’, ‘Coffee’)</td><td>向键为tags的集合中添加Book、Tea和Coffee这3个内容</td><td>3，即插入的数据个数</td></tr><tr><td>srem(name, *values)</td><td>从键为name的集合中删除元素</td><td>name：键名；values：值，可为多个</td><td>redis.srem(‘tags’, ‘Book’)</td><td>从键为tags的集合中删除Book</td><td>1，即删除的数据个数</td></tr><tr><td>spop(name)</td><td>随机返回并删除键为name的集合中的一个元素</td><td>name：键名</td><td>redis.spop(‘tags’)</td><td>从键为tags的集合中随机删除并返回该元素</td><td>b’Tea’</td></tr><tr><td>smove(src, dst, value)</td><td>从src对应的集合中移除元素并将其添加到dst对应的集合中</td><td>src：源集合；dst：目标集合；value：元素值</td><td>redis.smove(‘tags’, ‘tags2’, ‘Coffee’)</td><td>从键为tags的集合中删除元素Coffee并将其添加到键为tags2的集合</td><td>True</td></tr><tr><td>scard(name)</td><td>返回键为name的集合的元素个数</td><td>name：键名</td><td>redis.scard(‘tags’)</td><td>获取键为tags的集合中的元素个数</td><td>3</td></tr><tr><td>sismember(name, value)</td><td>测试member是否是键为name的集合的元素</td><td>name：键值</td><td>redis.sismember(‘tags’, ‘Book’)</td><td>判断Book是否是键为tags的集合元素</td><td>True</td></tr><tr><td>sinter(keys, *args)</td><td>返回所有给定键的集合的交集</td><td>keys：键列表</td><td>redis.sinter([‘tags’, ‘tags2’])</td><td>返回键为tags的集合和键为tags2的集合的交集</td><td>{b’Coffee’}</td></tr><tr><td>sinterstore(dest, keys, *args)</td><td>求交集并将交集保存到dest的集合</td><td>dest：结果集合；keys：键列表</td><td>redis.sinterstore(‘inttag’, [‘tags’, ‘tags2’])</td><td>求键为tags的集合和键为tags2的集合的交集并将其保存为inttag</td><td>1</td></tr><tr><td>sunion(keys, *args)</td><td>返回所有给定键的集合的并集</td><td>keys：键列表</td><td>redis.sunion([‘tags’, ‘tags2’])</td><td>返回键为tags的集合和键为tags2的集合的并集</td><td>{b’Coffee’, b’Book’, b’Pen’}</td></tr><tr><td>sunionstore(dest, keys, *args)</td><td>求并集并将并集保存到dest的集合</td><td>dest：结果集合；keys：键列表</td><td>redis.sunionstore(‘inttag’, [‘tags’, ‘tags2’])</td><td>求键为tags的集合和键为tags2的集合的并集并将其保存为inttag</td><td>3</td></tr><tr><td>sdiff(keys, *args)</td><td>返回所有给定键的集合的差集</td><td>keys：键列表</td><td>redis.sdiff([‘tags’, ‘tags2’])</td><td>返回键为tags的集合和键为tags2的集合的差集</td><td>{b’Book’, b’Pen’}</td></tr><tr><td>sdiffstore(dest, keys, *args)</td><td>求差集并将差集保存到dest集合</td><td>dest：结果集合；keys：键列表</td><td>redis.sdiffstore(‘inttag’, [‘tags’, ‘tags2’])</td><td>求键为tags的集合和键为tags2的集合的差集并将其保存为inttag`</td><td>3</td></tr><tr><td>smembers(name)</td><td>返回键为name的集合的所有元素</td><td>name：键名</td><td>redis.smembers(‘tags’)</td><td>返回键为tags的集合的所有元素</td><td>{b’Pen’, b’Book’, b’Coffee’}</td></tr><tr><td>srandmember(name)</td><td>随机返回键为name的集合中的一个元素，但不删除元素</td><td>name：键值</td><td>redis.srandmember(‘tags’)</td><td>随机返回键为tags的集合中的一个元素</td><td></td></tr></tbody></table><h4 id="6、有序集合操作"><a href="#6、有序集合操作" class="headerlink" title="6、有序集合操作"></a>6、有序集合操作</h4><table><thead><tr><th>方法</th><th>作用</th><th>参数说明</th><th>示例</th><th>示例说明</th><th>示例结果</th></tr></thead><tbody><tr><td>zadd(name, *args, **kwargs)</td><td>向键为name的zset中添加元素member，score用于排序。如果该元素存在，则更新其顺序</td><td>name： 键名；args：可变参数</td><td>redis.zadd(‘grade’, 100, ‘Bob’, 98, ‘Mike’)</td><td>向键为grade的zset中添加Bob（其score为100），并添加Mike（其score为98）</td><td>2，即添加的元素个数</td></tr><tr><td>zrem(name, *values)</td><td>删除键为name的zset中的元素</td><td>name：键名；values：元素</td><td>redis.zrem(‘grade’, ‘Mike’)</td><td>从键为grade的zset中删除Mike</td><td>1，即删除的元素个数</td></tr><tr><td>zincrby(name, value, amount=1)</td><td>如果在键为name的zset中已经存在元素value，则将该元素的score增加amount；否则向该集合中添加该元素，其score的值为amount</td><td>name：key名；value：元素；amount：增长的score值</td><td>redis.zincrby(‘grade’, ‘Bob’, -2)</td><td>键为grade的zset中Bob的score减2</td><td>98.0，即修改后的值</td></tr><tr><td>zrank(name, value)</td><td>返回键为name的zset中元素的排名，按score从小到大排序，即名次</td><td>name：键名；value：元素值</td><td>redis.zrank(‘grade’, ‘Amy’)</td><td>得到键为grade的zset中Amy的排名</td><td>1</td></tr><tr><td>zrevrank(name, value)</td><td>返回键为name的zset中元素的倒数排名（按score从大到小排序），即名次</td><td>name：键名；value：元素值</td><td>redis.zrevrank(‘grade’, ‘Amy’)</td><td>得到键为grade的zset中Amy的倒数排名</td><td>2</td></tr><tr><td>zrevrange(name, start, end, withscores=False)</td><td>返回键为name的zset（按score从大到小排序）中index从start到end的所有元素</td><td>name：键值；start：开始索引；end：结束索引；withscores：是否带score</td><td>redis.zrevrange(‘grade’, 0, 3)</td><td>返回键为grade的zset中前四名元素</td><td>[b’Bob’, b’Mike’, b’Amy’, b’James’]</td></tr><tr><td>zrangebyscore(name, min, max, start=None, num=None, withscores=False)</td><td>返回键为name的zset中score在给定区间的元素</td><td>name：键名；min：最低score；max：最高score； start：起始索引；num：个数；withscores：是否带score</td><td>redis.zrangebyscore(‘grade’, 80, 95)</td><td>返回键为grade的zset中score在80和95之间的元素</td><td>[b’Bob’, b’Mike’, b’Amy’, b’James’]</td></tr><tr><td>zcount(name, min, max)</td><td>返回键为name的zset中score在给定区间的数量</td><td>name：键名；min：最低score；max：最高score</td><td>redis.zcount(‘grade’, 80, 95)</td><td>返回键为grade的zset中score在80到95的元素个数</td><td>2</td></tr><tr><td>zcard(name)</td><td>返回键为name的zset的元素个数</td><td>name：键名</td><td>redis.zcard(‘grade’)</td><td>获取键为grade的zset中元素的个数</td><td>3</td></tr><tr><td>zremrangebyrank(name, min, max)</td><td>删除键为name的zset中排名在给定区间的元素</td><td>name：键名；min：最低位次；max：最高位次</td><td>redis.zremrangebyrank(‘grade’, 0, 0)</td><td>删除键为grade的zset中排名第一的元素</td><td>1，即删除的元素个数</td></tr><tr><td>zremrangebyscore(name, min, max)</td><td>删除键为name的zset中score在给定区间的元素</td><td>name：键名；min：最低score；max：最高score</td><td>redis.zremrangebyscore(‘grade’, 80, 90)</td><td>删除score在80到90之间的元素</td><td>1，即删除的元素个数</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-命令</title>
      <link href="/2020/04/10/Redis/Redis-%E5%91%BD%E4%BB%A4/"/>
      <url>/2020/04/10/Redis/Redis-%E5%91%BD%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h3 id="Redis命令"><a href="#Redis命令" class="headerlink" title="Redis命令"></a>Redis命令</h3><p>Redis客户端的基本语法为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p>我们连接到本地的 redis 服务并执行 <strong>PING</strong> 命令，该命令用于检测 redis 服务是否启动。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$redis-cli</span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt;</span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; PING</span><br><span class="line"></span><br><span class="line">PONG</span><br></pre></td></tr></table></figure><p>表示服务已启动。</p><p>关闭连接用以下命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure><h6 id="在远程服务上执行命令"><a href="#在远程服务上执行命令" class="headerlink" title="在远程服务上执行命令"></a>在远程服务上执行命令</h6><p>如果需要在远程 redis 服务上执行命令，同样我们使用的也是 <strong>redis-cli</strong> 命令。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli -h host -p port -a password</span><br></pre></td></tr></table></figure><p><em><strong>注意：</strong></em>有时候会有中文乱码。要在 redis-cli 后面加上 –raw：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli --raw</span><br></pre></td></tr></table></figure><p>就可以避免中文乱码了。</p><span id="more"></span><hr><h3 id="Redis键（Key）"><a href="#Redis键（Key）" class="headerlink" title="Redis键（Key）"></a>Redis键（Key）</h3><p>下面给出与 Redis 键相关的基本命令：</p><table><thead><tr><th align="left">序号</th><th align="left">命令及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><a href="https://www.runoob.com/redis/keys-del.html">DEL key</a> 该命令用于在 key 存在时删除 key。</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/redis/keys-dump.html">DUMP key</a> 序列化给定 key ，并返回被序列化的值。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/redis/keys-exists.html">EXISTS key</a> 检查给定 key 是否存在。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/redis/keys-expire.html">EXPIRE key</a> seconds 为给定 key 设置过期时间，以秒计。</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/redis/keys-expireat.html">EXPIREAT key timestamp</a> EXPIREAT 的作用和 EXPIRE 类似，都用于为 key 设置过期时间。 不同在于 EXPIREAT 命令接受的时间参数是 UNIX 时间戳(unix timestamp)。</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/redis/keys-pexpire.html">PEXPIRE key milliseconds</a> 设置 key 的过期时间以毫秒计。</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/redis/keys-pexpireat.html">PEXPIREAT key milliseconds-timestamp</a> 设置 key 过期时间的时间戳(unix timestamp) 以毫秒计</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/redis/keys-keys.html">KEYS pattern</a> 查找所有符合给定模式( pattern)的 key 。</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/redis/keys-move.html">MOVE key db</a> 将当前数据库的 key 移动到给定的数据库 db 当中。</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/redis/keys-persist.html">PERSIST key</a> 移除 key 的过期时间，key 将持久保持。</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/redis/keys-pttl.html">PTTL key</a> 以毫秒为单位返回 key 的剩余的过期时间。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/redis/keys-ttl.html">TTL key</a> 以秒为单位，返回给定 key 的剩余生存时间(TTL, time to live)。</td></tr><tr><td align="left">13</td><td align="left"><a href="https://www.runoob.com/redis/keys-randomkey.html">RANDOMKEY</a> 从当前数据库中随机返回一个 key 。</td></tr><tr><td align="left">14</td><td align="left"><a href="https://www.runoob.com/redis/keys-rename.html">RENAME key newkey</a> 修改 key 的名称</td></tr><tr><td align="left">15</td><td align="left"><a href="https://www.runoob.com/redis/keys-renamenx.html">RENAMENX key newkey</a> 仅当 newkey 不存在时，将 key 改名为 newkey 。</td></tr><tr><td align="left">16</td><td align="left"><a href="https://www.runoob.com/redis/keys-type.html">TYPE key</a> 返回 key 所储存的值的类型。</td></tr></tbody></table><hr><h3 id="Redis字符串（String）"><a href="#Redis字符串（String）" class="headerlink" title="Redis字符串（String）"></a>Redis字符串（String）</h3><p>下面列出了常用的 redis 字符串命令：</p><table><thead><tr><th>1</th><th><a href="https://www.runoob.com/redis/strings-set.html">SET key value</a> 设置指定 key 的值</th></tr></thead><tbody><tr><td>2</td><td><a href="https://www.runoob.com/redis/strings-get.html">GET key</a> 获取指定 key 的值。</td></tr><tr><td>3</td><td><a href="https://www.runoob.com/redis/strings-getrange.html">GETRANGE key start end</a> 返回 key 中字符串值的子字符</td></tr><tr><td>4</td><td><a href="https://www.runoob.com/redis/strings-getset.html">GETSET key value</a> 将给定 key 的值设为 value ，并返回 key 的旧值(old value)。</td></tr><tr><td>5</td><td><a href="https://www.runoob.com/redis/strings-getbit.html">GETBIT key offset</a> 对 key 所储存的字符串值，获取指定偏移量上的位(bit)。</td></tr><tr><td>6</td><td>[MGET key1 <a href="https://www.runoob.com/redis/strings-mget.html">key2..]</a> 获取所有(一个或多个)给定 key 的值。</td></tr><tr><td>7</td><td><a href="https://www.runoob.com/redis/strings-setbit.html">SETBIT key offset value</a> 对 key 所储存的字符串值，设置或清除指定偏移量上的位(bit)。</td></tr><tr><td>8</td><td><a href="https://www.runoob.com/redis/strings-setex.html">SETEX key seconds value</a> 将值 value 关联到 key ，并将 key 的过期时间设为 seconds (以秒为单位)。</td></tr><tr><td>9</td><td><a href="https://www.runoob.com/redis/strings-setnx.html">SETNX key value</a> 只有在 key 不存在时设置 key 的值。</td></tr><tr><td>10</td><td><a href="https://www.runoob.com/redis/strings-setrange.html">SETRANGE key offset value</a> 用 value 参数覆写给定 key 所储存的字符串值，从偏移量 offset 开始。</td></tr><tr><td>11</td><td><a href="https://www.runoob.com/redis/strings-strlen.html">STRLEN key</a> 返回 key 所储存的字符串值的长度。</td></tr><tr><td>12</td><td>[MSET key value <a href="https://www.runoob.com/redis/strings-mset.html">key value …]</a> 同时设置一个或多个 key-value 对。</td></tr><tr><td>13</td><td>[MSETNX key value <a href="https://www.runoob.com/redis/strings-msetnx.html">key value …]</a> 同时设置一个或多个 key-value 对，当且仅当所有给定 key 都不存在。</td></tr><tr><td>14</td><td><a href="https://www.runoob.com/redis/strings-psetex.html">PSETEX key milliseconds value</a> 这个命令和 SETEX 命令相似，但它以毫秒为单位设置 key 的生存时间，而不是像 SETEX 命令那样，以秒为单位。</td></tr><tr><td>15</td><td><a href="https://www.runoob.com/redis/strings-incr.html">INCR key</a> 将 key 中储存的数字值增一。</td></tr><tr><td>16</td><td><a href="https://www.runoob.com/redis/strings-incrby.html">INCRBY key increment</a> 将 key 所储存的值加上给定的增量值（increment） 。</td></tr><tr><td>17</td><td><a href="https://www.runoob.com/redis/strings-incrbyfloat.html">INCRBYFLOAT key increment</a> 将 key 所储存的值加上给定的浮点增量值（increment） 。</td></tr><tr><td>18</td><td><a href="https://www.runoob.com/redis/strings-decr.html">DECR key</a> 将 key 中储存的数字值减一。</td></tr><tr><td>19</td><td><a href="https://www.runoob.com/redis/strings-decrby.html">DECRBY key decrement</a> key 所储存的值减去给定的减量值（decrement） 。</td></tr><tr><td>20</td><td><a href="https://www.runoob.com/redis/strings-append.html">APPEND key value</a> 如果 key 已经存在并且是一个字符串， APPEND 命令将指定的 value 追加到该 key 原来值（value）的末尾。</td></tr></tbody></table><hr><h3 id="Redis哈希（Hash）"><a href="#Redis哈希（Hash）" class="headerlink" title="Redis哈希（Hash）"></a>Redis哈希（Hash）</h3><p>下表列出了 redis hash 基本的相关命令：</p><table><thead><tr><th align="left">序号</th><th align="left">命令及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">[HDEL key field1 <a href="https://www.runoob.com/redis/hashes-hdel.html">field2]</a> 删除一个或多个哈希表字段</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/redis/hashes-hexists.html">HEXISTS key field</a> 查看哈希表 key 中，指定的字段是否存在。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/redis/hashes-hget.html">HGET key field</a> 获取存储在哈希表中指定字段的值。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/redis/hashes-hgetall.html">HGETALL key</a> 获取在哈希表中指定 key 的所有字段和值</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/redis/hashes-hincrby.html">HINCRBY key field increment</a> 为哈希表 key 中的指定字段的整数值加上增量 increment 。</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/redis/hashes-hincrbyfloat.html">HINCRBYFLOAT key field increment</a> 为哈希表 key 中的指定字段的浮点数值加上增量 increment 。</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/redis/hashes-hkeys.html">HKEYS key</a> 获取所有哈希表中的字段</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/redis/hashes-hlen.html">HLEN key</a> 获取哈希表中字段的数量</td></tr><tr><td align="left">9</td><td align="left">[HMGET key field1 <a href="https://www.runoob.com/redis/hashes-hmget.html">field2]</a> 获取所有给定字段的值</td></tr><tr><td align="left">10</td><td align="left">[HMSET key field1 value1 <a href="https://www.runoob.com/redis/hashes-hmset.html">field2 value2 ]</a> 同时将多个 field-value (域-值)对设置到哈希表 key 中。</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/redis/hashes-hset.html">HSET key field value</a> 将哈希表 key 中的字段 field 的值设为 value 。</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/redis/hashes-hsetnx.html">HSETNX key field value</a> 只有在字段 field 不存在时，设置哈希表字段的值。</td></tr><tr><td align="left">13</td><td align="left"><a href="https://www.runoob.com/redis/hashes-hvals.html">HVALS key</a> 获取哈希表中所有值</td></tr><tr><td align="left">14</td><td align="left">HSCAN key cursor [MATCH pattern] [COUNT count] 迭代哈希表中的键值对。</td></tr></tbody></table><hr><h3 id="Redis列表（List）"><a href="#Redis列表（List）" class="headerlink" title="Redis列表（List）"></a>Redis列表（List）</h3><p>下表列出了列表相关的基本命令：</p><table><thead><tr><th align="left">序号</th><th align="left">命令及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">[BLPOP key1 <a href="https://www.runoob.com/redis/lists-blpop.html">key2 ] timeout</a> 移出并获取列表的第一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td align="left">2</td><td align="left">[BRPOP key1 <a href="https://www.runoob.com/redis/lists-brpop.html">key2 ] timeout</a> 移出并获取列表的最后一个元素， 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/redis/lists-brpoplpush.html">BRPOPLPUSH source destination timeout</a> 从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它； 如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/redis/lists-lindex.html">LINDEX key index</a> 通过索引获取列表中的元素</td></tr><tr><td align="left">5</td><td align="left"><a href="https://www.runoob.com/redis/lists-linsert.html">LINSERT key BEFORE|AFTER pivot value</a> 在列表的元素前或者后插入元素</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/redis/lists-llen.html">LLEN key</a> 获取列表长度</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/redis/lists-lpop.html">LPOP key</a> 移出并获取列表的第一个元素</td></tr><tr><td align="left">8</td><td align="left">[LPUSH key value1 <a href="https://www.runoob.com/redis/lists-lpush.html">value2]</a> 将一个或多个值插入到列表头部</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/redis/lists-lpushx.html">LPUSHX key value</a> 将一个值插入到已存在的列表头部</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/redis/lists-lrange.html">LRANGE key start stop</a> 获取列表指定范围内的元素</td></tr><tr><td align="left">11</td><td align="left"><a href="https://www.runoob.com/redis/lists-lrem.html">LREM key count value</a> 移除列表元素</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/redis/lists-lset.html">LSET key index value</a> 通过索引设置列表元素的值</td></tr><tr><td align="left">13</td><td align="left"><a href="https://www.runoob.com/redis/lists-ltrim.html">LTRIM key start stop</a> 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。</td></tr><tr><td align="left">14</td><td align="left"><a href="https://www.runoob.com/redis/lists-rpop.html">RPOP key</a> 移除列表的最后一个元素，返回值为移除的元素。</td></tr><tr><td align="left">15</td><td align="left"><a href="https://www.runoob.com/redis/lists-rpoplpush.html">RPOPLPUSH source destination</a> 移除列表的最后一个元素，并将该元素添加到另一个列表并返回</td></tr><tr><td align="left">16</td><td align="left">[RPUSH key value1 <a href="https://www.runoob.com/redis/lists-rpush.html">value2]</a> 在列表中添加一个或多个值</td></tr><tr><td align="left">17</td><td align="left"><a href="https://www.runoob.com/redis/lists-rpushx.html">RPUSHX key value</a> 为已存在的列表添加值</td></tr></tbody></table><h3 id="Redis集合（Set）"><a href="#Redis集合（Set）" class="headerlink" title="Redis集合（Set）"></a>Redis集合（Set）</h3><p>下表列出了 Redis 集合基本命令：</p><table><thead><tr><th align="left">序号</th><th align="left">命令及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">[SADD key member1 <a href="https://www.runoob.com/redis/sets-sadd.html">member2]</a> 向集合添加一个或多个成员</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/redis/sets-scard.html">SCARD key</a> 获取集合的成员数</td></tr><tr><td align="left">3</td><td align="left">[SDIFF key1 <a href="https://www.runoob.com/redis/sets-sdiff.html">key2]</a> 返回给定所有集合的差集</td></tr><tr><td align="left">4</td><td align="left">[SDIFFSTORE destination key1 <a href="https://www.runoob.com/redis/sets-sdiffstore.html">key2]</a> 返回给定所有集合的差集并存储在 destination 中</td></tr><tr><td align="left">5</td><td align="left">[SINTER key1 <a href="https://www.runoob.com/redis/sets-sinter.html">key2]</a> 返回给定所有集合的交集</td></tr><tr><td align="left">6</td><td align="left">[SINTERSTORE destination key1 <a href="https://www.runoob.com/redis/sets-sinterstore.html">key2]</a> 返回给定所有集合的交集并存储在 destination 中</td></tr><tr><td align="left">7</td><td align="left"><a href="https://www.runoob.com/redis/sets-sismember.html">SISMEMBER key member</a> 判断 member 元素是否是集合 key 的成员</td></tr><tr><td align="left">8</td><td align="left"><a href="https://www.runoob.com/redis/sets-smembers.html">SMEMBERS key</a> 返回集合中的所有成员</td></tr><tr><td align="left">9</td><td align="left"><a href="https://www.runoob.com/redis/sets-smove.html">SMOVE source destination member</a> 将 member 元素从 source 集合移动到 destination 集合</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/redis/sets-spop.html">SPOP key</a> 移除并返回集合中的一个随机元素</td></tr><tr><td align="left">11</td><td align="left">[SRANDMEMBER key <a href="https://www.runoob.com/redis/sets-srandmember.html">count]</a> 返回集合中一个或多个随机数</td></tr><tr><td align="left">12</td><td align="left">[SREM key member1 <a href="https://www.runoob.com/redis/sets-srem.html">member2]</a> 移除集合中一个或多个成员</td></tr><tr><td align="left">13</td><td align="left">[SUNION key1 <a href="https://www.runoob.com/redis/sets-sunion.html">key2]</a> 返回所有给定集合的并集</td></tr><tr><td align="left">14</td><td align="left">[SUNIONSTORE destination key1 <a href="https://www.runoob.com/redis/sets-sunionstore.html">key2]</a> 所有给定集合的并集存储在 destination 集合中</td></tr><tr><td align="left">15</td><td align="left">[SSCAN key cursor <a href="https://www.runoob.com/redis/sets-sscan.html">MATCH pattern] [COUNT count]</a> 迭代集合中的元素</td></tr></tbody></table><hr><h3 id="Redis有序集合（sorted-set）"><a href="#Redis有序集合（sorted-set）" class="headerlink" title="Redis有序集合（sorted set）"></a>Redis有序集合（sorted set）</h3><p>下表列出了 redis 有序集合的基本命令:</p><table><thead><tr><th align="left">序号</th><th align="left">命令及描述</th></tr></thead><tbody><tr><td align="left">1</td><td align="left">[ZADD key score1 member1 <a href="https://www.runoob.com/redis/sorted-sets-zadd.html">score2 member2]</a> 向有序集合添加一个或多个成员，或者更新已存在成员的分数</td></tr><tr><td align="left">2</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zcard.html">ZCARD key</a> 获取有序集合的成员数</td></tr><tr><td align="left">3</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zcount.html">ZCOUNT key min max</a> 计算在有序集合中指定区间分数的成员数</td></tr><tr><td align="left">4</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zincrby.html">ZINCRBY key increment member</a> 有序集合中对指定成员的分数加上增量 increment</td></tr><tr><td align="left">5</td><td align="left">[ZINTERSTORE destination numkeys key <a href="https://www.runoob.com/redis/sorted-sets-zinterstore.html">key …]</a> 计算给定的一个或多个有序集的交集并将结果集存储在新的有序集合 key 中</td></tr><tr><td align="left">6</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zlexcount.html">ZLEXCOUNT key min max</a> 在有序集合中计算指定字典区间内成员数量</td></tr><tr><td align="left">7</td><td align="left">[ZRANGE key start stop <a href="https://www.runoob.com/redis/sorted-sets-zrange.html">WITHSCORES]</a> 通过索引区间返回有序集合指定区间内的成员</td></tr><tr><td align="left">8</td><td align="left">[ZRANGEBYLEX key min max <a href="https://www.runoob.com/redis/sorted-sets-zrangebylex.html">LIMIT offset count]</a> 通过字典区间返回有序集合的成员</td></tr><tr><td align="left">9</td><td align="left">[ZRANGEBYSCORE key min max <a href="https://www.runoob.com/redis/sorted-sets-zrangebyscore.html">WITHSCORES] [LIMIT]</a> 通过分数返回有序集合指定区间内的成员</td></tr><tr><td align="left">10</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zrank.html">ZRANK key member</a> 返回有序集合中指定成员的索引</td></tr><tr><td align="left">11</td><td align="left">[ZREM key member <a href="https://www.runoob.com/redis/sorted-sets-zrem.html">member …]</a> 移除有序集合中的一个或多个成员</td></tr><tr><td align="left">12</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zremrangebylex.html">ZREMRANGEBYLEX key min max</a> 移除有序集合中给定的字典区间的所有成员</td></tr><tr><td align="left">13</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zremrangebyrank.html">ZREMRANGEBYRANK key start stop</a> 移除有序集合中给定的排名区间的所有成员</td></tr><tr><td align="left">14</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zremrangebyscore.html">ZREMRANGEBYSCORE key min max</a> 移除有序集合中给定的分数区间的所有成员</td></tr><tr><td align="left">15</td><td align="left">[ZREVRANGE key start stop <a href="https://www.runoob.com/redis/sorted-sets-zrevrange.html">WITHSCORES]</a> 返回有序集中指定区间内的成员，通过索引，分数从高到低</td></tr><tr><td align="left">16</td><td align="left">[ZREVRANGEBYSCORE key max min <a href="https://www.runoob.com/redis/sorted-sets-zrevrangebyscore.html">WITHSCORES]</a> 返回有序集中指定分数区间内的成员，分数从高到低排序</td></tr><tr><td align="left">17</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zrevrank.html">ZREVRANK key member</a> 返回有序集合中指定成员的排名，有序集成员按分数值递减(从大到小)排序</td></tr><tr><td align="left">18</td><td align="left"><a href="https://www.runoob.com/redis/sorted-sets-zscore.html">ZSCORE key member</a> 返回有序集中，成员的分数值</td></tr><tr><td align="left">19</td><td align="left">[ZUNIONSTORE destination numkeys key <a href="https://www.runoob.com/redis/sorted-sets-zunionstore.html">key …]</a> 计算给定的一个或多个有序集的并集，并存储在新的 key 中</td></tr><tr><td align="left">20</td><td align="left">[ZSCAN key cursor <a href="https://www.runoob.com/redis/sorted-sets-zscan.html">MATCH pattern] [COUNT count]</a> 迭代有序集合中的元素（包括元素成员和元素分值）</td></tr></tbody></table><hr>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> python </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-数据类型</title>
      <link href="/2020/04/10/Redis/Redis-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
      <url>/2020/04/10/Redis/Redis-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h4 id="String（字符串）"><a href="#String（字符串）" class="headerlink" title="String（字符串）"></a>String（字符串）</h4><p>string 是 redis 最基本的类型，你可以理解成与 Memcached 一模一样的类型，一个 key 对应一个 value。</p><p>string 类型是二进制安全的。意思是 redis 的 string 可以包含任何数据。比如jpg图片或者序列化的对象。</p><p>string 类型是 Redis 最基本的数据类型，string 类型的值最大能存储 512MB。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; SET name <span class="string">&#x27;Silence&#x27;</span></span><br><span class="line">OK</span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; GET name</span><br><span class="line"><span class="string">&quot;silence&quot;</span></span><br></pre></td></tr></table></figure><p>以上实例中我们使用了 Redis 的 <strong>SET</strong> 和 <strong>GET</strong> 命令，其中，name为键，Silence为值。</p><hr><h4 id="Hash（哈希）"><a href="#Hash（哈希）" class="headerlink" title="Hash（哈希）"></a>Hash（哈希）</h4><p>Redis hash 是一个键值(key=&gt;value)对集合。</p><p>Redis hash 是一个 string 类型的 field 和 value 的映射表，hash 特别适合用于存储对象。</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; DEL name</span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HMSET name field1 <span class="string">&quot;Jone&quot;</span> field2 <span class="string">&quot;Alice&quot;</span></span><br><span class="line"><span class="string">&quot;OK&quot;</span></span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGET name field1</span><br><span class="line"><span class="string">&quot;Hello&quot;</span></span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; HGET name field2</span><br><span class="line"><span class="string">&quot;World&quot;</span></span><br></pre></td></tr></table></figure><p><strong>DEL name</strong>用于删除前面测试用过的 key，不然会报错：**(error) WRONGTYPE Operation against a key holding the wrong kind of value**</p><p>实例中我们使用了 Redis <strong>HMSET, HGET</strong> 命令，<strong>HMSET</strong> 设置了两个 <strong>field=&gt;value</strong> 对, HGET 获取对应 <strong>field</strong> 对应的 <strong>value</strong>。每个 hash 可以存储 2^32 -1 键值对（40多亿）。</p><hr><h4 id="List（列表）"><a href="#List（列表）" class="headerlink" title="List（列表）"></a>List（列表）</h4><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush sql redis</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush sql mongodb</span><br><span class="line">(integer) <span class="number">2</span></span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lpush sql rabitmq</span><br><span class="line">(integer) <span class="number">3</span></span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; lrange sql <span class="number">0</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;rabitmq&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;mongodb&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;redis&quot;</span></span><br></pre></td></tr></table></figure><p><strong>lpush</strong>是从列表的头部（左边）添加元素，<strong>rpush</strong>是从列表的尾部（右边）添加元素。</p><hr><h4 id="Set（集合）"><a href="#Set（集合）" class="headerlink" title="Set（集合）"></a>Set（集合）</h4><p>Redis 的 Set 是 string 类型的无序集合。</p><p>集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是 O(1)。</p><h6 id="sadd命令"><a href="#sadd命令" class="headerlink" title="sadd命令"></a>sadd命令</h6><p>添加一个 string 元素到 key 对应的 set 集合中，成功返回 1，如果元素已经在集合中返回 0。</p><h6 id="smembers命令"><a href="#smembers命令" class="headerlink" title="smembers命令"></a>smembers命令</h6><p>显示键所对应的全部值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd sql redis</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd sql mongodb</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd sql rabitmq</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; sadd sql rabitmq</span><br><span class="line">(integer) <span class="number">0</span>  <span class="comment">#表示添加不成功</span></span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; smembers sql</span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;redis&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;rabitmq&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;mongodb&quot;</span></span><br></pre></td></tr></table></figure><p><em><strong>注意：</strong></em>以上实例中 rabitmq 添加了两次，但根据集合内元素的唯一性，第二次插入的元素将被忽略。</p><hr><h4 id="zset（sorted-set：有序集合）"><a href="#zset（sorted-set：有序集合）" class="headerlink" title="zset（sorted set：有序集合）"></a>zset（sorted set：有序集合）</h4><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。</p><p>不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。</p><p>zset的成员是唯一的,但分数(score)却可以重复。</p><h6 id="zadd命令"><a href="#zadd命令" class="headerlink" title="zadd命令"></a>zadd命令</h6><p>添加元素到集合，元素在集合中存在则更新对应score</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zadd key score member</span><br></pre></td></tr></table></figure><h6 id="zrangebyscore（zrange）命令"><a href="#zrangebyscore（zrange）命令" class="headerlink" title="zrangebyscore（zrange）命令"></a>zrangebyscore（zrange）命令</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zrangebyscore key index_low index_heigh</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; DEL sql</span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd sql <span class="number">0</span> redis</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd sql <span class="number">0</span> mongodb</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd sql <span class="number">0</span> rabitmq</span><br><span class="line">(integer) <span class="number">1</span></span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; zadd sql <span class="number">0</span> rabitmq</span><br><span class="line">(integer) <span class="number">0</span></span><br><span class="line">redis <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">6379</span>&gt; &gt; ZRANGEBYSCORE sql <span class="number">0</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span>) <span class="string">&quot;mongodb&quot;</span></span><br><span class="line"><span class="number">2</span>) <span class="string">&quot;rabitmq&quot;</span></span><br><span class="line"><span class="number">3</span>) <span class="string">&quot;redis&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> python </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis-安装与配置</title>
      <link href="/2020/04/10/Redis/Redis-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
      <url>/2020/04/10/Redis/Redis-%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="Redis简介"><a href="#Redis简介" class="headerlink" title="Redis简介"></a>Redis简介</h3><p>Redis 是完全开源免费的，遵守BSD协议，是一个高性能的key-value数据库。</p><p>redis有以下特点：</p><ul><li>Redis支持数据的持久化，可以将内存中的数据保存在磁盘中，重启的时候可以再次加载进行使用。</li><li>Redis不仅仅支持简单的key-value类型的数据，同时还提供list，set，zset，hash等数据结构的存储。</li><li>Redis支持数据的备份，即master-slave模式的数据备份。</li><li>性能极高 – Redis能读的速度是110000次/s,写的速度是81000次/s 。</li><li>Redis还支持 publish/subscribe, 通知, key 过期等等特性。</li></ul><hr><h3 id="Redis安装"><a href="#Redis安装" class="headerlink" title="Redis安装"></a>Redis安装</h3><h5 id="Windows-系统"><a href="#Windows-系统" class="headerlink" title="Windows 系统"></a>Windows 系统</h5><p>Redis 支持 32 位和 64 位。这个需要根据你系统平台的实际情况选择，这里我选择64位zip压缩包，解压到Redis文件夹中。</p><p>打开一个 <strong>cmd</strong> 窗口 使用 cd 命令切换目录到 <strong>C:\redis</strong> 运行（如果想方便的话，可以把 redis 的路径加到系统的环境变量里，这样就省得再输路径了）：</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-server.exe  </span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/04/10/GocwkV.png" alt="GocwkV.png"></p><p>这时，redis的服务器端已经开启了。我们要使用redis的话，需要在客户端进行操作，所以再开启一个cmd，运行：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><p>现在就可以使用redis了。</p></br><h5 id="Linux-系统"><a href="#Linux-系统" class="headerlink" title="Linux 系统"></a>Linux 系统</h5><p>下载 redis ，执行命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install redis-server</span><br></pre></td></tr></table></figure><p>打开 redis 服务：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/redis-server start</span><br></pre></td></tr></table></figure><p>重启 redis 服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/redis-server restart</span><br></pre></td></tr></table></figure><p>关闭 redis 服务：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/init.d/redis-server stop</span><br></pre></td></tr></table></figure><p>打开 redis 客户端：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redis-cli</span><br></pre></td></tr></table></figure><hr><h2 id="Redis配置"><a href="#Redis配置" class="headerlink" title="Redis配置"></a>Redis配置</h2><p>Redis 的配置文件位于 Redis 安装目录下，文件名为 <strong>redis.conf</strong>(Windows 名为 redis.windows.conf)。你可以通过 <strong>CONFIG</strong> 命令查看或设置配置项。</p><p>使用 ***** 号获取所有配置项：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config get *</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/04/10/GogjbR.png" alt="GogjbR.png"></p><p>你可以通过修改 redis.conf 文件或使用 <strong>CONFIG set</strong> 命令来修改配置。</p><p>比如设置密码：</p><ol><li><p>直接打开redis.config文件将注释掉的”requirepass”恢复，并在后面添加密码，然后保存即可。</p></li><li><p>在cmd中连接到服务器，运行以下命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">config <span class="built_in">set</span> requirepass <span class="number">123456</span></span><br></pre></td></tr></table></figure></li></ol><p>一般情况下，我们不需要更改配置项。</p>]]></content>
      
      
      <categories>
          
          <category> Redis </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> python </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Cookie和Session的作用以及工作原理</title>
      <link href="/2020/04/04/Django/Cookie%E5%92%8CSession%E7%9A%84%E4%BD%9C%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/"/>
      <url>/2020/04/04/Django/Cookie%E5%92%8CSession%E7%9A%84%E4%BD%9C%E7%94%A8%E4%BB%A5%E5%8F%8A%E5%B7%A5%E4%BD%9C%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h2 id="cookie详解"><a href="#cookie详解" class="headerlink" title="cookie详解"></a>cookie详解</h2><h5 id="1、cookie简介"><a href="#1、cookie简介" class="headerlink" title="1、cookie简介"></a>1、cookie简介</h5><p>因为HTTP协议是无状态的，即服务器不知道用户上一次做了什么，这严重阻碍了交互式Web应用程序的实现。在典型的网上购物场景中，用户浏览了几个页面，买了一盒饼干和两饮料。最后结帐时，由于HTTP的无状态性，不通过额外的手段，服务器并不知道用户到底买了什么。为了做到这点，就需要使用到Cookie了。服务器可以设置或读取Cookies中包含信息，借此维护用户跟服务器会话中的状态。</p><p>Cookie（复数形态：Cookies），是指某些网站为了辨别用户身份、进行session跟踪而储存在用户本地终端上的数据（通常经过加密）。</p><p>Cookie是由服务端生成的，发送给客户端（通常是浏览器）的。Cookie总是保存在客户端中，按在客户端中的存储位置，可分为内存Cookie和硬盘Cookie：</p><p>内存Cookie由浏览器维护，保存在内存中，浏览器关闭后就消失了，其存在时间是短暂的。</p><p>硬盘Cookie保存在硬盘里，有一个过期时间，除非用户手工清理或到了过期时间，硬盘Cookie不会被删除，其存在时间是长期的。所以，按存在时间，可分为非持久Cookie和持久Cookie。</p><h5 id="2、工作原理"><a href="#2、工作原理" class="headerlink" title="2、工作原理"></a>2、工作原理</h5><p>1、创建cookie</p><p>当用户第一次浏览某个使用Cookie的网站时，该网站的服务器就进行如下工作：</p><ul><li>该用户生成一个唯一的识别码（Cookie id），创建一个Cookie对象；</li><li>默认情况下它是一个会话级别的cookie，存储在浏览器的内存中，用户退出浏览器之后被删除。如果网站希望浏览器将该Cookie存储在磁盘上，则需要设置最大时效（maxAge），并给出一个以秒为单位的时间（将最大时效设为0则是命令浏览器删除该Cookie）；</li><li>将Cookie放入到HTTP响应报头，将Cookie插入到一个 Set-Cookie HTTP请求报头中；</li><li>发送该HTTP响应报文。</li></ul><span id="more"></span><p>2、设置存储Cookie</p><p>浏览器收到该响应报文之后，根据报文头里的Set-Cookied特殊的指示，生成相应的Cookie，保存在客户端。该</p><p>Cookie里面记录着用户当前的信息。</p><p>3、发送Cookie</p><p>当用户再次访问该网站时，浏览器首先检查所有存储的Cookies，如果某个存在该网站的Cookie（即该Cookie所</p><p>声明的作用范围大于等于将要请求的资源），则把该cookie附在请求资源的HTTP请求头上发送给服务器。</p><p>4、读取Cookie</p><p>服务器接收到用户的HTTP请求报文之后，从报文头获取到该用户的Cookie，从里面找到所需要的东西。</p><h5 id="3、作用"><a href="#3、作用" class="headerlink" title="3、作用"></a>3、作用</h5><p>Cookie的根本作用就是在客户端存储用户访问网站的一些信息。典型的应用有：</p><ol><li>记住密码，下次自动登录。</li><li>购物车功能。</li><li>记录用户浏览数据，进行商品（广告）推荐。</li></ol><h5 id="4、缺陷"><a href="#4、缺陷" class="headerlink" title="4、缺陷"></a>4、缺陷</h5><ol><li>Cookie会被附加在每个HTTP请求中，所以无形中增加了流量。</li><li>由于在HTTP请求中的Cookie是明文传递的，所以安全性成问题。（除非用HTTPS）</li><li>Cookie的大小限制在4KB左右。对于复杂的存储需求来说是不够用的。</li></ol><h2 id="Session详解"><a href="#Session详解" class="headerlink" title="Session详解"></a>Session详解</h2><h5 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h5><p>Session代表服务器与浏览器的一次会话过程，这个过程是连续的，也可以时断时续的。Session是一种服务器端的机制，Session 对象用来存储特定用户会话所需的信息。</p><p>Session由服务端生成，保存在服务器的内存、缓存、硬盘或数据库中。</p><h5 id="2、工作原理-1"><a href="#2、工作原理-1" class="headerlink" title="2、工作原理"></a>2、工作原理</h5><p>1、创建session</p><p>当用户访问到一个服务器，如果服务器启用Session，服务器就要为该用户创建一个SESSION，在创建这个SESSION的时候，服务器首先检查这个用户发来的请求里是否包含了一个SESSION ID，如果包含了一个SESSION ID则说明之前该用户已经登陆过并为此用户创建过SESSION，那服务器就按照这个SESSION ID把这个SESSION在服务器的内存中查找出来（如果查找不到，就有可能为他新创建一个），如果客户端请求里不包含有SESSION ID，则为该客户端创建一个SESSION并生成一个与此SESSION相关的SESSION ID。这个SESSION ID是唯一的、不重复的、不容易找到规律的字符串，这个SESSION ID将被在本次响应中返回到客户端保存，而保存这个SESSION ID的正是COOKIE，这样在交互过程中浏览器可以自动的按照规则把这个标识发送给服务器。 </p><p>2、使用session</p><p>我们知道在IE中，我们可以在工具的Internet选项中把Cookie禁止，那么会不会出现把客户端的Cookie禁止了，那么SESSIONID就无法再用了呢？找了一些资料说明，可以有其他机制在COOKIE被禁止时仍然能够把Session id传递回服务器。</p><p>经常被使用的一种技术叫做URL重写，就是把Session id直接附加在URL路径的后面一种是作为URL路径的附加信息,表现形式为： </p><p>http://…./xxx;jSession=ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764； </p><p>另一种是作为查询字符串附加在URL后面，表现形式为： </p><p>http://…../xxx?jSession=ByOK3vjFD75aPnrF7C2HmdnV6QZcEbzWoWiBYEnLerjQ99zWpBng!-145788764 </p><p>还有一种就是表单隐藏字段。就是服务器会自动修改表单，添加一个隐藏字段，以便在表单提交时能够把Session id传递回服务器。</p><h5 id="3、作用-1"><a href="#3、作用-1" class="headerlink" title="3、作用"></a>3、作用</h5><p>Session的根本作用就是在服务端存储用户和服务器会话的一些信息。典型的应用有：</p><ol><li>判断用户是否登录。</li><li>购物车功能。</li></ol><h2 id="三、Cookie和Session的区别"><a href="#三、Cookie和Session的区别" class="headerlink" title="三、Cookie和Session的区别"></a>三、Cookie和Session的区别</h2><h5 id="1、存放位置不同"><a href="#1、存放位置不同" class="headerlink" title="1、存放位置不同"></a>1、存放位置不同</h5><p>Cookie保存在客户端，Session保存在服务端。</p><h5 id="2、存取方式不同"><a href="#2、存取方式不同" class="headerlink" title="2、存取方式不同"></a>2、存取方式不同</h5><p> Cookie中只能保管ASCII字符串，假如需求存取Unicode字符或者二进制数据，需求先进行编码。Cookie中也不能直接存取Java对象。若要存储略微复杂的信息，运用Cookie是比拟艰难的。 </p><p>而Session中能够存取任何类型的数据，包括而不限于String、Integer、List、Map等。Session中也能够直接保管Java Bean乃至任何Java类，对象等，运用起来十分便当。能够把Session看做是一个Java容器类。 </p><h5 id="3、安全性（隐私策略）的不同"><a href="#3、安全性（隐私策略）的不同" class="headerlink" title="3、安全性（隐私策略）的不同"></a>3、安全性（隐私策略）的不同</h5><p>Cookie存储在浏览器中，对客户端是可见的，客户端的一些程序可能会窥探、复制以至修正Cookie中的内容。而Session存储在服务器上，对客户端是透明的，不存在敏感信息泄露的风险。 假如选用Cookie，比较好的方法是，敏感的信息如账号密码等尽量不要写到Cookie中。最好是像Google、Baidu那样将Cookie信息加密，提交到服务器后再进行解密，保证Cookie中的信息只要本人能读得懂。而假如选择Session就省事多了，反正是放在服务器上，Session里任何隐私都能够有效的保护。</p><h5 id="4、有效期上不同"><a href="#4、有效期上不同" class="headerlink" title="4、有效期上不同"></a>4、有效期上不同</h5><p>只需要设置Cookie的过期时间属性为一个很大很大的数字，Cookie就可以在浏览器保存很长时间。 由于Session依赖于名为JSESSIONID的Cookie，而Cookie JSESSIONID的过期时间默许为–1，只需关闭了浏览器（一次会话结束），该Session就会失效。</p><h5 id="5、对服务器造成的压力不同"><a href="#5、对服务器造成的压力不同" class="headerlink" title="5、对服务器造成的压力不同"></a>5、对服务器造成的压力不同</h5><p>Session是保管在服务器端的，每个用户都会产生一个Session。假如并发访问的用户十分多，会产生十分多的Session，耗费大量的内存。而Cookie保管在客户端，不占用服务器资源。假如并发阅读的用户十分多，Cookie是很好的选择。</p><h5 id="6、跨域支持不同"><a href="#6、跨域支持不同" class="headerlink" title="6、跨域支持不同"></a>6、跨域支持不同</h5><p>Cookie支持跨域名访问，例如将domain属性设置为“.baidu.com”，则以“.baidu.com”为后缀的一切域名均能够访问该Cookie。跨域名Cookie如今被普遍用在网络中。而Session则不会支持跨域名访问。Session仅在他所在的域名内有效。 </p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 后端 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础知识汇总</title>
      <link href="/2020/03/31/python%E5%9F%BA%E7%A1%80/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
      <url>/2020/03/31/python%E5%9F%BA%E7%A1%80/python%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/</url>
      
        <content type="html"><![CDATA[<h4 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h4><h6 id="1、将列表中的字符型数字转换为数值类型"><a href="#1、将列表中的字符型数字转换为数值类型" class="headerlink" title="1、将列表中的字符型数字转换为数值类型"></a>1、将列表中的字符型数字转换为数值类型</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lis = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;12&#x27;</span>]</span><br><span class="line"></span><br><span class="line">num_lis = [<span class="built_in">int</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> lis]</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">num_lis = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">int</span>, lis))</span><br><span class="line"></span><br><span class="line">输出结果为：[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">12</span>]</span><br></pre></td></tr></table></figure><h6 id="2、将列表中的数字转换为字符（同上）"><a href="#2、将列表中的数字转换为字符（同上）" class="headerlink" title="2、将列表中的数字转换为字符（同上）"></a>2、将列表中的数字转换为字符（同上）</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">lis = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line">char_lis = [<span class="built_in">str</span>(x) <span class="keyword">for</span> x <span class="keyword">in</span> lis]</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">char_lis = <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">str</span>, lis))</span><br><span class="line"></span><br><span class="line">输出结果为：[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;12&#x27;</span>]</span><br></pre></td></tr></table></figure><h6 id="3、对列表中的元素进行排序"><a href="#3、对列表中的元素进行排序" class="headerlink" title="3、对列表中的元素进行排序"></a>3、对列表中的元素进行排序</h6><ul><li>如果列表中是数字，那么直接进行排序：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lis = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">12</span>]</span><br><span class="line"></span><br><span class="line">lis.sort()</span><br><span class="line"><span class="built_in">print</span>(lis)</span><br><span class="line"></span><br><span class="line">输出结果为：[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">12</span>]</span><br></pre></td></tr></table></figure><ul><li>如果列表中是字母型字符，那么也直接进行排序（根据ASCII）：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lis = [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>, <span class="string">&#x27;b&#x27;</span>]</span><br><span class="line"></span><br><span class="line">lis.sort()</span><br><span class="line"><span class="built_in">print</span>(lis)</span><br><span class="line"></span><br><span class="line">输出结果为：[<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;d&#x27;</span>, <span class="string">&#x27;e&#x27;</span>]</span><br></pre></td></tr></table></figure><ul><li>如果列表中是数字型字符，想要使其中的数字升序或者降序排列，需要对其进行一些操作：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#若直接进行排序</span></span><br><span class="line">lis = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;12&#x27;</span>]</span><br><span class="line"></span><br><span class="line">lis.sort()</span><br><span class="line"><span class="built_in">print</span>(lis)</span><br><span class="line"></span><br><span class="line">输出结果为：[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;8&#x27;</span>]</span><br></pre></td></tr></table></figure><blockquote><p>注意：上述排序是按元素的第一个字符进行排序的。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">lis = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;12&#x27;</span>]</span><br><span class="line"></span><br><span class="line">lis.sort(key=<span class="keyword">lambda</span> x:<span class="built_in">int</span>(x))</span><br><span class="line"><span class="built_in">print</span>(lis)</span><br><span class="line"></span><br><span class="line">输出结果为：[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;12&#x27;</span>]</span><br></pre></td></tr></table></figure><span id="more"></span><h6 id="4、Python-输出时去掉列表或者元组外面的方括号与圆括号"><a href="#4、Python-输出时去掉列表或者元组外面的方括号与圆括号" class="headerlink" title="4、Python 输出时去掉列表或者元组外面的方括号与圆括号"></a>4、Python 输出时去掉列表或者元组外面的方括号与圆括号</h6><p>可以是使用**join()**函数来实现：</p><p>‘x’.join(y)，x可以是任意分割字符，y是列表或元组。以列表为例，可以将列表中的每一个元素两头的引号给去</p><p>除，同时，元素与元素之间以字符‘x’作为分割标志，并且列表最外面的中括号也能去除掉。元组同理。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lis = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;12&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(lis))</span><br><span class="line"></span><br><span class="line">输出结果为：<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">8</span> <span class="number">6</span> <span class="number">12</span> </span><br></pre></td></tr></table></figure><blockquote><p>注意：join()函数只能用于字符，不能用于数值类型。</p></blockquote><h6 id="5、列表的去重和排序"><a href="#5、列表的去重和排序" class="headerlink" title="5、列表的去重和排序"></a>5、列表的去重和排序</h6><p>先将一个列表转换为set集合， 再转换为list列表，即可完成去重。</p><ul><li>若列表元素为数字，则既可以去重也可以排序：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lis = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">6</span>, <span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">set</span>(lis)))</span><br><span class="line"></span><br><span class="line">输出结果为：[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">12</span>]</span><br></pre></td></tr></table></figure><ul><li>若列表元素为字符，则只可以去重不可以排序，顺序为随机排列：</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">lis = [<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;8&#x27;</span>, <span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27;3&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">list</span>(<span class="built_in">set</span>(lis)))</span><br><span class="line"></span><br><span class="line">输出结果为：[<span class="string">&#x27;6&#x27;</span>, <span class="string">&#x27;3&#x27;</span>, <span class="string">&#x27;12&#x27;</span>, <span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;8&#x27;</span>]</span><br></pre></td></tr></table></figure><h4 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h4><ul><li>python字典以键值对的形式存储，且键一般是唯一的，如果重复，则最后的一个键值对会替换前面的，值不需要唯一。</li><li>值可以取任何数据类型，但键必须是不可变的（字符串，数字，元组）。</li></ul><h6 id="删除字典元素"><a href="#删除字典元素" class="headerlink" title="删除字典元素"></a>删除字典元素</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">dict</span> = &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Zara&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">del</span> <span class="built_in">dict</span>[<span class="string">&#x27;Name&#x27;</span>]  <span class="comment"># 删除键是&#x27;Name&#x27;的条目</span></span><br><span class="line"><span class="built_in">dict</span>.clear()      <span class="comment"># 清空字典所有条目</span></span><br><span class="line"><span class="keyword">del</span> <span class="built_in">dict</span>          <span class="comment"># 删除字典</span></span><br></pre></td></tr></table></figure><h6 id="遍历字典元素"><a href="#遍历字典元素" class="headerlink" title="遍历字典元素"></a>遍历字典元素</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">dic=  &#123;<span class="string">&#x27;Name&#x27;</span>: <span class="string">&#x27;Zara&#x27;</span>, <span class="string">&#x27;Age&#x27;</span>: <span class="number">7</span>, <span class="string">&#x27;Class&#x27;</span>: <span class="string">&#x27;First&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历键</span></span><br><span class="line"><span class="keyword">for</span> key <span class="keyword">in</span> dic.keys():</span><br><span class="line">    <span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历值</span></span><br><span class="line"><span class="keyword">for</span> val <span class="keyword">in</span> dic.values():</span><br><span class="line">    <span class="built_in">print</span>(val)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 遍历键和值</span></span><br><span class="line"><span class="keyword">for</span> key, val <span class="keyword">in</span> dic.items():</span><br><span class="line">    <span class="built_in">print</span>(key, val)</span><br></pre></td></tr></table></figure><h6 id="其他方法"><a href="#其他方法" class="headerlink" title="其他方法"></a>其他方法</h6><table><thead><tr><th>序号</th><th align="left">函数及描述</th></tr></thead><tbody><tr><td>1</td><td align="left"><em>dict.has_key(key)</em>     如果键在字典dict里返回true，否则返回false</td></tr><tr><td>2</td><td align="left"><em>dict.update(dict2)</em>   把字典dict2的键/值对更新到dict里</td></tr><tr><td>3</td><td align="left"><em>dict.get(key)</em>             返回指定键的值，如果值不在字典中返回default值</td></tr><tr><td>4</td><td align="left"><em>dict.update(dict2)</em>   把字典dict2的键/值对更新到dict里</td></tr><tr><td>5</td><td align="left"><em>pop(key,default)</em>      删除字典给定键 key 所对应的值，返回值为被删除的值。key值必须给出。 否则，返回default值。</td></tr></tbody></table><h4 id="数值处理"><a href="#数值处理" class="headerlink" title="数值处理"></a>数值处理</h4><h6 id="1、python向上取整，向下取整，四舍五入"><a href="#1、python向上取整，向下取整，四舍五入" class="headerlink" title="1、python向上取整，向下取整，四舍五入"></a>1、python向上取整，向下取整，四舍五入</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> math</span><br><span class="line"> </span><br><span class="line">f = <span class="number">5.49</span></span><br><span class="line"><span class="built_in">print</span>(math.ceil(f))         <span class="comment">#向上取整 6</span></span><br><span class="line"><span class="built_in">print</span>(math.floor(f))        <span class="comment">#向下取整 5</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">round</span>(f))             <span class="comment">#四舍五入 5</span></span><br></pre></td></tr></table></figure><h6 id="2、输出规定数位的小数"><a href="#2、输出规定数位的小数" class="headerlink" title="2、输出规定数位的小数"></a>2、输出规定数位的小数</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#结果保留两位小数</span><br><span class="line"></span><br><span class="line">x = 2.3333333</span><br><span class="line">print(&quot;%.2f&quot; %x)</span><br><span class="line"></span><br><span class="line">输出结果为：2.33</span><br></pre></td></tr></table></figure><h6 id="3、输出多个相同的值"><a href="#3、输出多个相同的值" class="headerlink" title="3、输出多个相同的值"></a>3、输出多个相同的值</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#输出3个python</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;python&quot;</span>*<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">输出结果为：pythonpythonpython</span><br></pre></td></tr></table></figure><h6 id="4、函数有任意多个参数"><a href="#4、函数有任意多个参数" class="headerlink" title="4、函数有任意多个参数"></a>4、函数有任意多个参数</h6><p>将函数的参数定义为*<em><strong>n</strong></em>，n可以看作一个列表，接收实际参数。</p><p>例如定义一个函数multi()可以传入任意个参数，返回这些参数的乘积：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">multi</span>(<span class="params">*n</span>):</span></span><br><span class="line">multi = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> n:</span><br><span class="line">multi *= x</span><br><span class="line"><span class="keyword">return</span> multi</span><br><span class="line"><span class="built_in">print</span>(multi(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line">输出结果为：<span class="number">6</span></span><br></pre></td></tr></table></figure><p>将函数的参数定义为**<em><strong>n</strong></em>，n可以看作一个字典，接收实际参数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dictionary</span>(<span class="params">**n</span>):</span></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line">dictionary(first=<span class="number">1</span>, second=<span class="number">2</span>, third=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">输出结果为：&#123;<span class="string">&#x27;first&#x27;</span>: <span class="number">1</span>, <span class="string">&#x27;second&#x27;</span>: <span class="number">2</span>, <span class="string">&#x27;third&#x27;</span>: <span class="number">3</span>&#125;</span><br></pre></td></tr></table></figure><h4 id="循环输入"><a href="#循环输入" class="headerlink" title="循环输入"></a>循环输入</h4><p>怎么样能使while循环和input输入结合起来形成循环输入呢？python不能像C语言那样直接实现</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;a,&amp;b) != EOF)</span><br></pre></td></tr></table></figure><p>在python中，无法通过input()的返回值判断是否有EOF。python是通过抓取异常来知EOF的，于是，通过try except的方法，当出现except的时候，就是到了EOF，这时退出循环。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span> :</span><br><span class="line"><span class="keyword">try</span> :</span><br><span class="line">x = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">y = <span class="built_in">int</span>(<span class="built_in">input</span>())</span><br><span class="line">                <span class="comment"># 一行一个整数</span></span><br><span class="line"><span class="built_in">print</span>(x+y)</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> :</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span> :</span><br><span class="line"><span class="keyword">try</span> :</span><br><span class="line">s = <span class="built_in">input</span>()</span><br><span class="line">l = s.split()</span><br><span class="line"><span class="comment"># 一行两个整数，中间用空格隔开</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">int</span>(l[<span class="number">0</span>])+<span class="built_in">int</span>(l[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">except</span> :</span><br><span class="line"><span class="keyword">break</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：引起异常的并不是input()本身，而是紧跟在input()函数后调用输入值的语句：print(x+y)和print(int(l[0])+int(l[1]))，因为当不从键盘上输入值即input()函数返回None时，后面的语句调用输入值时发生错误从而引发异常。若将print(x+y)和print(int(l[0])+int(l[1]))语句删去，将形成无限循环输入。</p></blockquote><p>在此附上一个例子：</p><p>进行两个集合的合并，并且没有重复元素且升序排列。</p><p>输入：若干组，每组包括三行，第一行输入两个数字，分别为两个集合的元素个数；第二行和第三行分别为两个集合。</p><p>输出：若干组，每组一行，为合并后的集合。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">result = []</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        x = <span class="built_in">input</span>().split()</span><br><span class="line">        x[<span class="number">0</span>]  <span class="comment">#用于引发异常</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        set1 = <span class="built_in">input</span>().split()</span><br><span class="line">        set2 = <span class="built_in">input</span>().split()</span><br><span class="line">        result.append(<span class="built_in">list</span>(<span class="built_in">set</span>(set1+set2)))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(result)):</span><br><span class="line">    result[i].sort(key=<span class="keyword">lambda</span> d:<span class="built_in">int</span>(d))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27; &#x27;</span>.join(result[i]))</span><br></pre></td></tr></table></figure><p>结果为：</p><p><a href="https://imgchr.com/i/GQu974"><img src="https://s1.ax1x.com/2020/03/31/GQu974.png" alt="GQu974.png"></a></p><h4 id="时间格式转换"><a href="#时间格式转换" class="headerlink" title="时间格式转换"></a>时间格式转换</h4><p>导入包：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">from time import datetime</span><br></pre></td></tr></table></figure><h6 id="datetime格式转换为字符串："><a href="#datetime格式转换为字符串：" class="headerlink" title="datetime格式转换为字符串："></a>datetime格式转换为字符串：</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">time = datetime.now()</span><br><span class="line">time_str = datetime.strftime(time, <span class="string">&quot;%Y-%m-%d %H:%M:%S&quot;</span>)</span><br></pre></td></tr></table></figure><h6 id="字符串转换为datetime格式"><a href="#字符串转换为datetime格式" class="headerlink" title="字符串转换为datetime格式"></a>字符串转换为datetime格式</h6><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&quot;2020-8-1&quot;</span></span><br><span class="line">time = datetime.strptime(<span class="built_in">str</span>, <span class="string">&quot;%Y-%m-%d&quot;</span>)</span><br></pre></td></tr></table></figure><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><h5 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><h6 id="re-match函数"><a href="#re-match函数" class="headerlink" title="re.match函数"></a>re.match函数</h6><p><code>re.match </code>尝试从字符串的<strong>起始位置</strong>匹配一个模式，如果不是起始位置匹配成功的话，match()就返回none。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">re.match(pattern, string, flags=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pattern：正则表达式</span></span><br><span class="line"><span class="comment"># string：要匹配的字符串</span></span><br><span class="line"><span class="comment"># flags：标志位，用于控制正则表达式的匹配方式，如：是否区分大小写，多行匹配等等</span></span><br></pre></td></tr></table></figure><p>该函数返回一个<code>match</code>对象（如果匹配失败，返回None），如果想要得到匹配到的字符串。可以使用<code>group()</code>函数或<code>groups()</code>函数。</p><table><thead><tr><th align="left">匹配对象方法</th><th align="left">描述</th></tr></thead><tbody><tr><td align="left">group(num=0)</td><td align="left">匹配的整个表达式的字符串，group() 可以一次输入多个组号，在这种情况下它将返回一个包含那些组所对应值的元组。</td></tr><tr><td align="left">groups()</td><td align="left">返回一个包含所有小组字符串的元组，从 1 到 所含的小组号。</td></tr></tbody></table><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pattern = <span class="string">&quot;\w+123&quot;</span></span><br><span class="line">string = <span class="string">&quot;skdgh123&quot;</span></span><br><span class="line"><span class="built_in">print</span>(re.match(pattern, string).group())</span><br><span class="line"></span><br><span class="line">输出为：skdgh123</span><br></pre></td></tr></table></figure><h6 id="re-search函数"><a href="#re-search函数" class="headerlink" title="re.search函数"></a>re.search函数</h6><p><code>re.search </code>扫描<strong>整个字符串</strong>并返回第一个成功的匹配。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">re.match(pattern, string, flags=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 参数意义同上</span></span><br></pre></td></tr></table></figure><h6 id="re-sub函数"><a href="#re-sub函数" class="headerlink" title="re.sub函数"></a>re.sub函数</h6><p>Python 的 re 模块提供了<code>re.sub</code>用于替换字符串中的匹配项。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">re.sub(pattern, repl, string, count=<span class="number">0</span>, flags=<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pattern : 正则中的模式字符串。</span></span><br><span class="line"><span class="comment"># vrepl : 要替换成的字符串，也可为一个函数。</span></span><br><span class="line"><span class="comment"># string : 要被查找替换的原始字符串。</span></span><br><span class="line"><span class="comment"># count : 模式匹配后替换的最大次数，默认 0 表示替换所有的匹配。</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;hello world!&quot;</span></span><br><span class="line">result = re.sub(<span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;gays&#x27;</span>, string)</span><br><span class="line"><span class="built_in">print</span>(result)</span><br><span class="line"></span><br><span class="line">输出为：hello gays!</span><br></pre></td></tr></table></figure><h6 id="re-compile函数"><a href="#re-compile函数" class="headerlink" title="re.compile函数"></a>re.compile函数</h6><p>compile 函数用于编译正则表达式，生成一个正则表达式（ Pattern ）对象，供 match() 和 search() 这两个函数使用。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">re.<span class="built_in">compile</span>(pattern, flags)</span><br><span class="line"></span><br><span class="line"><span class="comment"># pattern : 一个字符串形式的正则表达式</span></span><br><span class="line"><span class="comment"># flags : 可选，表示匹配模式，比如忽略大小写，多行模式等，用“|”分隔，具体参数为：</span></span><br><span class="line">re.I 忽略大小写</span><br><span class="line">re.L 表示特殊字符集 \w, \W, \b, \B, \s, \S 依赖于当前环境</span><br><span class="line">re.M 多行模式</span><br><span class="line">re.S 即为 . 并且包括换行符在内的任意字符（. 不包括换行符）</span><br><span class="line">re.U 表示特殊字符集 \w, \W, \b, \B, \d, \D, \s, \S 依赖于 Unicode 字符属性数据库</span><br><span class="line">re.X 为了增加可读性，忽略空格和 <span class="comment"># 后面的注释</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">string = <span class="string">&quot;hello world!&quot;</span></span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;hello&#x27;</span>)</span><br><span class="line">result = pattern.match(string)</span><br><span class="line"><span class="built_in">print</span>(result.group())</span><br><span class="line"></span><br><span class="line">输出为：hello</span><br></pre></td></tr></table></figure><h6 id="findall函数"><a href="#findall函数" class="headerlink" title="findall函数"></a>findall函数</h6><p>在字符串中找到正则表达式所匹配的所有子串，并返回一个列表，如果没有找到匹配的，则返回空列表。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">findall(string, pos, endpos)</span><br><span class="line"></span><br><span class="line"><span class="comment"># string : 待匹配的字符串。</span></span><br><span class="line"><span class="comment"># pos : 可选参数，指定字符串的起始位置，默认为 0。</span></span><br><span class="line"><span class="comment"># endpos : 可选参数，指定字符串的结束位置，默认为字符串的长度。</span></span><br></pre></td></tr></table></figure><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"> </span><br><span class="line">pattern = re.<span class="built_in">compile</span>(<span class="string">r&#x27;\d+&#x27;</span>)   <span class="comment"># 查找数字</span></span><br><span class="line">result1 = pattern.findall(<span class="string">&#x27;runoob 123 google 456&#x27;</span>)</span><br><span class="line">result2 = pattern.findall(<span class="string">&#x27;run88oob123google456&#x27;</span>, <span class="number">0</span>, <span class="number">10</span>)</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(result1)</span><br><span class="line"><span class="built_in">print</span>(result2)</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">&#x27;123&#x27;</span>, <span class="string">&#x27;456&#x27;</span>]</span><br><span class="line">[<span class="string">&#x27;88&#x27;</span>, <span class="string">&#x27;12&#x27;</span>]</span><br></pre></td></tr></table></figure><h6 id="正则表达式对象"><a href="#正则表达式对象" class="headerlink" title="正则表达式对象"></a>正则表达式对象</h6><p><strong>re.RegexObject</strong></p><p><code>re.compile() </code>返回 RegexObject 对象。</p><p><strong>re.MatchObject</strong></p><ul><li><code>group() </code>返回被 RE 匹配的字符串</li><li><code>start() </code>返回匹配开始的位置</li><li><code>end() </code>返回匹配结束的位置</li><li><code>span() </code>返回一个元组包含匹配 (开始,结束) 的位置</li></ul><h4 id="replace替换字符串"><a href="#replace替换字符串" class="headerlink" title="replace替换字符串"></a>replace替换字符串</h4><p>Python replace() 方法把字符串中的 old（旧字符串） 替换成 new(新字符串)，如果指定第三个参数max，则替换不超过 max 次。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">str</span>.replace(old, new, <span class="built_in">max</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># old -- 将被替换的子字符串。</span></span><br><span class="line"><span class="comment"># new -- 新字符串，用于替换old子字符串。</span></span><br><span class="line"><span class="comment"># max -- 可选字符串, 替换不超过 max 次</span></span><br></pre></td></tr></table></figure><p><strong>返回值：</strong>返回字符串中的 old（旧字符串） 替换成 new(新字符串)后生成的新字符串。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string = <span class="string">&quot;hello world!&quot;</span></span><br><span class="line"><span class="built_in">print</span>(string.replace(<span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;gays&#x27;</span>))</span><br><span class="line"></span><br><span class="line">输出为：hello gays!</span><br></pre></td></tr></table></figure><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><p>在python中，假设x是一个全局变量，那么在一个函数内（该函数未定义局部变量x）使用类似<code>x += 1</code>、<code>x = max(x, 0)</code>等语句时，会报错：<em><strong>UnboundLocalError: local variable ‘x’ referenced before assignment</strong></em></p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">    x += <span class="number">1</span></span><br><span class="line">f()</span><br></pre></td></tr></table></figure><p><strong>解决方法</strong>：在函数中使用该全局变量前用<code>globle</code>进行声明即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">x = <span class="number">0</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span>():</span></span><br><span class="line">  <span class="keyword">global</span> x</span><br><span class="line">  x += <span class="number">1</span></span><br><span class="line">  <span class="built_in">print</span>(x)</span><br><span class="line">f()</span><br></pre></td></tr></table></figure><p><em><strong>未完待续······</strong></em></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Opencv(三)-视频获取</title>
      <link href="/2019/05/13/Opencv/Opencv%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E8%A7%86%E9%A2%91%E8%8E%B7%E5%8F%96/"/>
      <url>/2019/05/13/Opencv/Opencv%EF%BC%88%E4%B8%89%EF%BC%89%E2%80%94%E2%80%94%E8%A7%86%E9%A2%91%E8%8E%B7%E5%8F%96/</url>
      
        <content type="html"><![CDATA[<h2 id="获取视频"><a href="#获取视频" class="headerlink" title="获取视频"></a>获取视频</h2><h4 id="1、cv2-VideoCapture"><a href="#1、cv2-VideoCapture" class="headerlink" title="1、cv2.VideoCapture()"></a>1、cv2.VideoCapture()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cap = cv2.VideoCapture(camera_idx)</span><br></pre></td></tr></table></figure><p>用于获取视频。其中，camera_idx是o，表示打开笔记本的内置摄像头，参数是视频文件路径则打开视频。</p><h4 id="2、cv2-namedWindow"><a href="#2、cv2-namedWindow" class="headerlink" title="2、cv2.namedWindow()"></a>2、cv2.namedWindow()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv2.namedWindow(window_name)</span><br></pre></td></tr></table></figure><p>为窗口命名。参数为窗口标题，字符串。</p><h4 id="3、cap-read"><a href="#3、cap-read" class="headerlink" title="3、cap.read()"></a>3、cap.read()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ret, frame = cap.read()</span><br></pre></td></tr></table></figure><p>读取一帧的数据。第一个返回值是布尔类型，判断是否读取到图片，第二个返回值是读取到的图片。</p><h4 id="4、cv2-imshow"><a href="#4、cv2-imshow" class="headerlink" title="4、cv2.imshow()"></a>4、cv2.imshow()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv2.imshow(window_name, frame)</span><br></pre></td></tr></table></figure><p>显示每一帧图片。第一个参数是窗口名称，第二个参数是图片对象。</p><h4 id="5、cv2-waitKey"><a href="#5、cv2-waitKey" class="headerlink" title="5、cv2.waitKey()"></a>5、cv2.waitKey()</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv2.waitKey(parameter)</span><br></pre></td></tr></table></figure><p>parameter = NONE &amp; 0表示一直显示，除此之外表示显示的毫秒数。</p><ul><li><p>参数为0，表示图片显示着，直到你按下任意一个键，才被关掉。</p></li><li><p>```python<br>if cv2.waitKey(1) &amp; 0xFF == ord(‘q’):</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">  运行代码，会显示一张图片，当你按下`q`键时，显示图片的窗口被关掉。</span><br><span class="line"></span><br><span class="line">&lt;!--more--&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**完整代码如下：**</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line">import cv2</span><br><span class="line"></span><br><span class="line">def CatchUsbVideo(window_name, camera_idx):</span><br><span class="line">    #cv2.namedWindow(&#x27;窗口标题&#x27;,默认参数)</span><br><span class="line">    cv2.namedWindow(window_name)</span><br><span class="line">    </span><br><span class="line">    #视频来源，可以来自一段已存好的视频，也可以直接来自USB摄像头</span><br><span class="line">    #camera_idx是0，表示打开笔记本的内置摄像头，参数是视频文件路径则打开视频</span><br><span class="line">    cap = cv2.VideoCapture(camera_idx)        </span><br><span class="line">        </span><br><span class="line">    while cap.isOpened():</span><br><span class="line">        ok, frame = cap.read() #读取一帧数据</span><br><span class="line">        if not ok:            </span><br><span class="line">            break                    </span><br><span class="line">                        </span><br><span class="line">        #显示图像并等待10毫秒按键输入，输入‘q’退出程序</span><br><span class="line">        cv2.imshow(window_name, frame)</span><br><span class="line">        c = cv2.waitKey(10)</span><br><span class="line">        if c &amp; 0xFF == ord(&#x27;q&#x27;):</span><br><span class="line">            break        </span><br><span class="line">    </span><br><span class="line">    #释放摄像头并销毁所有窗口</span><br><span class="line">    cap.release()</span><br><span class="line">    cv2.destroyAllWindows() </span><br><span class="line">    </span><br><span class="line">if __name__ == &#x27;__main__&#x27;:</span><br><span class="line">    CatchUsbVideo(&quot;截取视频流&quot;, 0)</span><br></pre></td></tr></table></figure></li></ul><h2 id="保存-读取视频"><a href="#保存-读取视频" class="headerlink" title="保存/读取视频"></a>保存/读取视频</h2><h5 id="1、存取图片"><a href="#1、存取图片" class="headerlink" title="1、存取图片"></a>1、存取图片</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv2.imwrite(path， frame)</span><br></pre></td></tr></table></figure><p>第一个参数是保存路径，第二个参数是要保存的图片的对象。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cv2.imread(path)</span><br></pre></td></tr></table></figure><p>参数为图片路径。</p><blockquote><p>注意：读取出来的图片的像素可能与原图片的像素不同，这是图片格式不同导致的。.jpeg后缀的图像，其由于jpeg图像本身的编解码问题，写入时的编码与读取时的解码所得不能完美互为逆操作，从而导致的每次写入之后，读取的值都不同。而.png格式就不会出现问题。</p></blockquote><h5 id="2、存取视频"><a href="#2、存取视频" class="headerlink" title="2、存取视频"></a><strong>2、存取视频</strong></h5><p>保存视频或摄像头视频到本地磁盘，需要使用Opencv中的VideoWriter<u>类</u>，以及其中的write()函数。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">VideoWriter(const string&amp; filename, <span class="built_in">int</span> fourcc, double fps,Size frameSize, <span class="built_in">bool</span> isColor=true);</span><br></pre></td></tr></table></figure><ul><li>第一个参数为保存的路径名，并且同时为视频命名。</li><li>第二个参数为编码器。也可以用cv2.VideoWriter_fourcc()代替，常用的有 “DIVX”、”MJPG”、“XVID”、“X264”。</li><li>fps为被创建视频的帧率。</li><li>frameSize是视频的宽和高，是一个二元组。</li><li>最后一个是参数默认彩色保存。</li></ul><p><strong>示例如下：</strong></p><p>首先用电脑上的摄像头拍摄一段视频保存到同级目录下，然后再将其读出。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">filename = <span class="string">&quot;1.avi&quot;</span></span><br><span class="line">fourcc = cv2.VideoWriter_fourcc(<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;G&#x27;</span>)</span><br><span class="line">fps = <span class="number">20</span></span><br><span class="line">frameSize = (<span class="number">640</span>,<span class="number">480</span>)</span><br><span class="line">out = cv2.VideoWriter(filename,fourcc,fps,frameSize)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">ret, frame = cap.read()</span><br><span class="line"><span class="keyword">if</span> ret:</span><br><span class="line">out.write(frame)</span><br><span class="line">cv2.imshow(<span class="string">&quot;video&quot;</span>, frame)</span><br><span class="line"><span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(<span class="string">&quot;1.avi&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">ret, frame = cap.read()</span><br><span class="line"><span class="keyword">if</span> ret:</span><br><span class="line">cv2.imshow(<span class="string">&quot;video&quot;</span>, frame)</span><br><span class="line"><span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><h2 id="opencv获取RTSP流媒体视频"><a href="#opencv获取RTSP流媒体视频" class="headerlink" title="opencv获取RTSP流媒体视频"></a>opencv获取RTSP流媒体视频</h2><h4 id="1、rtsp简介"><a href="#1、rtsp简介" class="headerlink" title="1、rtsp简介"></a>1、rtsp简介</h4><blockquote><p>RTSP（Real Time Streaming Protocol），RFC2326，实时流<a href="https://baike.baidu.com/item/%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE">传输协议</a>，是<a href="https://baike.baidu.com/item/TCP%2FIP%E5%8D%8F%E8%AE%AE">TCP/IP协议</a>体系中的一个<a href="https://baike.baidu.com/item/%E5%BA%94%E7%94%A8%E5%B1%82">应用层</a>协议，RTSP在<a href="https://baike.baidu.com/item/%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84/8174145">体系结构</a>上位于RTP和RTCP之上，它使用TCP或UDP完成数据传输。RTSP是用来控制声音或影像的多媒体串流协议，并允许同时多个串流需求控制，传输时所用的网络通讯协定并不在其定义的范围内，服务器端可以自行选择使用TCP或UDP来传送串流内容。</p></blockquote><h4 id="2、rtsp的url格式"><a href="#2、rtsp的url格式" class="headerlink" title="2、rtsp的url格式"></a>2、rtsp的url格式</h4><p>“rtsp”和“rtspu”表示要通过 RTSP 协议来定位网络资源。 RTSP URL 的语法和语义如下所示：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;rtsp:&quot; | &quot;rtspu:&quot; ) &quot;//&quot; host [ &quot;:&quot; port ] [ abs_path]</span><br></pre></td></tr></table></figure><p>这里我们以萤石摄像头为例：</p><p>萤石摄像头的rtsp协议的url格式为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rtsp://[username]:[password]@[ip]:[port]/[codec]/[channel]/[subtype]/av_stream</span><br></pre></td></tr></table></figure><ul><li>username: 用户名。例如admin。</li><li>password: 密码。例如12345。一般为摄像头的验证码。</li><li>ip: 为设备IP。例如 192.0.0.64。</li><li>port: 端口号默认为554，若为默认可不填写。</li><li>codec：有h264、MPEG-4、mpeg4这几种。</li><li>channel: 通道号，起始为1。例如通道1，则为ch1。</li><li>subtype: 码流类型，主码流为main，辅码流为sub。</li></ul><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;rtsp://admin:UJMIPO@192.168.137.250:554/h264/ch1/main/av_stream&quot;</span></span><br><span class="line">cap = cv2.VideoCapture(url)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">ret, frame = cap.read()</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">cv2.imshow(<span class="string">&quot;video&quot;</span>, frame)</span><br><span class="line"><span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><em><strong>知识拓展：</strong></em></p><p>视频文件格式，即视频文件的后缀，如mp4，avi等等，主要为帮助系统的程序知道应该使用何种程序打开该文件；这就是说如果你把一个视频格式的文件后缀从avi改成mp4，并不意味该文件就变成了mp4格式。<br>视频封装格式则是一种视频封装容器。什么意思呢？在视频文件中同时含有视频部分、音频部分等等；那么视频封装容器则一种可以把多种视频数据放在一起的一个大盒子。这个盒子就是我们常说的视频格式，例如AVI（后缀.avi）格式、MPEG（后缀.mpg .mpeg .mpe .dat .vob .asf .3gp .mp4）格式、REAL Video(后缀.rmvb)格式、Flash Video(后缀.flv)格式等等。 </p><p>视频文件格式，即视频文件的后缀，如mp4，avi等等，主要为帮助系统的程序知道应该使用何种程序打开该文件；这就是说如果你把一个视频格式的文件后缀从avi改成mp4，并不意味该文件就变成了mp4格式。<br>视频封装格式则是一种视频封装容器。什么意思呢？在视频文件中同时含有视频部分、音频部分等等；那么视频封装容器则一种可以把多种视频数据放在一起的一个大盒子。这个盒子就是我们常说的视频格式，例如AVI（后缀.avi）格式、MPEG（后缀.mpg .mpeg .mpe .dat .vob .asf .3gp .mp4）格式、REAL Video(后缀.rmvb)格式、Flash Video(后缀.flv)格式等等。 </p><p>那么视频编码器又是什么呢？视频编码器是指能够对数字视频进行压缩存储和解压缩的程序或设备。目前场景的编码器有H.26X系列(目前最流行的是H.264和H.265)和MPEG系列(目前最流行的是MPEG-4第十部分，即H.264)。上文代码中提到的XVID（旧称为DIVX）是一个开放源代码的MPEG-4视频编解码器。</p>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Opencv(二)-图像处理</title>
      <link href="/2019/05/08/Opencv/Opencv%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2019/05/08/Opencv/Opencv%EF%BC%88%E4%BA%8C%EF%BC%89%E2%80%94%E2%80%94%E5%9B%BE%E5%83%8F%E5%A4%84%E7%90%86%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="颜色空间转换"><a href="#颜色空间转换" class="headerlink" title="颜色空间转换"></a>颜色空间转换</h2><p><em><strong>目标：</strong></em></p><ul><li><p> 你将学习如何对图像进行颜色空间转换，比如从 BGR 到灰度图，或者从BGR 到 HSV 等。</p></li><li><p>我没还要创建一个程序用来从一幅图像中获取某个特定颜色的物体。</p></li><li><p>我们将要学习的函数有：cv2.cvtColor()，cv2.inRange() 等。</p></li></ul><h4 id="1、转换颜色空间"><a href="#1、转换颜色空间" class="headerlink" title="1、转换颜色空间"></a>1、转换颜色空间</h4><p>　   在 OpenCV 中有超过 150 中进行颜色空间转换的方法。但是你以后就会、发现我们经常用到的也就两种：BGR↔Gray 和 BGR↔HSV。</p><p>我们要用到的函数是：cv2.cvtColor(input_image ，flag)，其中 flag就是转换类型。<br>对于 BGR↔Gray 的转换，我们要使用的 flag 就是 cv2.COLOR_BGR2GRAY。<br>同样对于 BGR↔HSV 的转换，我们用的 flag 就是 cv2.COLOR_BGR2HSV。<br>你还可以通过下面的命令得到所有可用的 flag。</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">flags=[i <span class="keyword">for</span> <span class="keyword">in</span> <span class="built_in">dir</span>(cv2) <span class="keyword">if</span> i startswith(<span class="string">&#x27;COLOR_&#x27;</span>)]</span><br><span class="line"><span class="built_in">print</span> flags</span><br></pre></td></tr></table></figure><p><em><strong>注意：</strong></em>在 OpenCV 的 HSV 格式中，H（色彩/色度）的取值范围是 [0，179]，S（饱和度）的取值范围 [0，255]，V（亮度）的取值范围 [0，255]。</p><h4 id="2、物体跟踪"><a href="#2、物体跟踪" class="headerlink" title="2、物体跟踪"></a>2、物体跟踪</h4><p>现在我们知道怎样将一幅图像从 BGR 转换到 HSV 了，我们可以利用这一点来提取带有某个特定颜色的物体。在 HSV 颜色空间中要比在 BGR 空间中更容易表示一个特定颜色。在我们的程序中，我们要提取的是一个蓝色的物体。下面就是就是我们要做的几步：</p><ul><li>从视频中获取每一帧图像</li><li>将图像转换到HSV空间</li><li>设置HSV阈值到蓝色范围</li><li>获取蓝色物体</li></ul><p>代码如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">cap = cv2.VideoCapture(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#蓝色的BGR阈值</span></span><br><span class="line">lower_blue = np.array([<span class="number">110</span>,<span class="number">50</span>,<span class="number">50</span>])</span><br><span class="line">upper_blue = np.array([<span class="number">130</span>,<span class="number">225</span>,<span class="number">225</span>])</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">ret, frame = cap.read()</span><br><span class="line"><span class="comment">#转换为HSV图</span></span><br><span class="line">hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)  </span><br><span class="line">mask = cv2.inRange(hsv, lower_blue, upper_blue)</span><br><span class="line">res = cv2.bitwise_and(frame, frame, mask=mask)</span><br><span class="line"><span class="comment">#cv2.imshow(&#x27;mask&#x27;, mask)</span></span><br><span class="line">cv2.imshow(<span class="string">&#x27;res&#x27;</span>, res)</span><br><span class="line"><span class="keyword">if</span> cv2.waitKey(<span class="number">1</span>) &amp; <span class="number">0xFF</span> == <span class="built_in">ord</span>(<span class="string">&#x27;q&#x27;</span>):</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line">cap.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p><em><strong>注意</strong></em>：</p><ol><li>cv2.inRange函数用于设阈值，去除背景部分，只保留蓝色物体部分。</li><li>从cv2.bitwise_and是对二进制数据进行“与”操作，即对图像（灰度图像或彩色图像均可）每个像素值进行二进制“与”操作。前两个参数是“与”操作的操作对象，mask参数指定使用的模板。</li></ol><p>结果如下：</p><p><img src="https://s1.ax1x.com/2020/03/31/GQ12tg.png" alt="GQ12tg.png"></p><h4 id="3、怎样找到要跟踪对象的HSV值"><a href="#3、怎样找到要跟踪对象的HSV值" class="headerlink" title="3、怎样找到要跟踪对象的HSV值"></a>3、怎样找到要跟踪对象的HSV值</h4><p>​      函数 cv2.cvtColor() 也可以用到这里。但是现在你要传入的参数是（你想要的）BGR 值而不是一副图。例如，我们要找到绿色的 HSV 值，我们只需在终端输入以下命令：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">green = np.uint8([[[<span class="number">0</span>,<span class="number">225</span>,<span class="number">0</span>]]])</span><br><span class="line">green_hsv = cv2.cvtColor(green, cv2.COLOR_BGR2HSV)</span><br><span class="line"><span class="built_in">print</span>(green_hsv)</span><br></pre></td></tr></table></figure><p>现在你可以分别用 [H-10，100，100] 和 [H+10，255，255] 做上下阈值。</p><p><a href="https://www.cnblogs.com/Undo-self-blog/p/8423851.html">点击了解更多！</a></p>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Opencv(一)-图像的基础操作</title>
      <link href="/2019/05/06/Opencv/Opencv(%E4%B8%80)%E2%80%94%E2%80%94%E5%9B%BE%E5%83%8F%E7%9A%84%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/"/>
      <url>/2019/05/06/Opencv/Opencv(%E4%B8%80)%E2%80%94%E2%80%94%E5%9B%BE%E5%83%8F%E7%9A%84%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C/</url>
      
        <content type="html"><![CDATA[<h2 id="学习目标"><a href="#学习目标" class="headerlink" title="学习目标"></a>学习目标</h2><ul><li><p>获取像素值并修改</p></li><li><p>获取图像的属性</p></li><li><p>图像的ROI</p></li><li><p>图像通道的拆分及合并</p><p>几乎所有这些操作与 Numpy 的关系都比与 OpenCV 的关系更加紧密，因此熟练 Numpy 可以帮助我们写出性能更好的代码。</p><h3 id="获取并修改像素值"><a href="#获取并修改像素值" class="headerlink" title="获取并修改像素值"></a>获取并修改像素值</h3><p>1、首先我们需要读入一幅图像：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img=cv2.imread(<span class="string">&#x27;C:\\Users\\Administrator\\Pictures\\Camera Roll\\6.jpg&#x27;</span>)</span><br></pre></td></tr></table></figure><blockquote><p>注：cv2.imread()：读入图片，共两个参数，第一个参数为要读入的图片文件名，第二个参数为如何读取图片，包括cv2.IMREAD_COLOR：读入一副彩色图片；cv2.IMREAD_GRAYSCALE：以灰度模式读入图片；cv2.IMREAD_UNCHANGED：读入一幅图片，并包括其alpha通道。</p></blockquote><span id="more"></span><p><strong>注意：</strong>若文件名为中文，应使用如下方法打开文件：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">img = cv2.imdecode(np.fromfile(<span class="string">&#x27;刘德华.jpg&#x27;</span>, dtype=np.uint8), -<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>2、你可以根据像素的行和列的坐标获取他的像素值。对 BGR 图像而言，返回值为 B，G，R 的值。对灰度图像而言，会返回他的灰度值（亮度？intensity）</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img=cv2.imread(<span class="string">&#x27;C:\\Users\\Administrator\\Pictures\\Camera Roll\\6.jpg&#x27;</span>)</span><br><span class="line">px=img[<span class="number">100</span>,<span class="number">100</span>]</span><br><span class="line"><span class="built_in">print</span>(px)</span><br><span class="line">blue=img[<span class="number">100</span>,<span class="number">100</span>,<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(blue)</span><br></pre></td></tr></table></figure><p>运行结果为：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">171</span> <span class="number">179</span> <span class="number">178</span>]</span><br><span class="line"><span class="number">171</span></span><br></pre></td></tr></table></figure><p><em>其中‘0’表示第一个像素值。</em></p><p>3、可以以类似方式修改像素值：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">  img=cv2.imread(<span class="string">&#x27;C:\\Users\\Administrator\\Pictures\\Camera Roll\\6.jpg&#x27;</span>)</span><br><span class="line">img[<span class="number">100</span>,<span class="number">100</span>]=[<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>]</span><br><span class="line">  <span class="built_in">print</span>(img[<span class="number">100</span>,<span class="number">100</span>])</span><br><span class="line"></span><br><span class="line">  <span class="comment">## [255 255 255]</span></span><br></pre></td></tr></table></figure><h3 id="获取图像属性"><a href="#获取图像属性" class="headerlink" title="获取图像属性"></a>获取图像属性</h3><p>​        图像的属性包括：行，列，通道，图像数据类型，像素数目等img.shape 可以获取图像的形状。他的返回值是一个包含行数，列数，通道数的元组。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">  <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img=cv2.imread(<span class="string">&#x27;C:\\Users\\Administrator\\Pictures\\Camera Roll\\6.jpg&#x27;</span>)</span><br><span class="line">  <span class="built_in">print</span>(img.shape)</span><br><span class="line">  </span><br><span class="line">  <span class="comment">##(342, 548, 3)</span></span><br></pre></td></tr></table></figure><blockquote><p>注意：如果图像是灰度图，返回值仅有行数和列数。所以通过检查这个返回值就可以知道加载的是灰度图还是彩色图。img.size 可以返回图像的像素数目：</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line">  <span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img = cv2.imread(<span class="string">&quot;C:\\Users\\Administrator\\Pictures\\Camera Roll\\6.jpg&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(img.size, img.dtype)</span><br><span class="line"></span><br><span class="line">  <span class="comment">##583443 uint8</span></span><br></pre></td></tr></table></figure><h3 id="图像ROI"><a href="#图像ROI" class="headerlink" title="图像ROI"></a>图像ROI</h3><p>​        有时你需要对一幅图像的特定区域进行操作。例如我们要检测一副图像中眼睛的位置，我们首先应该在图像中找到脸，再在脸的区域中找眼睛，而不是直接在一幅图像中搜索。这样会提高程序的准确性和性能。<br>​        ROI 也是使用 Numpy 索引来获得的。现在我们选择球的部分并把他拷贝到图像的其他区域。</p><blockquote><p>ROI（region of interest），感兴趣区域。机器视觉、图像处理中，从被处理的图像以方框、圆、椭圆、不规则多边形等方式勾勒出需要处理的区域，称为感兴趣区域，ROI。在Halcon、OpenCV、Matlab等机器视觉软件上常用到各种算子（Operator）和函数来求得感兴趣区域ROI，并进行图像的下一步处理。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">  img = cv2.imread(<span class="string">&quot;C:\\Users\\Administrator\\Pictures\\Camera Roll\\7.png&quot;</span>)</span><br><span class="line">ball = img[<span class="number">280</span>:<span class="number">340</span>,<span class="number">330</span>:<span class="number">390</span>]</span><br><span class="line">  img[<span class="number">273</span>:<span class="number">333</span>,<span class="number">100</span>:<span class="number">160</span>]=ball</span><br><span class="line">img=cv2.imshow(<span class="string">&#x27;test&#x27;</span>, img)</span><br><span class="line">  cv2.waitKey(<span class="number">0</span>)</span><br></pre></td></tr></table></figure></li></ul><p>结果如下：</p><p><img src="https://s1.ax1x.com/2020/03/31/GQ1iSs.png" alt="GQ1iSs.png"></p><h3 id="拆分及合并图像通道"><a href="#拆分及合并图像通道" class="headerlink" title="拆分及合并图像通道"></a><strong>拆分及合并图像通道</strong></h3><p>  有时我们需要对 BGR 三个通道分别进行操作。这是你就需要把 BGR 拆分成单个通道。有时你需要把独立通道的图片合并成一个 BGR 图像。你可以这样做：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">  img=cv2.imread(<span class="string">&#x27;C:\\Users\\Administrator\\Pictures\\Camera Roll\\6.jpg&#x27;</span>)</span><br><span class="line">  b,g,r=cv2.split(img)</span><br><span class="line">  img=cv2.merge(b,g,r)</span><br></pre></td></tr></table></figure><p>  假如你想使所有像素的红色通道值都为 0，你不必先拆分再赋值。你可以直接使用 Numpy 索引，这会更快。</p>  <figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">img=cv2.imread(<span class="string">&#x27;C:\\Users\\Administrator\\Pictures\\Camera Roll\\6.jpg&#x27;</span>)</span><br><span class="line">img[:,:,<span class="number">2</span>]=<span class="number">0</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Opencv </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> opencv </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django框架</title>
      <link href="/2019/04/30/Django/Django%E6%A1%86%E6%9E%B6/"/>
      <url>/2019/04/30/Django/Django%E6%A1%86%E6%9E%B6/</url>
      
        <content type="html"><![CDATA[<h2 id="一、Django简介"><a href="#一、Django简介" class="headerlink" title="一、Django简介"></a>一、Django简介</h2><p>  Django是一个开放源代码的Web应用框架，由Python写成。采用了MTV的框架模式，即模型M，视图V和模板T。</p><ol><li>模型（数据存储层）：处理与数据相关的所有事务： 如何存取、如何验证有效性、包含哪些行为以及数据之间的关系等。</li><li>模板（表现层）：处理与表现相关的决定： 如何在页面或其他类型文档中进行显示。</li><li>视图（业务逻辑层）：存取模型及调取恰当模板的相关逻辑。模型与模板的桥梁。</li></ol><h2 id="二、MVC与MTV模型"><a href="#二、MVC与MTV模型" class="headerlink" title="二、MVC与MTV模型"></a>二、MVC与MTV模型</h2><p>MVC(Model View Controller)：是模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用一种业务逻辑、数据、界面显示分离的方法组织代码，将业务逻辑聚集到一个部件里面，在改进和个性化定制界面及用户交互的同时，不需要重新编写业务逻辑。</p><p>MTV: 有些WEB框架觉得MVC的字面意思很别扭，就给它改了一下。view不再是HTML相关，而是主业务逻辑了，相当于控制器。html被放在Templates中，称作模板，于是MVC就变成了MTV。这其实就是一个文字游戏，和MVC本质上是一样的，换了个名字和叫法而已，换汤不换药。</p><span id="more"></span><h3 id="2-1-MVC"><a href="#2-1-MVC" class="headerlink" title="2.1 MVC"></a>2.1 MVC</h3><ul><li><p>Web应用分为以下三层：</p><ul><li>模型（M）</li><li>视图（V）</li><li>控制器（C）</li></ul></li><li><p>三者之间的关系如下：</p><ul><li>模型负责业务对象与数据库的映射(ORM)</li><li>视图负责与用户的交互(页面)</li><li>控制器接受用户的输入调用模型和视图完成用户的请求。</li></ul></li><li><p>示意图如下：</p></li></ul><p><img src="https://upload.cc/i1/2019/04/30/kBhGWu.jpg"></p><h3 id="2-2-MTV"><a href="#2-2-MTV" class="headerlink" title="2.2 MTV"></a>2.2 MTV</h3><p>MTV也分为三层：</p><ul><li>模型（M）</li><li>模板（T）</li><li>视图（V）</li></ul><p>除了以上三层之外，还需要一个URL分发器，它的作用是将一个个URL的页面请求分发给不同的View处理，View再调用相应的Model和Template，MTV的响应模式如下所示：</p><p><img src="https://upload.cc/i1/2019/04/30/WMA2Tv.jpg"></p><h2 id="三、Django项目"><a href="#三、Django项目" class="headerlink" title="三、Django项目"></a>三、Django项目</h2><h3 id="1、基础配置"><a href="#1、基础配置" class="headerlink" title="1、基础配置"></a>1、基础配置</h3><p><a href="https://imgchr.com/i/GQQZj0"><img src="https://s1.ax1x.com/2020/03/31/GQQZj0.png" alt="GQQZj0.png"></a></p><h3 id="2、模型"><a href="#2、模型" class="headerlink" title="2、模型"></a>2、模型</h3><p><img src="https://s1.ax1x.com/2020/03/31/GQQ83R.png" alt="GQQ83R.png"></p><h3 id="3、视图"><a href="#3、视图" class="headerlink" title="3、视图"></a>3、视图</h3><p><img src="https://s1.ax1x.com/2020/03/31/GQQWVS.png" alt="GQQWVS.png"></p><h3 id="4、模板"><a href="#4、模板" class="headerlink" title="4、模板"></a>4、模板</h3><p><img src="https://s1.ax1x.com/2020/03/31/GQQo2n.png" alt="GQQo2n.png"></p><h3 id="5、高级应用"><a href="#5、高级应用" class="headerlink" title="5、高级应用"></a>5、高级应用</h3><p><img src="https://s1.ax1x.com/2020/03/31/GQQOVU.png" alt="GQQOVU.png"></p>]]></content>
      
      
      <categories>
          
          <category> Django </category>
          
      </categories>
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>selenium教程</title>
      <link href="/2019/04/16/Python%E7%88%AC%E8%99%AB/selenium%E6%95%99%E7%A8%8B/"/>
      <url>/2019/04/16/Python%E7%88%AC%E8%99%AB/selenium%E6%95%99%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><p>Selenium 库里有个叫 WebDriver 的 API。WebDriver 有点儿像可以加载网站的浏览器，但是它也可以像 BeautifulSoup 或者其他 Selector 对象一样用来查找页面元素，与页面上的元素进行交互 (发送文本、点击等)，以及执行其他动作来运行网络爬虫。</p><span id="more"></span><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 webdriver</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.chrome.options <span class="keyword">import</span> Options</span><br><span class="line"></span><br><span class="line"><span class="comment"># 要想调用键盘按键操作需要引入keys包</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对浏览器对象进行设置</span></span><br><span class="line">options = Options()</span><br><span class="line">options.add_argument(<span class="string">&#x27;--headless&#x27;</span>) <span class="comment"># 设置无头浏览器</span></span><br><span class="line">options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>) <span class="comment"># 防止定位出现问题</span></span><br><span class="line">options.add_argument(<span class="string">&#x27;--proxy-server=http://113.116.45.20:8118&#x27;</span>) <span class="comment"># 设置代理</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用环境变量指定的浏览器创建浏览器对象</span></span><br><span class="line">driver = webdriver.PhantomJS()</span><br><span class="line">driver = webdriver.Chrome(options=options)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果没有在环境变量指定PhantomJS位置</span></span><br><span class="line">driver = webdriver.PhantomJS(executable_path=<span class="string">&quot;./phantomjs&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># get方法会一直等到页面被完全加载，然后才会继续程序，通常测试会在这里选择 time.sleep(2)</span></span><br><span class="line">driver.get(<span class="string">&quot;http://www.baidu.com/&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取页面名为 wrapper的id标签的文本内容</span></span><br><span class="line">data = driver.find_element_by_id(<span class="string">&quot;wrapper&quot;</span>).text</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印数据内容</span></span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印页面标题 &quot;百度一下，你就知道&quot;</span></span><br><span class="line"><span class="built_in">print</span> driver.title</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成当前页面快照并保存</span></span><br><span class="line">driver.save_screenshot(<span class="string">&quot;baidu.png&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># id=&quot;kw&quot;是百度搜索输入框，输入字符串&quot;长城&quot;</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">u&quot;马云&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># id=&quot;su&quot;是百度搜索按钮，click() 是模拟点击</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取新的页面快照</span></span><br><span class="line">driver.save_screenshot(<span class="string">&quot;马云.png&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印网页渲染后的源代码</span></span><br><span class="line"><span class="built_in">print</span> driver.page_source</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前页面Cookie</span></span><br><span class="line"><span class="built_in">print</span> driver.get_cookies()</span><br><span class="line"></span><br><span class="line"><span class="comment"># ctrl+a 全选输入框内容</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(Keys.CONTROL,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ctrl+x 剪切输入框内容</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(Keys.CONTROL,<span class="string">&#x27;x&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输入框重新输入内容</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">u&quot;王健林&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟Enter回车键</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;su&quot;</span>).send_keys(Keys.RETURN)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除输入框内容</span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).clear()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成新的页面快照</span></span><br><span class="line">driver.save_screenshot(<span class="string">&quot;王健林.png&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前url</span></span><br><span class="line"><span class="built_in">print</span> driver.current_url</span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭当前页面，如果只有一个页面，会关闭浏览器</span></span><br><span class="line"><span class="comment"># driver.close()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 关闭浏览器</span></span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure><h2 id="webdriver"><a href="#webdriver" class="headerlink" title="webdriver"></a>webdriver</h2><p>Selenium 提供了各种浏览器的webdriver，下载地址如下所示：</p><ul><li>IE浏览器:<a href="http://selenium-release.storage.googleapis.com/index.html">http://selenium-release.storage.googleapis.com/index.html</a></li><li>Edge浏览器:<a href="http://go.microsoft.com/fwlink/?LinkId=619687">http://go.microsoft.com/fwlink/?LinkId=619687</a></li><li>chrome浏览器:<a href="http://npm.taobao.org/mirrors/chromedriver/">http://npm.taobao.org/mirrors/chromedriver/</a></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver = webdriver.Ie()</span><br><span class="line">driver = webdriver.Edge()</span><br><span class="line">driver = webdriver.Chrome()</span><br></pre></td></tr></table></figure><p><strong>注意：</strong>要想不指定webdriver的地址，必须将其所在路径加入到系统变量中。</p><h2 id="页面操作"><a href="#页面操作" class="headerlink" title="页面操作"></a>页面操作</h2><p>Selenium 的 WebDriver提供了各种方法来寻找元素。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取id标签值</span></span><br><span class="line">element = driver.find_element_by_id(<span class="string">&quot;passwd-id&quot;</span>)</span><br><span class="line"><span class="comment"># 获取name标签值</span></span><br><span class="line">element = driver.find_element_by_name(<span class="string">&quot;user-name&quot;</span>)</span><br><span class="line"><span class="comment"># 获取标签名值</span></span><br><span class="line">element = driver.find_elements_by_tag_name(<span class="string">&quot;input&quot;</span>)</span><br><span class="line"><span class="comment"># 也可以通过XPath来匹配</span></span><br><span class="line">element = driver.find_element_by_xpath(<span class="string">&quot;//input[@id=&#x27;passwd-id&#x27;]&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="定位UI元素-WebElements"><a href="#定位UI元素-WebElements" class="headerlink" title="定位UI元素 (WebElements)"></a>定位UI元素 (WebElements)</h2><p>关于元素的选取，有如下的API 单个元素选取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">find_element_by_id</span><br><span class="line">find_elements_by_name</span><br><span class="line">find_elements_by_xpath</span><br><span class="line">find_elements_by_link_text</span><br><span class="line">find_elements_by_partial_link_text</span><br><span class="line">find_elements_by_tag_name</span><br><span class="line">find_elements_by_class_name</span><br><span class="line">find_elements_by_css_selector</span><br></pre></td></tr></table></figure><h3 id="1、By-ID"><a href="#1、By-ID" class="headerlink" title="1、By ID"></a>1、By ID</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;coolestWidgetEvah&quot;</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">element = driver.find_element_by_id(<span class="string">&quot;coolestWidgetEvah&quot;</span>)</span><br><span class="line">------------------------ <span class="keyword">or</span> -------------------------</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">element = driver.find_element(by=By.ID, value=<span class="string">&quot;coolestWidgetEvah&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="2、By-Class-Name"><a href="#2、By-Class-Name" class="headerlink" title="2、By Class Name"></a>2、By Class Name</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cheese&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>Cheddar<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;cheese&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>Gouda<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cheeses = driver.find_elements_by_class_name(<span class="string">&quot;cheese&quot;</span>)</span><br><span class="line">------------------------ <span class="keyword">or</span> -------------------------</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">cheeses = driver.find_elements(By.CLASS_NAME, <span class="string">&quot;cheese&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="3、By-Tag-Name"><a href="#3、By-Tag-Name" class="headerlink" title="3、By Tag Name"></a>3、By Tag Name</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">&quot;...&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">frame = driver.find_element_by_tag_name(<span class="string">&quot;iframe&quot;</span>)</span><br><span class="line">------------------------ <span class="keyword">or</span> -------------------------</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">frame = driver.find_element(By.TAG_NAME, <span class="string">&quot;iframe&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="4、By-Name"><a href="#4、By-Name" class="headerlink" title="4、By Name"></a>4、By Name</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">name</span>=<span class="string">&quot;cheese&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cheese = driver.find_element_by_name(<span class="string">&quot;cheese&quot;</span>)</span><br><span class="line">------------------------ <span class="keyword">or</span> -------------------------</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">cheese = driver.find_element(By.NAME, <span class="string">&quot;cheese&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="5、By-Link-Text"><a href="#5、By-Link-Text" class="headerlink" title="5、By Link Text"></a>5、By Link Text</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.google.com/search?q=cheese&quot;</span>&gt;</span>cheese<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cheese = driver.find_element_by_link_text(<span class="string">&quot;cheese&quot;</span>)</span><br><span class="line">------------------------ <span class="keyword">or</span> -------------------------</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">cheese = driver.find_element(By.LINK_TEXT, <span class="string">&quot;cheese&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="6、By-css"><a href="#6、By-css" class="headerlink" title="6、By css"></a>6、By css</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;food&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;dairy&quot;</span>&gt;</span>milk<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;dairy aged&quot;</span>&gt;</span>cheese<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cheese = driver.find_element_by_css_selector(<span class="string">&quot;#food span.dairy.aged&quot;</span>)</span><br><span class="line">------------------------ <span class="keyword">or</span> -------------------------</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">cheese = driver.find_element(By.CSS_SELECTOR, <span class="string">&quot;#food span.dairy.aged&quot;</span>)</span><br></pre></td></tr></table></figure><h3 id="7、By-XPath"><a href="#7、By-XPath" class="headerlink" title="7、By XPath"></a>7、By XPath</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;example&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;other&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="实现-6"><a href="#实现-6" class="headerlink" title="实现"></a>实现</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">inputs = driver.find_elements_by_xpath(<span class="string">&quot;//input&quot;</span>)</span><br><span class="line">------------------------ <span class="keyword">or</span> -------------------------</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line">inputs = driver.find_elements(By.XPATH, <span class="string">&quot;//input&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="鼠标动作链"><a href="#鼠标动作链" class="headerlink" title="鼠标动作链"></a>鼠标动作链</h2><p>有些时候，我们需要再页面上模拟一些鼠标操作，比如双击、右击、拖拽甚至按住不动等，我们可以通过导入 ActionChains 类来做到：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入 ActionChains 类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver <span class="keyword">import</span> ActionChains</span><br><span class="line"></span><br><span class="line"><span class="comment"># 鼠标移动到 ac 位置</span></span><br><span class="line">ac = driver.find_element_by_xpath(<span class="string">&#x27;element&#x27;</span>)</span><br><span class="line">ActionChains(driver).move_to_element(ac).perform()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 ac 位置单击</span></span><br><span class="line">ac = driver.find_element_by_xpath(<span class="string">&quot;elementA&quot;</span>)</span><br><span class="line">ActionChains(driver).move_to_element(ac).click(ac).perform()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 ac 位置双击</span></span><br><span class="line">ac = driver.find_element_by_xpath(<span class="string">&quot;elementB&quot;</span>)</span><br><span class="line">ActionChains(driver).move_to_element(ac).double_click(ac).perform()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 ac 位置右击</span></span><br><span class="line">ac = driver.find_element_by_xpath(<span class="string">&quot;elementC&quot;</span>)</span><br><span class="line">ActionChains(driver).move_to_element(ac).context_click(ac).perform()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 ac 位置左键单击hold住</span></span><br><span class="line">ac = driver.find_element_by_xpath(<span class="string">&#x27;elementF&#x27;</span>)</span><br><span class="line">ActionChains(driver).move_to_element(ac).click_and_hold(ac).perform()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将 ac1 拖拽到 ac2 位置</span></span><br><span class="line">ac1 = driver.find_element_by_xpath(<span class="string">&#x27;elementD&#x27;</span>)</span><br><span class="line">ac2 = driver.find_element_by_xpath(<span class="string">&#x27;elementE&#x27;</span>)</span><br><span class="line">ActionChains(driver).drag_and_drop(ac1, ac2).perform()</span><br></pre></td></tr></table></figure><h2 id="填充表单"><a href="#填充表单" class="headerlink" title="填充表单"></a>填充表单</h2><p>我们已经知道了怎样向文本框中输入文字，但是有时候我们会碰到<select> </select>标签的下拉框。直接点击下拉框中的选项不一定可行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;status&quot;</span> <span class="attr">class</span>=<span class="string">&quot;form-control valid&quot;</span> <span class="attr">onchange</span>=<span class="string">&quot;&quot;</span> <span class="attr">name</span>=<span class="string">&quot;status&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;0&quot;</span>&gt;</span>未审核<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;1&quot;</span>&gt;</span>初审通过<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;2&quot;</span>&gt;</span>复审通过<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;3&quot;</span>&gt;</span>审核不通过<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p>！<a href="%22https://upload-images.jianshu.io/upload_images/6152117-ff1de97521c22133.png?imageMogr2/auto-orient/%22"></a></p><p>Selenium专门提供了Select类来处理下拉框。 其实 WebDriver 中提供了一个叫 Select 的方法，可以帮助我们完成这些事情：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 导入 Select 类</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</span><br><span class="line"></span><br><span class="line"><span class="comment"># 找到 name 的选项卡</span></span><br><span class="line">select = Select(driver.find_element_by_name(<span class="string">&#x27;status&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line">select.select_by_index(<span class="number">1</span>)</span><br><span class="line">select.select_by_value(<span class="string">&quot;0&quot;</span>)</span><br><span class="line">select.select_by_visible_text(<span class="string">u&quot;未审核&quot;</span>)</span><br></pre></td></tr></table></figure><p>以上是三种选择下拉框的方式，它可以根据索引来选择，可以根据值来选择，可以根据文字来选择。注意：</p><blockquote><p>index 索引从 0 开始<br>value是option标签的一个属性值，并不是显示在下拉框中的值<br>visible_text是在option标签文本的值，是显示在下拉框的值</p></blockquote><p>全部取消选择怎么办呢？很简单:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select.deselect_all()</span><br></pre></td></tr></table></figure><h2 id="弹窗处理"><a href="#弹窗处理" class="headerlink" title="弹窗处理"></a>弹窗处理</h2><p>当你触发了某个事件之后，页面出现了弹窗提示，处理这个提示或者获取提示信息方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alert = driver.switch_to_alert()</span><br></pre></td></tr></table></figure><h2 id="页面切换"><a href="#页面切换" class="headerlink" title="页面切换"></a>页面切换</h2><p>一个浏览器肯定会有很多窗口，所以我们肯定要有方法来实现窗口的切换。切换窗口的方法如下：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.switch_to.window(<span class="string">&quot;this is window name&quot;</span>)</span><br></pre></td></tr></table></figure><p>也可以使用 window_handles 方法来获取每个窗口的操作对象。例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> handle <span class="keyword">in</span> driver.window_handles:</span><br><span class="line">    driver.switch_to_window(handle)</span><br></pre></td></tr></table></figure><h2 id="页面前进和后退"><a href="#页面前进和后退" class="headerlink" title="页面前进和后退"></a>页面前进和后退</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">driver.forward()     <span class="comment">#前进</span></span><br><span class="line">driver.back()        <span class="comment"># 后退</span></span><br></pre></td></tr></table></figure><h2 id="页面等待"><a href="#页面等待" class="headerlink" title="页面等待"></a>页面等待</h2><p>现在的网页越来越多采用了 Ajax 技术，这样程序便不能确定何时某个元素完全加载出来了。如果实际页面等待时间过长导致某个dom元素还没出来，但是你的代码直接使用了这个WebElement，那么就会抛出NullPointer的异常。<br>为了避免这种元素定位困难而且会提高产生 ElementNotVisibleException 的概率。所以 Selenium 提供了两种等待方式，一种是隐式等待，一种是显式等待。</p><p>隐式等待是等待特定的时间，显式等待是指定某一条件直到这个条件成立时继续执行。</p><h3 id="显示等待"><a href="#显示等待" class="headerlink" title="显示等待"></a>显示等待</h3><p>显式等待指定某个条件，然后设置最长等待时间。如果在这个时间还没有找到元素，那么便会抛出异常了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.common.by <span class="keyword">import</span> By</span><br><span class="line"><span class="comment"># WebDriverWait 库，负责循环等待</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> WebDriverWait</span><br><span class="line"><span class="comment"># expected_conditions 类，负责条件出发</span></span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support <span class="keyword">import</span> expected_conditions <span class="keyword">as</span> EC</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.get(<span class="string">&quot;http://www.xxxxx.com/loading&quot;</span>)</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="comment"># 页面一直循环，直到 id=&quot;myDynamicElement&quot; 出现</span></span><br><span class="line">    element = WebDriverWait(driver, <span class="number">10</span>).until(</span><br><span class="line">        EC.presence_of_element_located((By.ID, <span class="string">&quot;myDynamicElement&quot;</span>))</span><br><span class="line">    )</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">    driver.quit()</span><br></pre></td></tr></table></figure><p>如果不写参数，程序默认会 0.5s 调用一次来查看元素是否已经生成，如果本来元素就是存在的，那么会立即返回。</p><p>下面是一些内置的等待条件，你可以直接调用这些条件，而不用自己写某些等待条件了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">title_is</span><br><span class="line">title_contains</span><br><span class="line">presence_of_element_located</span><br><span class="line">visibility_of_element_located</span><br><span class="line">visibility_of</span><br><span class="line">presence_of_all_elements_located</span><br><span class="line">text_to_be_present_in_element</span><br><span class="line">text_to_be_present_in_element_value</span><br><span class="line">frame_to_be_available_and_switch_to_it</span><br><span class="line">invisibility_of_element_located</span><br><span class="line">element_to_be_clickable – it <span class="keyword">is</span> Displayed <span class="keyword">and</span> Enabled.</span><br><span class="line">staleness_of</span><br><span class="line">element_to_be_selected</span><br><span class="line">element_located_to_be_selected</span><br><span class="line">element_selection_state_to_be</span><br><span class="line">element_located_selection_state_to_be</span><br><span class="line">alert_is_present</span><br></pre></td></tr></table></figure><h3 id="隐式等待"><a href="#隐式等待" class="headerlink" title="隐式等待"></a>隐式等待</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Chrome()</span><br><span class="line">driver.implicitly_wait(<span class="number">10</span>) <span class="comment"># seconds</span></span><br><span class="line">driver.get(<span class="string">&quot;http://www.xxxxx.com/loading&quot;</span>)</span><br><span class="line">myDynamicElement = driver.find_element_by_id(<span class="string">&quot;myDynamicElement&quot;</span>)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> selenium </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Scrapy的爬虫(一)</title>
      <link href="/2019/04/15/Python%E7%88%AC%E8%99%AB/%E5%9F%BA%E4%BA%8EScrapy%E7%9A%84%E7%88%AC%E8%99%AB/"/>
      <url>/2019/04/15/Python%E7%88%AC%E8%99%AB/%E5%9F%BA%E4%BA%8EScrapy%E7%9A%84%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<h3 id="一、项目创建"><a href="#一、项目创建" class="headerlink" title="一、项目创建"></a>一、项目创建</h3><p>1、打开cmd，将路径cd到将要创建项目的文件夹，执行命令<em><strong>scrapy startproject 项目名</strong></em>。<br>2、新建项目下有一个spiders文件夹，将路径cd到spiders文件夹，执行命令<em><strong>scrapy genspider 文件名 web</strong></em>。<br>3、如果第二步的文件名为basic，则运行项目时在spiders下执行命令<em><strong>scrapy crawl basic</strong></em>。<br>4、在爬取的同时我们也可以把数据保存到文件中，通过如下命令即可：<em><strong>scrapy crawl basic -o items.json</strong></em>。</p><span id="more"></span>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
